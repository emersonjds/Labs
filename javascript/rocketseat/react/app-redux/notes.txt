Redux
O fluxo de operação do Redux parte de um componente que passa uma informação para uma Action ( geralmente a Action ira se comunicar com algum outro componente que faz requets ) e chega na store, dentro da Store ha os reducers que vai escutar qual a citou foi disparada e o reducer responsável por aquela ação ira atualizar o estado do Store, que sera repassado para todos os componentes que estão conectados aqueles reducers.
Então o fluxo é sempre , componente -> action -> reducers -> atualizar o store -> retorna a informação para os componentes conectados

As actions , os middlewares buscam informações de APis, essas informações são repassadas para o store do redux, o os reducers alteram as informações do estado que retorna para os componentes


Para configurar o redux é necessario instalar 2 dependencias
redux + react-redux

É necessario configurar o arquivo de Store

No arquivo principal da aoplicaçã é necessario informar que estamos conectados a esse Store que foi criado, desta forma é utilizado o Provider do react-redux, esse Componente garante que a aplicação esta conectada ao Store, ele é passado como uma propriedade , assim como é passado para um componente comum. O Provider garante que a api de contexto do React seja passada para todos os componentes da aplicação

REDUCERS
Os reducers sempre serao funções puras, que receberao parametros e retornarão novos estados
*Todo reducer recebe 2 parametros, o estado atual ( state) e a action que ira executar dentro de m switch
Exemplo
export default function todos(state, action) {} ...
O reducer fica esperando a execução de uma action passada por algum componente, apos receber o valor do stado atual com a operação da action ele retorna um novo estado para o componente, essa operação é sempre a mesma , reducer sempre recebe estado atual e a action que ira executar , atualiza o estado e retorna
*Todos os reducers escutam todas as Actions, porem dentro dele que ocorre a alteração de estado ou nao
* Toda action tem um type, esse type significa um id dentro das actions
type: 'ADD_TODO'

O que deve ser entendido é que o estado inicial que entra no reducer é o estado atual da aplicação , junto com a action que é sempre uma AÇAO de alteração de estado é alterado o state e retornado aos componentes que escutam aquele reducer

Nos componentes quando chamados o mapStateToProps estamos conectando o nome da propriedade do Store ao componente, em tradução literal seria, mapeie os estados em Propriedades para o meu componente, desta forma o componente implicitamente com Props esta se conectando diretamente a Store

Ja quando utilizamos o mapDispatchToProps, estamos passando a action que sera disparada do componente para a Action que se comunica com o reducer, o dispatch neste caso pode ser entendido como uma ação a ser executada, toda action envia 2 parametros o type ( que seria o id da Action) e por boas praticas se envia o Payload que seria qualquer outro valor que a action ira direcionar para o reducer

É boa pratica ainda deixar todas as actions em arquivos separados, assim quaisquers outros componentes podem utilizar essas actions para disparar ações.



--------------------------------- // --------------------------------
ROUTER
Para utilizar o sistema de rotas no react é necessario baixar a lib react-router-dom que faz esse gerenciamento, criar um arquivo de rotas e por la fazer toda configuração, bem semelhante ao que ja é feito no Angular

// O BrowserRouter é responsavel por informar para a aplicação React que as rotas estao ligadas ao navegador, ele esta por fora das rotas em si por que essa lib pode ser utilizada por outras aplicações.

// O Switch é responsavel por nao deixar que duas rotas sejam repetidas na aplicação
// digamos que tenham duas rotas de nome iguais, quando a o Switch ve esse tipo de ação ele para o render e identifica exatamente o que esta sendo passado como base na url, e possivel tambem utilizar a palavra reservada "exact" desta forma o sistema de rota so é disparado quando aquela rota exata que esta sendo passada no path for identificada
<Route exact path="/" component={Main} />

