Enzyme 
Biblioteca do Airbnb para testes , deve ser instalada como dependencia 

Por padrao o create-react-app busca os arquivos de Setup para testes de um arquivo na raiz chamado setupTests.js, porem é possivel criar um repositorio separado para configurar esse setup 
Toda vez que for utilizado a lib do enzyme, é necessario verificar em qual versao do React ela vai rodar, cada versao do Enzyme tem functions que podem nao funcionar em outras versoes.
Neste caso é necessario chamar o Adapter da lib enzyme-adapter-react-(numero da versao)
import Adapter from 'enzyme-adapter-react-16' (exemplo)

Para trabalhar com testes utilizamos algumas palavras chaves para execução do script
a palavra 'it' indica o descritivo do teste, a partir dela ja é possivel saber o que aquele teste esta fazendo. 
A palavra expect() serve para dizermos o que esperamos como resultado daquele teste caso tudo ocorra bem
Quando se cria varios testes e todos eles estao relacionados a um unico componente, um unico recurso, podemos utilizar o 'describle' para agrupar os testes de um recurso ou componente em questao.
Dentro do describle ficam agrupados todos os its que descrevem o teste que sera feito

A palavra reservada shallow esta disponivel somente no enzyme, neste caso ela é responsavel por criar uma arvore de elementos no DOM
No enzyme existe funçoes que podem adicionar dados aos componentes e estruturas de dados como Arrays e Objetos 
O enzyme utiliza o JS DOM para simular um virtual DOM e executar os testes, desta forma se utilizarmos chamadas a LocalStorage ou mesmo a APIs ele nao vai conseguir executar essas chamadas por que o JS Dom nao permite isso , para isso utiliza-se stubbys e outros ambientes mockados.
o Stub sevre para simular retornos de uma funçao, ja o outro metodo Spy , serve para inspecionar quantas vezes uma função foi executada , quantas vezes foi executada, com quais valores foi executada.

- Nos testes , quando queremos executar somente um teste de uma gama deles , ao inves de 'it' utilizamos a chamada 'fit', desta forma ele descarta todos os outros testes e executa somente o com a chamada de fit
- Caso seja necessario descartar o teste , ao inves de it ou fit , utiliza-se a palavra 'xit' , deste forma o Jest descarta aquele trecho de codigo de teste


OBS:
- Quando se esta testando componentes é muito importante entender que os componentes devem ser tratados como independentes de outros componentes, essa é a forma ideal de testas sempre com interdependencia entre componentes
- Ao testar redux nao é necessario testar os reducers, o ideal verificar se as actions foram chamadas o restante é verificado de outra maneira.
- Para testes com redux o ideal é utilizar o redux-mock-store junto com o Jest


