Babel
A ferramenta mais comum para fazer transpilação de JavaScript hoje em dia é o Babel. Ele nasceu com o nome "6to5".

Sua principal função era permitir que a gente escrevesse JavaScript com as sintaxes inseridas no EcmaScript 6, posteriormente renomeado para ES2015. Como os navegadores da época não davam suporte ainda ao ES6, o 6to5 convertia nosso código em JavaScript que os navegadores entendiam, o EcmaScript 5.

Como foi anunciado que o JavaScript agora teria atualizações menores e com mais frequência, não fazia sentido manter o nome da ferramenta como 6to5. Então rebatizaram a ferramenta para Babel.

Hoje em dia ele não é apenas utilizado para transpilar ES2015, ES2018, etc, mas também é usado para transpilar JSX.

WebPack
O WebPack é um construtor de módulos. Isso significa que ao invés de ficarmos importando nossos scripts no HTML, podemos criar arquivos bem separados, como módulos, e importá-los, assim como faríamos no back-end.

Ok, isso o Browserify já fazia. O WebPack vai além. Ele também aceita que a gente importe HTML, CSS, Sass, Imagens, CoffeeScript, etc.

Em conjunto com o Babel nós podemos fazer com que o WebPack transpile o JSX antes dele arrumar as dependências do projeto para poder formar o pacote que será entregue ao usuário.

Além disso, o WebPack também é capaz de subir um servidor com LiveReload para podermos acessar nossas páginas.

Gulp
O Gulp é um automatizador de tarefas.

Podemos, por exemplo, pedir para ele observar um diretório, e toda vez que algum arquivo for alterado, o Gulp irá enviar um e-mail para uma pessoa e enviar esse arquivo ao Github.

É mais comum utilizá-lo para automatizar a transpilação e subir servidores com LiveReload.

Imagine toda vez que você alterar um Sass ou JSX e tiver que executar o comando para transpilar e então atualizar o seu navegador para ver as modificações.

O Gulp pode ficar observando os arquivos. Se um SCSS alterar ele executa o Sass para transformar seu código em CSS e já manda uma ordem ao navegador para atualizar o CSS!

Podemos deixar ele observando um JavaScript e sempre que alterarmos ele irá chamar o Jasmine para fazer um teste no nosso código.

Com ele nós podemos automatizar o que nossa imaginação (e nosso conhecimento em programação) permitir.

Muita informação? Calma! Veremos como configurar essas ferramentas e, mais para frente, veremos como criar um projeto React sem precisar configurar nada.

Estamos vendo como essas ferramentas funcionam porque serão elas que estarão sendo executadas por baixo dos panos, e é bom saber o que está acontecendo para poder ter total controle do seu ambiente de trabalho.