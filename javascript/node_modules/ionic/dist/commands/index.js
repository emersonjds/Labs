"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const chalk = require("chalk");
const minimist = require("minimist");
const cli_utils_1 = require("@ionic/cli-utils");
const index_1 = require("./config/index");
const index_2 = require("./git/index");
const index_3 = require("./ssh/index");
const index_4 = require("./package/index");
const info_1 = require("./info");
const login_1 = require("./login");
const logout_1 = require("./logout");
const signup_1 = require("./signup");
const start_1 = require("./start");
const version_1 = require("./version");
const help_1 = require("./help");
const telemetry_1 = require("./telemetry");
const docs_1 = require("./docs");
const daemon_1 = require("./daemon");
const ionitron_1 = require("./ionitron");
const serve_1 = require("./serve");
const generate_1 = require("./generate");
const link_1 = require("./link");
const upload_1 = require("./upload");
class IonicNamespace extends cli_utils_1.Namespace {
    constructor() {
        super(...arguments);
        this.root = true;
        this.name = 'ionic';
        this.source = 'ionic';
        this.namespaces = new cli_utils_1.NamespaceMap([
            ['config', () => new index_1.ConfigNamespace()],
            ['git', () => new index_2.GitNamespace()],
            ['ssh', () => new index_3.SSHNamespace()],
            ['package', () => new index_4.PackageNamespace()],
        ]);
        this.commands = new cli_utils_1.CommandMap([
            ['start', () => new start_1.StartCommand()],
            ['serve', () => new serve_1.ServeCommand()],
            ['help', () => new help_1.HelpCommand()],
            ['info', () => new info_1.InfoCommand()],
            ['login', () => new login_1.LoginCommand()],
            ['logout', () => new logout_1.LogoutCommand()],
            ['signup', () => new signup_1.SignupCommand()],
            ['version', () => new version_1.VersionCommand()],
            ['telemetry', () => new telemetry_1.TelemetryCommand()],
            ['docs', () => new docs_1.DocsCommand()],
            ['daemon', () => new daemon_1.DaemonCommand()],
            ['ionitron', () => new ionitron_1.IonitronCommand()],
            ['generate', () => new generate_1.GenerateCommand()],
            ['g', 'generate'],
            ['link', () => new link_1.LinkCommand()],
            ['upload', () => new upload_1.UploadCommand()],
        ]);
    }
    runCommand(env, pargv) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const config = yield env.config.load();
            const argv = minimist(pargv, { boolean: true, string: '_' });
            let [depth, inputs, cmdOrNamespace] = this.locate(argv._);
            if (cmdOrNamespace === this && cli_utils_1.KNOWN_COMMAND_PLUGINS.indexOf(inputs[0]) !== -1) {
                const plugin = yield cli_utils_1.promptToInstallPlugin(env, `${cli_utils_1.ORG_PREFIX}/${cli_utils_1.PLUGIN_PREFIX}${inputs[0]}`, {});
                if (plugin) {
                    cli_utils_1.registerPlugin(env, plugin);
                    [depth, inputs, cmdOrNamespace] = env.namespace.locate(inputs);
                }
            }
            if (!cli_utils_1.isCommand(cmdOrNamespace)) {
                return cli_utils_1.showHelp(env, argv._);
            }
            const command = cmdOrNamespace;
            command.metadata.minimistOpts = cli_utils_1.metadataToMinimistOptions(command.metadata);
            if (command.metadata.backends && !command.metadata.backends.includes(config.backend)) {
                env.log.error(`Sorry! The configured backend (${chalk.bold(config.backend)}) does not know about ${chalk.green('ionic ' + command.metadata.fullName)}.\n` +
                    `You can switch backends with ${chalk.green('ionic config set -g backend')}.`);
                return 1;
            }
            const options = minimist(pargv, command.metadata.minimistOpts);
            inputs = options._.slice(depth);
            command.env = env;
            yield command.validate(inputs);
            if (!env.project.directory && command.metadata.type === 'project') {
                env.log.error(`Sorry! ${chalk.green('ionic ' + command.metadata.fullName)} can only be run in an Ionic project directory.`);
                return 1;
            }
            if (command.metadata.options) {
                let found = false;
                for (let opt of command.metadata.options) {
                    if (opt.backends && opt.default !== options[opt.name] && !opt.backends.includes(config.backend)) {
                        found = true;
                        env.log.warn(`${chalk.green('--' + (opt.default === true ? 'no-' : '') + opt.name)} has no effect with the configured backend (${chalk.bold(config.backend)}).`);
                    }
                }
                if (found) {
                    env.log.info(`You can switch backends with ${chalk.green('ionic config set -g backend')}.`);
                }
            }
            try {
                yield command.execute(inputs, options);
            }
            catch (e) {
                const cmdsource = command.metadata.source;
                if (this.source !== cmdsource && !e.fatal && !cli_utils_1.isValidationErrorArray(e)) {
                    env.log.warn(`Error occurred during command execution from a CLI plugin${cmdsource ? ' (' + chalk.green(cmdsource) + ')' : ''}.`);
                }
                throw e;
            }
        });
    }
}
exports.IonicNamespace = IonicNamespace;
