"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const chalk = require("chalk");
const cli_utils_1 = require("@ionic/cli-utils");
let SSHSetupCommand = class SSHSetupCommand extends cli_utils_1.Command {
    run(inputs, options) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const [{ getGeneratedPrivateKeyPath }, { getSSHConfigPath }] = yield Promise.all([Promise.resolve().then(function () { return require('../../lib/ssh'); }), Promise.resolve().then(function () { return require('../../lib/ssh-config'); })]);
            const config = yield this.env.config.load();
            const sshconfigPath = getSSHConfigPath();
            const keyPath = yield getGeneratedPrivateKeyPath(this.env);
            const pubkeyPath = `${keyPath}.pub`;
            // TODO: link to docs about manual git setup
            const [pubkeyExists, keyExists] = yield Promise.all([cli_utils_1.pathExists(keyPath), cli_utils_1.pathExists(pubkeyPath)]);
            if (config.git.setup) {
                const rerun = yield this.env.prompt({
                    type: 'confirm',
                    name: 'confirm',
                    message: `SSH setup wizard has run before. Would you like to run it again?`,
                });
                if (!rerun) {
                    return 0;
                }
            }
            else if (!pubkeyExists && !keyExists) {
                this.env.log.info('The automatic SSH setup will do the following:\n' +
                    `1) Generate SSH key pair with OpenSSH.\n` +
                    `2) Upload the generated SSH public key to our server, registering it on your account.\n` +
                    `3) Modify your SSH config (${chalk.bold(cli_utils_1.prettyPath(sshconfigPath))}) to use the generated SSH private key for our server(s).`);
                const confirm = yield this.env.prompt({
                    type: 'confirm',
                    name: 'confirm',
                    message: 'May we proceed?',
                });
                if (!confirm) {
                    return 1;
                }
            }
            if (pubkeyExists && keyExists) {
                this.env.log.info(`Using your previously generated key: ${chalk.bold(cli_utils_1.prettyPath(keyPath))}.\n` +
                    `You can generate a new one by deleting it.`);
            }
            else {
                yield this.runcmd(['ssh', 'generate', keyPath]);
            }
            yield this.runcmd(['ssh', 'add', pubkeyPath]);
            yield this.runcmd(['ssh', 'use', keyPath]);
            config.git.setup = true;
            this.env.log.ok('SSH setup successful!');
        });
    }
};
SSHSetupCommand = tslib_1.__decorate([
    cli_utils_1.CommandMetadata({
        name: 'setup',
        type: 'global',
        backends: [cli_utils_1.BACKEND_PRO],
        description: 'Setup your Ionic SSH keys automatically',
    })
], SSHSetupCommand);
exports.SSHSetupCommand = SSHSetupCommand;
