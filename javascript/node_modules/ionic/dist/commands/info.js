"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const chalk = require("chalk");
const cli_utils_1 = require("@ionic/cli-utils");
let InfoCommand = class InfoCommand extends cli_utils_1.Command {
    run(inputs, options) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const task = this.env.tasks.next('Gathering environment info');
            const initialValue = [];
            const results = yield this.env.hooks.fire('command:info', { cmd: this, env: this.env, inputs, options });
            const flattenedResults = results.reduce((acc, currentValue) => acc.concat(currentValue), initialValue);
            const cliDetails = flattenedResults.filter((item) => item.type === 'cli-packages');
            const globalNpmDetails = flattenedResults.filter((item) => item.type === 'global-packages' || item.type === 'global-npm'); // TODO: take out global-npm
            const localNpmDetails = flattenedResults.filter((item) => item.type === 'local-packages' || item.type === 'local-npm'); // TODO: take out local-npm
            const systemDetails = flattenedResults.filter((item) => item.type === 'system');
            const splitInfo = (ary) => ary
                .sort((a, b) => cli_utils_1.strcmp(a.name, b.name))
                .map((item) => [item.name, chalk.dim(item.version) + (item.path ? ` ${chalk.dim('(' + item.path + ')')}` : '')]);
            const format = (details) => cli_utils_1.columnar(details, { vsep: ':' }).split('\n').join('\n    ');
            task.end();
            if (!this.env.project.directory) {
                this.env.log.warn('You are not in an Ionic project directory. Project context may be missing.');
            }
            if (cliDetails.length > 0) {
                this.env.log.msg('\n' + chalk.bold('cli packages:'));
                this.env.log.msg(`\n    ${format(splitInfo(cliDetails))}`);
            }
            if (globalNpmDetails.length > 0) {
                this.env.log.msg('\n' + chalk.bold('global packages:'));
                this.env.log.msg(`\n    ${format(splitInfo(globalNpmDetails))}`);
            }
            if (localNpmDetails.length > 0) {
                this.env.log.msg('\n' + chalk.bold('local packages:'));
                this.env.log.msg(`\n    ${format(splitInfo(localNpmDetails))}`);
            }
            if (systemDetails.length > 0) {
                this.env.log.msg('\n' + chalk.bold('System:'));
                this.env.log.msg(`\n    ${format(splitInfo(systemDetails))}`);
            }
            this.env.log.nl();
        });
    }
};
InfoCommand = tslib_1.__decorate([
    cli_utils_1.CommandMetadata({
        name: 'info',
        type: 'global',
        description: 'Print system/environment info'
    })
], InfoCommand);
exports.InfoCommand = InfoCommand;
