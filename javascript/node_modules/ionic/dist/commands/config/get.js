"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const util = require("util");
const chalk = require("chalk");
const cli_utils_1 = require("@ionic/cli-utils");
let ConfigGetCommand = class ConfigGetCommand extends cli_utils_1.Command {
    scrubTokens(obj) {
        const lodash = this.env.load('lodash');
        return lodash.mapValues(obj, () => '*****');
    }
    sanitize(key, obj) {
        const lodash = this.env.load('lodash');
        if (typeof obj === 'object' && 'tokens' in obj) {
            obj['tokens'] = this.scrubTokens(obj['tokens']);
        }
        if (key === 'tokens') {
            lodash.assign(obj, this.scrubTokens(obj));
        }
    }
    run(inputs, options) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            let [p] = inputs;
            const { global } = options;
            if (!global && !this.env.project.directory) {
                throw this.exit(`Sorry--this won't work outside an Ionic project directory. Did you mean to print global config using ${chalk.green('--global')}?`);
            }
            const file = global ? this.env.config : this.env.project;
            const config = yield file.load();
            const lodash = this.env.load('lodash');
            const v = lodash.cloneDeep(p ? lodash.get(config, p) : config);
            this.sanitize(p, v);
            this.env.log.msg(util.inspect(v, { colors: chalk.enabled }));
        });
    }
};
ConfigGetCommand = tslib_1.__decorate([
    cli_utils_1.CommandMetadata({
        name: 'get',
        type: 'global',
        description: 'Print config values',
        longDescription: `
By default, this command prints properties in your project's ${chalk.bold(cli_utils_1.PROJECT_FILE)} file.

For ${chalk.green('--global')} config, the CLI prints properties in the global CLI config file (${chalk.bold('~/.ionic/config.json')}).

For nested properties, separate nest levels with dots. For example, the property name ${chalk.green('user.email')} will look in the ${chalk.bold('user')} object (a root-level field in the global CLI config file) for the ${chalk.bold('email')} field.

Without a ${chalk.green('property')} argument, this command prints out the entire file contents.
  `,
        inputs: [
            {
                name: 'property',
                description: 'The property name you wish to get',
                required: false,
            },
        ],
        options: [
            {
                name: 'global',
                description: 'Use global CLI config',
                type: Boolean,
                aliases: ['g'],
            },
        ],
        exampleCommands: ['', 'app_id', '--global user.email', '-g yarn'],
    })
], ConfigGetCommand);
exports.ConfigGetCommand = ConfigGetCommand;
