"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const chalk = require("chalk");
const cli_utils_1 = require("@ionic/cli-utils");
let GitRemoteCommand = class GitRemoteCommand extends cli_utils_1.Command {
    run(inputs, options) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const token = yield this.env.session.getUserToken();
            const appId = yield this.env.project.loadAppId();
            const appLoader = new cli_utils_1.App(token, this.env.client);
            const app = yield appLoader.load(appId);
            if (!app.repo_url) {
                throw this.exit(`Missing ${chalk.bold('repo_url')} property in app.`);
            }
            const remote = app.repo_url;
            const regex = /ionic\t(.+) \(\w+\)/;
            // would like to use get-url, but not available in git 2.0.0
            const remotes = yield this.env.shell.run('git', ['remote', '-v'], { showCommand: false, cwd: this.env.project.directory });
            let found = false;
            let matches = true;
            for (let line of remotes.split('\n')) {
                const match = regex.exec(line.trim());
                if (match) {
                    found = true;
                    if (match[1] !== remote) {
                        matches = false;
                        break;
                    }
                }
            }
            if (found) {
                if (matches) {
                    this.env.log.info(`Existing remote ${chalk.bold('ionic')} found.`);
                }
                else {
                    yield this.env.shell.run('git', ['remote', 'set-url', 'ionic', remote], { cwd: this.env.project.directory });
                    this.env.log.ok(`Updated remote ${chalk.bold('ionic')}.`);
                }
            }
            else {
                yield this.env.shell.run('git', ['remote', 'add', 'ionic', remote], { cwd: this.env.project.directory });
                this.env.log.ok(`Added remote ${chalk.bold('ionic')}.`);
            }
        });
    }
};
GitRemoteCommand = tslib_1.__decorate([
    cli_utils_1.CommandMetadata({
        name: 'remote',
        type: 'project',
        backends: [cli_utils_1.BACKEND_PRO],
        description: 'Adds/updates the Ionic git remote to your local Ionic app repository',
    })
], GitRemoteCommand);
exports.GitRemoteCommand = GitRemoteCommand;
