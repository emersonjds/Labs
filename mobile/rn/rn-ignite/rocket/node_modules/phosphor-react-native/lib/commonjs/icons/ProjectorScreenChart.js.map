{"version":3,"sources":["ProjectorScreenChart.tsx"],"names":["ProjectorScreenChart","weight","color","size","style","mirrored","contextColor","contextSize","contextWeight","contextMirrored","contextStyle","IconContext","IconComponent","iconWeight","weightMap","bold","duotone","fill","light","regular","thin","mirroredValue","transform","scaleX"],"mappings":";;;;;;;AACA;;AACA;;AAEA;;AACA;;AACA;;AACA;;AACA;;AACA;;;;;;;;AATA;AAWA,SAASA,oBAAT,CAA8B;AAC5BC,EAAAA,MAD4B;AAE5BC,EAAAA,KAF4B;AAG5BC,EAAAA,IAH4B;AAI5BC,EAAAA,KAJ4B;AAK5BC,EAAAA;AAL4B,CAA9B,EAMc;AACZ,QAAM;AACJH,IAAAA,KAAK,EAAEI,YAAY,GAAG,MADlB;AAEJH,IAAAA,IAAI,EAAEI,WAAW,GAAG,EAFhB;AAGJN,IAAAA,MAAM,EAAEO,aAAa,GAAG,SAHpB;AAIJH,IAAAA,QAAQ,EAAEI,eAAe,GAAG,KAJxB;AAKJL,IAAAA,KAAK,EAAEM;AALH,MAMF,uBAAWC,gBAAX,CANJ;AAQA,QAAMC,aAAa,GAAG,oBAAQ,MAAM;AAClC,UAAMC,UAAU,GAAGZ,MAAH,aAAGA,MAAH,cAAGA,MAAH,GAAaO,aAA7B;AAEA,UAAMM,SAAS,GAAG;AAChBC,MAAAA,IAAI,EAAJA,6BADgB;AAEhBC,MAAAA,OAAO,EAAPA,8BAFgB;AAGhBC,MAAAA,IAAI,EAAJA,8BAHgB;AAIhBC,MAAAA,KAAK,EAALA,8BAJgB;AAKhBC,MAAAA,OAAO,EAAPA,8BALgB;AAMhBC,MAAAA,IAAI,EAAJA;AANgB,KAAlB;AASA,WAAON,SAAS,CAACD,UAAD,CAAhB;AACD,GAbqB,EAanB,CAACZ,MAAD,EAASO,aAAT,CAbmB,CAAtB;AAeA,QAAMa,aAAa,GAAGhB,QAAH,aAAGA,QAAH,cAAGA,QAAH,GAAeI,eAAlC;AAEA,sBACE,6BAAC,aAAD;AACE,IAAA,KAAK,EAAEP,KAAF,aAAEA,KAAF,cAAEA,KAAF,GAAWI,YADlB;AAEE,IAAA,IAAI,EAAEH,IAAF,aAAEA,IAAF,cAAEA,IAAF,GAAUI,WAFhB;AAGE,IAAA,KAAK,EAAE,CACLG,YADK,EAELN,KAFK,EAGL,EACE,IAAIiB,aAAa,IAAI;AACnBC,QAAAA,SAAS,EAAE,CAAC;AAAEC,UAAAA,MAAM,EAAE,CAAC;AAAX,SAAD;AADQ,OAArB;AADF,KAHK;AAHT,IADF;AAeD;;eAEcvB,oB","sourcesContent":["/* GENERATED FILE */\nimport React, { useContext, useMemo } from 'react';\nimport { IconProps, IconContext } from '../lib';\n\nimport bold from '../bold/ProjectorScreenChart';\nimport duotone from '../duotone/ProjectorScreenChart';\nimport fill from '../fill/ProjectorScreenChart';\nimport light from '../light/ProjectorScreenChart';\nimport regular from '../regular/ProjectorScreenChart';\nimport thin from '../thin/ProjectorScreenChart';\n\nfunction ProjectorScreenChart({\n  weight,\n  color,\n  size,\n  style,\n  mirrored,\n}: IconProps) {\n  const {\n    color: contextColor = '#000',\n    size: contextSize = 24,\n    weight: contextWeight = 'regular',\n    mirrored: contextMirrored = false,\n    style: contextStyle,\n  } = useContext(IconContext);\n\n  const IconComponent = useMemo(() => {\n    const iconWeight = weight ?? contextWeight;\n\n    const weightMap = {\n      bold,\n      duotone,\n      fill,\n      light,\n      regular,\n      thin,\n    };\n\n    return weightMap[iconWeight];\n  }, [weight, contextWeight]);\n\n  const mirroredValue = mirrored ?? contextMirrored;\n\n  return (\n    <IconComponent\n      color={color ?? contextColor}\n      size={size ?? contextSize}\n      style={[\n        contextStyle,\n        style,\n        {\n          ...(mirroredValue && {\n            transform: [{ scaleX: -1 }],\n          }),\n        },\n      ]}\n    />\n  );\n}\n\nexport default ProjectorScreenChart;\n"]}