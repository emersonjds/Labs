/* GENERATED FILE */
import React, { useContext, useMemo } from 'react';
import { IconContext } from '../lib';
import bold from '../bold/GoogleChromeLogo';
import duotone from '../duotone/GoogleChromeLogo';
import fill from '../fill/GoogleChromeLogo';
import light from '../light/GoogleChromeLogo';
import regular from '../regular/GoogleChromeLogo';
import thin from '../thin/GoogleChromeLogo';

function GoogleChromeLogo({
  weight,
  color,
  size,
  style,
  mirrored
}) {
  const {
    color: contextColor = '#000',
    size: contextSize = 24,
    weight: contextWeight = 'regular',
    mirrored: contextMirrored = false,
    style: contextStyle
  } = useContext(IconContext);
  const IconComponent = useMemo(() => {
    const iconWeight = weight !== null && weight !== void 0 ? weight : contextWeight;
    const weightMap = {
      bold,
      duotone,
      fill,
      light,
      regular,
      thin
    };
    return weightMap[iconWeight];
  }, [weight, contextWeight]);
  const mirroredValue = mirrored !== null && mirrored !== void 0 ? mirrored : contextMirrored;
  return /*#__PURE__*/React.createElement(IconComponent, {
    color: color !== null && color !== void 0 ? color : contextColor,
    size: size !== null && size !== void 0 ? size : contextSize,
    style: [contextStyle, style, { ...(mirroredValue && {
        transform: [{
          scaleX: -1
        }]
      })
    }]
  });
}

export default GoogleChromeLogo;
//# sourceMappingURL=GoogleChromeLogo.js.map