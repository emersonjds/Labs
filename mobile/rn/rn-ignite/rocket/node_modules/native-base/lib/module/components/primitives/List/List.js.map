{"version":3,"sources":["List.tsx"],"names":["React","memo","forwardRef","VStack","usePropsResolution","useHasResponsiveProps","List","children","divider","props","ref","_text","_hover","_focus","_pressed","resolvedProps","Children","map","child","ind","cloneElement","index"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,IAAhB,EAAsBC,UAAtB,QAAwC,OAAxC;AACA,SAASC,MAAT,QAAuB,UAAvB;AAEA,SAASC,kBAAT,QAAmC,8BAAnC;AACA,SAASC,qBAAT,QAAsC,sCAAtC;;AAEA,MAAMC,IAAI,GAAG,CAAC;AAAEC,EAAAA,QAAF;AAAYC,EAAAA,OAAZ;AAAqB,KAAGC;AAAxB,CAAD,EAA8CC,GAA9C,KAA4D;AACvE,QAAM;AACJC,IAAAA,KADI;AAEJC,IAAAA,MAFI;AAGJC,IAAAA,MAHI;AAIJC,IAAAA,QAJI;AAKJ,OAAGC;AALC,MAMFX,kBAAkB,CAAC,MAAD,EAASK,KAAT,CANtB,CADuE,CAQvE;;AACA,MAAIJ,qBAAqB,CAACI,KAAD,CAAzB,EAAkC;AAChC,WAAO,IAAP;AACD,GAXsE,CAYvE;;;AACAF,EAAAA,QAAQ,GAAGP,KAAK,CAACgB,QAAN,CAAeC,GAAf,CAAmBV,QAAnB,EAA6B,CAACW,KAAD,EAAaC,GAAb,KAA6B;AAAA;;AACnE,wBAAOnB,KAAK,CAACoB,YAAN,CAAmBF,KAAnB,EAA0B;AAC/BG,MAAAA,KAAK,EAAEF,GADwB;AAE/BR,MAAAA,KAAK,EAAE,EAAE,GAAGA,KAAL;AAAY,4BAAGO,KAAK,CAACT,KAAT,iDAAG,aAAaE,KAAhB;AAAZ,OAFwB;AAG/BC,MAAAA,MAAM,EAAE,EAAE,GAAGA,MAAL;AAAa,6BAAGM,KAAK,CAACT,KAAT,kDAAG,cAAaG,MAAhB;AAAb,OAHuB;AAI/BC,MAAAA,MAAM,EAAE,EAAE,GAAGA,MAAL;AAAa,6BAAGK,KAAK,CAACT,KAAT,kDAAG,cAAaI,MAAhB;AAAb,OAJuB;AAK/BC,MAAAA,QAAQ,EAAE,EAAE,GAAGA,QAAL;AAAe,6BAAGI,KAAK,CAACT,KAAT,kDAAG,cAAaK,QAAhB;AAAf;AALqB,KAA1B,CAAP;AAOD,GARU,CAAX;AAUA,sBACE,oBAAC,MAAD;AAAQ,IAAA,OAAO,EAAEN,OAAjB;AAA0B,IAAA,GAAG,EAAEE;AAA/B,KAAwCK,aAAxC,GACGR,QADH,CADF;AAKD,CA5BD;;AA+BA,4BAAeN,IAAI,eAACC,UAAU,CAACI,IAAD,CAAX,CAAnB","sourcesContent":["import React, { memo, forwardRef } from 'react';\nimport { VStack } from '../Stack';\nimport type { IListProps, IListItemProps } from './types';\nimport { usePropsResolution } from '../../../hooks/useThemeProps';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\n\nconst List = ({ children, divider, ...props }: IListProps, ref?: any) => {\n  const {\n    _text,\n    _hover,\n    _focus,\n    _pressed,\n    ...resolvedProps\n  } = usePropsResolution('List', props);\n  //TODO: refactor for responsive prop\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n  // add props to children\n  children = React.Children.map(children, (child: any, ind: number) => {\n    return React.cloneElement(child, {\n      index: ind,\n      _text: { ..._text, ...child.props?._text },\n      _hover: { ..._hover, ...child.props?._hover },\n      _focus: { ..._focus, ...child.props?._focus },\n      _pressed: { ..._pressed, ...child.props?._pressed },\n    });\n  });\n\n  return (\n    <VStack divider={divider} ref={ref} {...resolvedProps}>\n      {children}\n    </VStack>\n  );\n};\n\nexport type { IListProps, IListItemProps };\nexport default memo(forwardRef(List));\n"]}