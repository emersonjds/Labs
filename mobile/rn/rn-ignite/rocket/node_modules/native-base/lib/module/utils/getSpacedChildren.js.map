{"version":3,"sources":["getSpacedChildren.tsx"],"names":["React","default","Box","ResponsiveQueryContext","flattenChildren","children","keys","childrenArray","Children","toArray","reduce","flatChildren","child","index","type","Fragment","concat","props","key","isValidElement","push","cloneElement","String","join","getSpacedChildren","space","axis","reverse","divider","orientation","responsiveQueryContext","useContext","disableCSSMediaQueries","spacingProp","mx","my","map","length","width","height"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { default as Box } from '../components/primitives/Box';\nimport type { SpaceType as ThemeSpaceType } from '../components/types';\nimport { ResponsiveQueryContext } from './useResponsiveQuery/ResponsiveQueryProvider';\n\ntype SpaceType =\n  | 'gutter'\n  | '2xs'\n  | 'xs'\n  | 'sm'\n  | 'md'\n  | 'lg'\n  | 'xl'\n  | '2xl'\n  | ThemeSpaceType;\n\n// Thanks @gregberge for code and @nandorojo for suggestion.\n// Original source: https://github.com/gregberge/react-flatten-children\ntype ReactChildArray = ReturnType<typeof React.Children.toArray>;\nfunction flattenChildren(\n  children: JSX.Element[] | JSX.Element,\n  keys: (string | number)[] = []\n): ReactChildArray {\n  const childrenArray = React.Children.toArray(children);\n  return childrenArray.reduce(\n    (flatChildren: ReactChildArray, child: any, index: number) => {\n      if ((child as React.ReactElement<any>).type === React.Fragment) {\n        return flatChildren.concat(\n          flattenChildren(\n            (child as React.ReactElement<any>).props.children,\n            keys.concat(child.key || index)\n          )\n        );\n      }\n      if (React.isValidElement(child)) {\n        flatChildren.push(\n          React.cloneElement(child, {\n            key: keys.concat(String(child.key || index)).join('.'),\n          })\n        );\n      } else {\n        flatChildren.push(child);\n      }\n      return flatChildren;\n    },\n    []\n  );\n}\n\nconst getSpacedChildren = (\n  children: JSX.Element[] | JSX.Element,\n  space: undefined | SpaceType,\n  axis: 'X' | 'Y',\n  reverse: string,\n  divider: JSX.Element | undefined\n): any => {\n  let childrenArray = React.Children.toArray(flattenChildren(children));\n  childrenArray =\n    reverse === 'reverse' ? [...childrenArray].reverse() : childrenArray;\n\n  const orientation = axis === 'X' ? 'vertical' : 'horizontal';\n\n  // eslint-disable-next-line react-hooks/rules-of-hooks\n  const responsiveQueryContext = React.useContext(ResponsiveQueryContext);\n  const disableCSSMediaQueries = responsiveQueryContext.disableCSSMediaQueries;\n\n  // If there's a divider, we wrap it with a Box and apply vertical and horizontal margins else we add a spacer Box with height or width\n  if (divider) {\n    const spacingProp: object = {\n      ...(axis === 'X' ? { mx: space } : { my: space }),\n    };\n\n    divider = React.cloneElement(divider, {\n      orientation,\n      ...spacingProp,\n    });\n\n    childrenArray = childrenArray.map((child: any, index: number) => {\n      return (\n        <React.Fragment key={child.key ?? `spaced-child-${index}`}>\n          {child}\n          {index < childrenArray.length - 1 && divider}\n        </React.Fragment>\n      );\n    });\n  } else {\n    const spacingProp: object = {\n      ...(axis === 'X' ? { width: space } : { height: space }),\n    };\n    childrenArray = childrenArray.map((child: any, index: number) => {\n      return (\n        <React.Fragment key={child.key ?? `spaced-child-${index}`}>\n          {child}\n          {disableCSSMediaQueries ? (\n            index < childrenArray.length - 1 && <Box {...spacingProp} />\n          ) : (\n            <></>\n          )}\n        </React.Fragment>\n      );\n    });\n  }\n\n  return childrenArray;\n};\n\nexport default getSpacedChildren;\n"]}