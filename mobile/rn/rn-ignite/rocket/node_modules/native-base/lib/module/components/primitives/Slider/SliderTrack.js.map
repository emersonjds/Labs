{"version":3,"sources":["SliderTrack.tsx"],"names":["React","usePropsResolution","Pressable","Box","SliderContext","useHasResponsiveProps","SliderTrack","children","props","ref","orientation","trackProps","onTrackLayout","colorScheme","sliderSize","isReadOnly","isDisabled","useContext","isVertical","_pressable","resolvedProps","size","forwardRef"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,kBAAT,QAAmC,8BAAnC;AACA,SAASC,SAAT,QAA0B,cAA1B;AACA,OAAOC,GAAP,MAAgB,QAAhB;AACA,SAASC,aAAT,QAA8B,WAA9B;AACA,SAASC,qBAAT,QAAsC,sCAAtC;;AAGA,MAAMC,WAAW,GAAG,CAAC;AAAEC,EAAAA,QAAF;AAAY,KAAGC;AAAf,CAAD,EAA4CC,GAA5C,KAA0D;AAC5E,QAAM;AACJC,IAAAA,WADI;AAEJC,IAAAA,UAFI;AAGJC,IAAAA,aAHI;AAIJC,IAAAA,WAJI;AAKJC,IAAAA,UALI;AAMJC,IAAAA,UANI;AAOJC,IAAAA;AAPI,MAQFhB,KAAK,CAACiB,UAAN,CAAiBb,aAAjB,CARJ;AAUA,QAAMc,UAAU,GAAGR,WAAW,KAAK,UAAnC;AAEA,QAAM;AAAES,IAAAA,UAAF;AAAc,OAAGC;AAAjB,MAAmCnB,kBAAkB,CACzD,aADyD,EAEzD;AACEoB,IAAAA,IAAI,EAAEP,UADR;AAEED,IAAAA,WAFF;AAGEK,IAAAA,UAHF;AAIE,OAAGV;AAJL,GAFyD,EAQzD;AAAEO,IAAAA,UAAF;AAAcC,IAAAA;AAAd,GARyD,CAA3D,CAb4E,CAwB5E;;AACA,MAAIX,qBAAqB,CAACG,KAAD,CAAzB,EAAkC;AAChC,WAAO,IAAP;AACD;;AAED,sBACE,oBAAC,SAAD;AACE,IAAA,QAAQ,EAAEI,aADZ;AAEE,IAAA,GAAG,EAAEH;AAFP,KAGME,UAHN,EAIMQ,UAJN,gBAME,oBAAC,GAAD,EAASC,aAAT,EAAyBb,QAAzB,CANF,CADF;AAUD,CAvCD;;AAyCA,4BAAeP,KAAK,CAACsB,UAAN,CAAiBhB,WAAjB,CAAf","sourcesContent":["import React from 'react';\nimport { usePropsResolution } from '../../../hooks/useThemeProps';\nimport { Pressable } from '../Pressable';\nimport Box from '../Box';\nimport { SliderContext } from './Context';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\nimport type { ISliderTrackProps } from './types';\n\nconst SliderTrack = ({ children, ...props }: ISliderTrackProps, ref?: any) => {\n  const {\n    orientation,\n    trackProps,\n    onTrackLayout,\n    colorScheme,\n    sliderSize,\n    isReadOnly,\n    isDisabled,\n  } = React.useContext(SliderContext);\n\n  const isVertical = orientation === 'vertical';\n\n  const { _pressable, ...resolvedProps } = usePropsResolution(\n    'SliderTrack',\n    {\n      size: sliderSize,\n      colorScheme,\n      isVertical,\n      ...props,\n    },\n    { isReadOnly, isDisabled }\n  );\n\n  //TODO: refactor for responsive prop\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n\n  return (\n    <Pressable\n      onLayout={onTrackLayout}\n      ref={ref}\n      {...trackProps}\n      {..._pressable}\n    >\n      <Box {...resolvedProps}>{children}</Box>\n    </Pressable>\n  );\n};\n\nexport default React.forwardRef(SliderTrack);\n"]}