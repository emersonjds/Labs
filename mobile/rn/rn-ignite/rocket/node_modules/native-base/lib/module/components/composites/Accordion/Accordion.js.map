{"version":3,"sources":["Accordion.tsx"],"names":["React","Box","useThemeProps","getIndexedChildren","AccordionContext","useHasResponsiveProps","Accordion","children","index","pIndex","defaultIndex","allowMultiple","allowToggle","onChange","props","ref","endingHeight","startingHeight","duration","isOpen","onAnimationEnd","onAnimationStart","newProps","setIndex","useState","changeHandler","isOpening","activeIndex","indexCopy","map","i","push","splice","indexOf","filter","n","AnimationProps","memo","forwardRef"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,GAAP,MAAgB,sBAAhB;AAEA,SAASC,aAAT,QAA8B,gBAA9B;AACA,OAAOC,kBAAP,MAA+B,mCAA/B;AACA,SAASC,gBAAT,QAAiC,WAAjC;AACA,SAASC,qBAAT,QAAsC,sCAAtC;;AAEA,MAAMC,SAAS,GAAG,CAChB;AACEC,EAAAA,QADF;AAEEC,EAAAA,KAAK,EAAEC,MAFT;AAGEC,EAAAA,YAHF;AAIEC,EAAAA,aAJF;AAKEC,EAAAA,WALF;AAMEC,EAAAA,QANF;AAOE,KAAGC;AAPL,CADgB,EAUhBC,GAVgB,KAWb;AACH,QAAM;AACJC,IAAAA,YADI;AAEJC,IAAAA,cAFI;AAGJC,IAAAA,QAHI;AAIJC,IAAAA,MAJI;AAKJC,IAAAA,cALI;AAMJC,IAAAA,gBANI;AAOJ,OAAGC;AAPC,MAQFpB,aAAa,CAAC,WAAD,EAAcY,KAAd,CARjB;AAUA,QAAM,CAACN,KAAD,EAAQe,QAAR,IAAoBvB,KAAK,CAACwB,QAAN,CAAef,MAAM,IAAIC,YAAV,IAA0B,EAAzC,CAA1B,CAXG,CAYH;;AACA,MAAIL,qBAAqB,CAACS,KAAD,CAAzB,EAAkC;AAChC,WAAO,IAAP;AACD;;AACD,QAAMW,aAAa,GAAG,CAACC,SAAD,EAAqBC,WAArB,KAA6C;AACjE,QAAIC,SAAS,GAAGpB,KAAK,CAACqB,GAAN,CAAWC,CAAD,IAAeA,CAAzB,CAAhB;;AACA,QAAIlB,WAAJ,EAAiB;AACf,UAAIc,SAAJ,EAAe;AACbE,QAAAA,SAAS,CAACG,IAAV,CAAeJ,WAAf;AACAhB,QAAAA,aAAa,GAAGY,QAAQ,CAACK,SAAD,CAAX,GAAyBL,QAAQ,CAAC,CAACI,WAAD,CAAD,CAA9C;AACD,OAHD,MAGO;AACLJ,QAAAA,QAAQ,CAACf,KAAK,CAACwB,MAAN,CAAaxB,KAAK,CAACyB,OAAN,CAAcN,WAAd,CAAb,EAAyC,CAAzC,CAAD,CAAR;AACD;AACF,KAPD,MAOO;AACL,UAAID,SAAJ,EAAe;AACbE,QAAAA,SAAS,CAACG,IAAV,CAAeJ,WAAf;AACAhB,QAAAA,aAAa,GAAGY,QAAQ,CAACK,SAAD,CAAX,GAAyBL,QAAQ,CAAC,CAACI,WAAD,CAAD,CAA9C;AACD,OAHD,MAGO;AACLC,QAAAA,SAAS,GAAGA,SAAS,CAACM,MAAV,CAAkBC,CAAD,IAAYA,CAAC,KAAKR,WAAnC,CAAZ;AACAJ,QAAAA,QAAQ,CAACK,SAAD,CAAR;AACD;AACF;;AACDf,IAAAA,QAAQ,IAAIA,QAAQ,CAACe,SAAD,CAApB;AACD,GAnBD;;AAoBA,sBACE,oBAAC,gBAAD,CAAkB,QAAlB;AACE,IAAA,KAAK,EAAE;AACLpB,MAAAA,KAAK,EAAEA,KADF;AAELiB,MAAAA,aAFK;AAGLW,MAAAA,cAAc,EAAE;AACdpB,QAAAA,YADc;AAEdC,QAAAA,cAFc;AAGdC,QAAAA,QAHc;AAIdC,QAAAA,MAJc;AAKdC,QAAAA,cALc;AAMdC,QAAAA;AANc;AAHX;AADT,kBAcE,oBAAC,GAAD;AAAK,IAAA,QAAQ,EAAC;AAAd,KAA2BC,QAA3B;AAAqC,IAAA,GAAG,EAAEP;AAA1C,MACGZ,kBAAkB,CAACI,QAAD,CADrB,CAdF,CADF;AAoBD,CAnED;;AAqEA,4BAAeP,KAAK,CAACqC,IAAN,eAAWrC,KAAK,CAACsC,UAAN,CAAiBhC,SAAjB,CAAX,CAAf","sourcesContent":["import React from 'react';\nimport Box from '../../primitives/Box';\nimport type { IAccordionProps } from './types';\nimport { useThemeProps } from '../../../hooks';\nimport getIndexedChildren from '../../../utils/getIndexedChildren';\nimport { AccordionContext } from './Context';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\n\nconst Accordion = (\n  {\n    children,\n    index: pIndex,\n    defaultIndex,\n    allowMultiple,\n    allowToggle,\n    onChange,\n    ...props\n  }: IAccordionProps,\n  ref: any\n) => {\n  const {\n    endingHeight,\n    startingHeight,\n    duration,\n    isOpen,\n    onAnimationEnd,\n    onAnimationStart,\n    ...newProps\n  } = useThemeProps('Accordion', props);\n\n  const [index, setIndex] = React.useState(pIndex || defaultIndex || []);\n  //TODO: refactor for responsive prop\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n  const changeHandler = (isOpening: boolean, activeIndex: number) => {\n    let indexCopy = index.map((i: number) => i);\n    if (allowToggle) {\n      if (isOpening) {\n        indexCopy.push(activeIndex);\n        allowMultiple ? setIndex(indexCopy) : setIndex([activeIndex]);\n      } else {\n        setIndex(index.splice(index.indexOf(activeIndex), 1));\n      }\n    } else {\n      if (isOpening) {\n        indexCopy.push(activeIndex);\n        allowMultiple ? setIndex(indexCopy) : setIndex([activeIndex]);\n      } else {\n        indexCopy = indexCopy.filter((n: any) => n !== activeIndex);\n        setIndex(indexCopy);\n      }\n    }\n    onChange && onChange(indexCopy);\n  };\n  return (\n    <AccordionContext.Provider\n      value={{\n        index: index,\n        changeHandler,\n        AnimationProps: {\n          endingHeight,\n          startingHeight,\n          duration,\n          isOpen,\n          onAnimationEnd,\n          onAnimationStart,\n        },\n      }}\n    >\n      <Box overflow=\"hidden\" {...newProps} ref={ref}>\n        {getIndexedChildren(children)}\n      </Box>\n    </AccordionContext.Provider>\n  );\n};\n\nexport default React.memo(React.forwardRef(Accordion));\n"]}