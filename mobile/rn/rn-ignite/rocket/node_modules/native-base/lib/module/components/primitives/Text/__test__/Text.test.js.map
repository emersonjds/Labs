{"version":3,"sources":["Text.test.tsx"],"names":["React","render","Text","NativeBaseProvider","theme","defaultTheme","Platform","jest","useFakeTimers","fontConfig","Roboto","normal","italic","fonts","heading","body","Provider","props","frame","x","y","width","height","insets","top","left","right","bottom","describe","it","getByTestId","text","expect","style","fontFamily","toBe","newTheme","JSON","parse","stringify","undefined","fontWeight","fontStyle","lineHeight","fontSizes","sm","parseFloat","lineHeights","md","letterSpacing","letterSpacings","OS","e","message","toContain"],"mappings":"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","sourcesContent":["/** * @jest-environment jsdom */\n//@ts-nocheck\nimport React from 'react';\nimport { render } from '@testing-library/react-native';\nimport Text from '../../Text';\nimport { NativeBaseProvider } from '../../../../core/NativeBaseProvider';\nimport { theme as defaultTheme } from '../../../../theme';\nimport { Platform } from 'react-native';\n\njest.useFakeTimers();\n\nconst theme = {\n  ...defaultTheme,\n  fontConfig: {\n    Roboto: {\n      100: 'Roboto-Light',\n      200: 'Roboto-Light',\n      300: 'Roboto-Light',\n      400: {\n        normal: 'Roboto-Regular',\n        italic: 'Roboto-Italic',\n      },\n      500: 'Roboto-Medium',\n      600: 'Roboto-Medium',\n      700: {\n        normal: 'Roboto-Bold',\n        italic: 'Roboto-BoldItalic',\n      },\n      800: 'Roboto-Bold',\n      900: 'Roboto-Black',\n    },\n  },\n  fonts: {\n    ...defaultTheme.fonts,\n    heading: 'Roboto',\n    body: 'Roboto',\n  },\n};\n\nconst Provider = (props: any) => {\n  return (\n    <NativeBaseProvider\n      theme={theme}\n      {...props}\n      initialWindowMetrics={{\n        frame: { x: 0, y: 0, width: 0, height: 0 },\n        insets: { top: 0, left: 0, right: 0, bottom: 0 },\n      }}\n    />\n  );\n};\n\ndescribe('Text component', () => {\n  it('resolves default custom fonts', () => {\n    const { getByTestId } = render(\n      <Provider>\n        <Text testID=\"my-text\">hello world</Text>\n      </Provider>\n    );\n    const text = getByTestId('my-text');\n    expect(text.props.style.fontFamily).toBe('Roboto-Regular');\n  });\n\n  it('resolves custom font variants', () => {\n    const { getByTestId } = render(\n      <Provider>\n        <Text testID=\"my-text\" fontStyle=\"italic\">\n          hello world\n        </Text>\n      </Provider>\n    );\n    const text = getByTestId('my-text');\n    expect(text.props.style.fontFamily).toBe('Roboto-Italic');\n  });\n\n  it('resolves to bold italic font', () => {\n    const { getByTestId } = render(\n      <Provider>\n        <Text testID=\"my-text\" fontWeight=\"bold\" fontStyle=\"italic\">\n          hello world\n        </Text>\n      </Provider>\n    );\n    const text = getByTestId('my-text');\n    expect(text.props.style.fontFamily).toBe('Roboto-BoldItalic');\n  });\n\n  it('resolves to medium font when fontWeight is 500', () => {\n    const { getByTestId } = render(\n      <Provider>\n        <Text testID=\"my-text\" fontWeight={500}>\n          hello world\n        </Text>\n      </Provider>\n    );\n    const text = getByTestId('my-text');\n    expect(text.props.style.fontFamily).toBe('Roboto-Medium');\n  });\n\n  it('resolves to medium font when fontWeight is medium', () => {\n    const { getByTestId } = render(\n      <Provider>\n        <Text testID=\"my-text\" fontWeight={'medium'}>\n          hello world\n        </Text>\n      </Provider>\n    );\n    const text = getByTestId('my-text');\n    expect(text.props.style.fontFamily).toBe('Roboto-Medium');\n  });\n\n  it('respects fontFamily property', () => {\n    const { getByTestId } = render(\n      <Provider>\n        <Text testID=\"my-text\" fontFamily=\"Merriweather-Italic\">\n          hello world\n        </Text>\n      </Provider>\n    );\n    const text = getByTestId('my-text');\n    expect(text.props.style.fontFamily).toBe('Merriweather-Italic');\n  });\n\n  it(\"doesn't break if custom font is not specified\", () => {\n    const newTheme = JSON.parse(JSON.stringify(defaultTheme));\n    delete newTheme.fontConfig;\n    const { getByTestId } = render(\n      <Provider theme={newTheme}>\n        <Text testID=\"my-text\" fontWeight={400}>\n          hello world\n        </Text>\n      </Provider>\n    );\n    const text = getByTestId('my-text');\n    expect(text.props.style.fontFamily).toBe(undefined);\n  });\n\n  it(\"doesn't pass fontWeight and fontStyle if a custom fontFamily is resolved\", () => {\n    const { getByTestId } = render(\n      <Provider>\n        <Text testID=\"my-text\" fontWeight={400}>\n          hello world\n        </Text>\n      </Provider>\n    );\n    const text = getByTestId('my-text');\n    expect(text.props.style.fontWeight).toBe(undefined);\n    expect(text.props.style.fontStyle).toBe(undefined);\n    expect(text.props.style.fontFamily).toBe('Roboto-Regular');\n  });\n\n  it('tests lineHeight from token in text ', () => {\n    const { getByTestId } = render(\n      <Provider>\n        <Text lineHeight=\"md\" testID=\"test\">\n          This is a text\n        </Text>\n      </Provider>\n    );\n    const text = getByTestId('test');\n    expect(text.props.style.lineHeight).toBe(\n      defaultTheme.fontSizes.sm * parseFloat(defaultTheme.lineHeights.md)\n    );\n  });\n\n  it('tests absolute lineHeight in text ', () => {\n    const { getByTestId } = render(\n      <Provider>\n        <Text lineHeight={5} testID=\"test\">\n          This is a text\n        </Text>\n      </Provider>\n    );\n    const text = getByTestId('test');\n    expect(text.props.style.lineHeight).toBe(5);\n  });\n\n  it('tests em non token lineHeight in text ', () => {\n    const { getByTestId } = render(\n      <Provider>\n        <Text lineHeight=\"13em\" testID=\"test\">\n          This is a text\n        </Text>\n      </Provider>\n    );\n    const text = getByTestId('test');\n    expect(text.props.style.lineHeight).toBe(defaultTheme.fontSizes.sm * 13);\n  });\n\n  it('tests letterSpacing from token in text ', () => {\n    const { getByTestId } = render(\n      <Provider>\n        <Text letterSpacing=\"2xl\" testID=\"test\">\n          This is a text\n        </Text>\n      </Provider>\n    );\n    const text = getByTestId('test');\n    expect(text.props.style.letterSpacing).toBe(\n      defaultTheme.fontSizes.sm * parseFloat(defaultTheme.letterSpacings['2xl'])\n    );\n  });\n\n  it('tests letterSpacing in em from token in text ', () => {\n    Platform.OS = 'web';\n    try {\n      render(\n        <Provider>\n          <Text letterSpacing=\"2xl\" testID=\"test\">\n            This is a text\n          </Text>\n        </Provider>\n      );\n    } catch (e) {\n      expect(e.message).toContain(`\"letterSpacing\": \"0.1em\"`);\n    } finally {\n      Platform.OS = 'ios';\n    }\n  });\n\n  it('tests lineHeight and letterSpacing in px', () => {\n    const { getByTestId } = render(\n      <Provider>\n        <Text lineHeight=\"24px\" letterSpacing=\"12px\" testID=\"test\">\n          This is a text\n        </Text>\n      </Provider>\n    );\n    const text = getByTestId('test');\n    expect(text.props.style.lineHeight).toBe(24);\n    expect(text.props.style.letterSpacing).toBe(12);\n  });\n});\n"]}