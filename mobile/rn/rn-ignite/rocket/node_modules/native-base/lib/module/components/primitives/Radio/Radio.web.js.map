{"version":3,"sources":["Radio.web.tsx"],"names":["React","memo","forwardRef","Box","Stack","Center","usePropsResolution","wrapStringChild","mergeRefs","useHover","useRadio","VisuallyHidden","RadioContext","useFocusRing","CircleIcon","useHasResponsiveProps","combineContextAndProps","isEmptyObj","useFormControlContext","RadioComponent","icon","inputProps","combinedProps","children","wrapperRef","isHovered","isHoveredProp","isFocusVisible","isFocusVisibleProp","props","ref","isInvalid","isReadOnly","isIndeterminate","disabled","isDisabled","checked","isChecked","_ref","useRef","mergedRefs","focusProps","_interactionBox","_icon","_stack","_text","resolvedProps","sizedIcon","cloneElement","component","Radio","formControlContext","contextState","useContext","inputRef","radioState","accessibilityLabel","state","useMemo","contextCombinedProps","useState","console","error"],"mappings":"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","sourcesContent":["import React, { memo, forwardRef } from 'react';\nimport Box from '../Box';\nimport { Stack } from '../Stack';\nimport { Center } from '../../composites/Center';\nimport { usePropsResolution } from '../../../hooks/useThemeProps';\nimport { wrapStringChild } from '../../../utils/wrapStringChild';\nimport type { IRadioProps } from './types';\nimport { mergeRefs } from './../../../utils';\nimport { useHover } from '@react-native-aria/interactions';\nimport { useRadio } from '@react-native-aria/radio';\nimport { VisuallyHidden } from '@react-aria/visually-hidden';\nimport { RadioContext } from './RadioGroup';\nimport { useFocusRing } from '@react-native-aria/focus';\nimport { CircleIcon } from '../Icon/Icons';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\nimport { combineContextAndProps, isEmptyObj } from '../../../utils';\nimport { useFormControlContext } from '../../composites/FormControl';\n\nconst RadioComponent = memo(\n  forwardRef(\n    (\n      {\n        icon,\n        inputProps,\n        combinedProps,\n        children,\n        wrapperRef,\n        isHovered: isHoveredProp,\n        isFocusVisible: isFocusVisibleProp,\n        ...props\n      }: any,\n      ref: any\n    ) => {\n      const { isInvalid, isReadOnly, isIndeterminate } = combinedProps;\n      const { disabled: isDisabled, checked: isChecked } = inputProps;\n      const _ref = React.useRef(null);\n      const { isHovered } = useHover({}, _ref);\n      const mergedRefs = mergeRefs([_ref, wrapperRef]);\n      const { focusProps, isFocusVisible } = useFocusRing();\n\n      const {\n        _interactionBox,\n        _icon,\n        _stack,\n        _text,\n        ...resolvedProps\n      } = usePropsResolution('Radio', combinedProps, {\n        isInvalid,\n        isReadOnly,\n        isFocusVisible: isFocusVisibleProp || isFocusVisible,\n        isDisabled,\n        isIndeterminate,\n        isChecked,\n        isHovered: isHoveredProp || isHovered,\n      });\n\n      // only calling below function when icon exist.\n      const sizedIcon = () =>\n        //@ts-ignore\n        React.cloneElement(icon, {\n          ..._icon,\n        });\n\n      const component = (\n        <Stack {..._stack}>\n          <Center>\n            {/* Interaction Box */}\n            <Box {..._interactionBox} />\n            {/* Radio */}\n            <Center {...resolvedProps}>\n              {icon && sizedIcon && isChecked ? (\n                sizedIcon()\n              ) : (\n                <CircleIcon {..._icon} opacity={isChecked ? 1 : 0} />\n              )}\n            </Center>\n          </Center>\n          {wrapStringChild(children, _text)}\n        </Stack>\n      );\n      //TODO: refactor for responsive prop\n      if (useHasResponsiveProps(props)) {\n        return null;\n      }\n\n      return (\n        <Box\n          // @ts-ignore - RN web supports accessibilityRole=\"label\"\n          accessibilityRole=\"label\"\n          ref={mergedRefs}\n        >\n          <VisuallyHidden>\n            <input {...inputProps} {...focusProps} ref={ref} />\n          </VisuallyHidden>\n          {component}\n        </Box>\n      );\n    }\n  )\n);\n\nconst Radio = (\n  {\n    icon,\n    children,\n    wrapperRef,\n    isHovered: isHoveredProp,\n    isFocusVisible: isFocusVisibleProp,\n    ...props\n  }: IRadioProps,\n  ref: any\n) => {\n  const formControlContext = useFormControlContext();\n  const contextState = React.useContext(RadioContext);\n\n  const combinedProps = combineContextAndProps(\n    { ...formControlContext, ...contextState },\n    props\n  );\n\n  const inputRef = React.useRef(null);\n  const radioState = useRadio(\n    { ...combinedProps, 'aria-label': props.accessibilityLabel, children },\n    contextState.state ?? {},\n    inputRef\n  );\n\n  //@ts-ignore\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  const inputProps = React.useMemo(() => radioState.inputProps, [\n    radioState.inputProps.checked,\n    radioState.inputProps.disabled,\n  ]);\n\n  const [contextCombinedProps] = React.useState({\n    ...combinedProps,\n  });\n\n  //TODO: refactor for responsive prop\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n  if (isEmptyObj(contextState)) {\n    console.error('Error: Radio must be wrapped inside a Radio.Group');\n    return <></>;\n  }\n\n  return (\n    <RadioComponent\n      inputProps={inputProps}\n      combinedProps={contextCombinedProps}\n      children={children}\n      ref={ref}\n      icon={icon}\n      wrapperRef={wrapperRef}\n      isHovered={isHoveredProp}\n      isFocusVisible={isFocusVisibleProp}\n    />\n  );\n};\n\nexport default memo(forwardRef(Radio));\n"]}