{"version":3,"sources":["Icon.tsx"],"names":["React","memo","forwardRef","useToken","usePropsResolution","SVGIcon","Factory","useHasResponsiveProps","Icon","props","ref","as","size","resolvedProps","tokenizedFontSize","isJSX","isValidElement","StyledAs","cloneElement"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,IAAhB,EAAsBC,UAAtB,QAAwC,OAAxC;AACA,SAASC,QAAT,EAAmBC,kBAAnB,QAA6C,gBAA7C;AAEA,OAAOC,OAAP,MAAoB,WAApB;AACA,SAASC,OAAT,QAAwB,kBAAxB;AACA,SAASC,qBAAT,QAAsC,sCAAtC;;AAEA,MAAMC,IAAI,GAAG,CAACC,KAAD,EAAoBC,GAApB,KAAkC;AAC7C,QAAM;AAAEC,IAAAA,EAAF;AAAMC,IAAAA,IAAN;AAAY,OAAGC;AAAf,MAAiCT,kBAAkB,CAAC,MAAD,EAASK,KAAT,CAAzD;AACA,QAAMK,iBAAiB,GAAGX,QAAQ,CAAC,OAAD,EAAUS,IAAV,CAAlC,CAF6C,CAG7C;;AACA,MAAIL,qBAAqB,CAACE,KAAD,CAAzB,EAAkC;AAChC,WAAO,IAAP;AACD;;AACD,MAAI,CAACE,EAAL,EAAS;AACP,wBAAO,oBAAC,OAAD;AAAS,MAAA,IAAI,EAAEC;AAAf,OAAyBC,aAAzB;AAAwC,MAAA,GAAG,EAAEH;AAA7C,OAAP;AACD;;AACD,QAAMK,KAAK,gBAAGf,KAAK,CAACgB,cAAN,CAAqBL,EAArB,CAAd;AACA,QAAMM,QAAQ,GAAGX,OAAO,CACtBS,KAAK,GACAF,aAAD,iBACEb,KAAK,CAACkB,YAAN,CAAmBP,EAAnB,EAAuB,EACrB,GAAGE,aADkB;AAErB;AACA,OAAGF,EAAE,CAACF;AAHe,GAAvB,CAFD,GAODE,EARkB,CAAxB;AAWA,sBACE,oBAAC,QAAD,eACME,aADN;AAEE,IAAA,QAAQ,EAAEC,iBAFZ;AAGE,IAAA,UAAU,EAAEA,iBAHd;AAIE,IAAA,IAAI,EAAEF,IAJR;AAKE,IAAA,GAAG,EAAEF;AALP,KADF;AASD,CA/BD;;AAiCA,4BAAeT,IAAI,eAACC,UAAU,CAACM,IAAD,CAAX,CAAnB","sourcesContent":["import React, { memo, forwardRef } from 'react';\nimport { useToken, usePropsResolution } from '../../../hooks';\nimport type { IIconProps } from './types';\nimport SVGIcon from './SVGIcon';\nimport { Factory } from '../../../factory';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\n\nconst Icon = (props: IIconProps, ref?: any) => {\n  const { as, size, ...resolvedProps } = usePropsResolution('Icon', props);\n  const tokenizedFontSize = useToken('space', size);\n  //TODO: refactor for responsive prop\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n  if (!as) {\n    return <SVGIcon size={size} {...resolvedProps} ref={ref} />;\n  }\n  const isJSX = React.isValidElement(as);\n  const StyledAs = Factory(\n    isJSX\n      ? (resolvedProps) =>\n          React.cloneElement(as, {\n            ...resolvedProps,\n            //@ts-ignore\n            ...as.props,\n          })\n      : as\n  );\n\n  return (\n    <StyledAs\n      {...resolvedProps}\n      fontSize={tokenizedFontSize}\n      lineHeight={tokenizedFontSize}\n      size={size}\n      ref={ref}\n    />\n  );\n};\n\nexport default memo(forwardRef(Icon));\n"]}