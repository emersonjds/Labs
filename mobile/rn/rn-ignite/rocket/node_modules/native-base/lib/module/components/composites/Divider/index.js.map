{"version":3,"sources":["index.tsx"],"names":["React","memo","forwardRef","Platform","usePropsResolution","Box","useHasResponsiveProps","Divider","props","ref","orientation","resolvedProps","resolveResponsively","OS","undefined"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,IAAhB,EAAsBC,UAAtB,QAAwC,OAAxC;AACA,SAASC,QAAT,QAAyB,cAAzB;AACA,SAASC,kBAAT,QAAmC,8BAAnC;AACA,OAAOC,GAAP,MAAgB,wBAAhB;AAEA,SAASC,qBAAT,QAAsC,sCAAtC;;AAEA,MAAMC,OAAO,GAAG,CAACC,KAAD,EAAuBC,GAAvB,KAAqC;AACnD,QAAM;AAAEC,IAAAA,WAAF;AAAe,OAAGC;AAAlB,MAAoCP,kBAAkB,CAC1D,SAD0D,EAE1DI,KAF0D,EAG1D,EAH0D,EAI1D;AAAEI,IAAAA,mBAAmB,EAAE,CAAC,WAAD;AAAvB,GAJ0D,CAA5D,CADmD,CAOnD;;AACA,MAAIN,qBAAqB,CAACE,KAAD,CAAzB,EAAkC;AAChC,WAAO,IAAP;AACD;;AACD,sBACE,oBAAC,GAAD,eACMG,aADN;AAEE,IAAA,GAAG,EAAEF,GAFP;AAGE,wBAAkBC,WAHpB,CAIE;AAJF;AAKE,IAAA,iBAAiB,EAAEP,QAAQ,CAACU,EAAT,KAAgB,KAAhB,GAAwB,WAAxB,GAAsCC;AAL3D,KADF;AASD,CApBD;;AAsBA,4BAAeb,IAAI,eAACC,UAAU,CAACK,OAAD,CAAX,CAAnB","sourcesContent":["import React, { memo, forwardRef } from 'react';\nimport { Platform } from 'react-native';\nimport { usePropsResolution } from '../../../hooks/useThemeProps';\nimport Box from './../../primitives/Box';\nimport type { IDividerProps } from './types';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\n\nconst Divider = (props: IDividerProps, ref?: any) => {\n  const { orientation, ...resolvedProps } = usePropsResolution(\n    'Divider',\n    props,\n    {},\n    { resolveResponsively: ['thickness'] }\n  );\n  //TODO: refactor for responsive prop\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n  return (\n    <Box\n      {...resolvedProps}\n      ref={ref}\n      aria-orientation={orientation}\n      //@ts-ignore web only role\n      accessibilityRole={Platform.OS === 'web' ? 'separator' : undefined}\n    />\n  );\n};\n\nexport default memo(forwardRef(Divider));\n"]}