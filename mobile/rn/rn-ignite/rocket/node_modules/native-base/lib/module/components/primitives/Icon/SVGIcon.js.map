{"version":3,"sources":["SVGIcon.tsx"],"names":["React","memo","forwardRef","useToken","usePropsResolution","makeStyledComponent","Svg","G","questionOutlineIconPath","useHasResponsiveProps","SVG","SVGIcon","children","props","ref","focusable","stroke","color","size","resolvedProps","strokeHex","colorHex","Children","count","map","child","i","key","ChildPath","element","fill","pathStroke","pathStrokeColor","fillColor","cloneElement"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,IAAhB,EAAsBC,UAAtB,QAAwC,OAAxC;AACA,SAASC,QAAT,EAAmBC,kBAAnB,QAA6C,gBAA7C;AACA,SAASC,mBAAT,QAAoC,uBAApC;AACA,SAASC,GAAT,EAAcC,CAAd,QAAuB,SAAvB;AAEA,SAASC,uBAAT,QAAwC,0BAAxC;AACA,SAASC,qBAAT,QAAsC,sCAAtC;AAEA,MAAMC,GAAG,GAAGL,mBAAmB,CAACC,GAAD,CAA/B;;AAEA,MAAMK,OAAO,GAAG,CAAC;AAAEC,EAAAA,QAAF;AAAY,KAAGC;AAAf,CAAD,EAAqCC,GAArC,KAAkD;AAChE,QAAM;AACJC,IAAAA,SADI;AAEJC,IAAAA,MAFI;AAGJC,IAAAA,KAHI;AAIJC,IAAAA,IAJI;AAKJ,OAAGC;AALC,MAMFf,kBAAkB,CAAC,MAAD,EAASS,KAAT,CANtB;AAOA,QAAMO,SAAS,GAAGjB,QAAQ,CAAC,QAAD,EAAWa,MAAM,IAAI,EAArB,CAA1B;AACA,QAAMK,QAAQ,GAAGlB,QAAQ,CAAC,QAAD,EAAWc,KAAK,IAAI,EAApB,CAAzB,CATgE,CAUhE;;AACA,MAAIR,qBAAqB,CAACI,KAAD,CAAzB,EAAkC;AAChC,WAAO,IAAP;AACD;;AACD,sBACE,oBAAC,GAAD,eACMM,aADN;AAEE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAA,IAAI,EAAED,IAZR;AAaE,IAAA,KAAK,EAAEG,QAbT;AAcE,IAAA,MAAM,EAAED,SAdV;AAeE,IAAA,SAAS,EAAEL,SAfb;AAgBE,IAAA,iBAAiB,EAAC,OAhBpB,CAiBE;AAjBF;AAkBE,IAAA,GAAG,EAAED;AAlBP,MAoBGd,KAAK,CAACsB,QAAN,CAAeC,KAAf,CAAqBX,QAArB,IAAiC,CAAjC,gBACC,oBAAC,CAAD,QACGZ,KAAK,CAACsB,QAAN,CAAeE,GAAf,CAAmBZ,QAAnB,EAA6B,CAACa,KAAD,EAAQC,CAAR;AAAA;;AAAA,wBAC5B,oBAAC,SAAD;AACE,MAAA,GAAG,gBAAED,KAAF,aAAEA,KAAF,uBAAEA,KAAK,CAAEE,GAAT,mDAAgBD,CADrB;AAEE,MAAA,OAAO,EAAED;AAFX,OAGMA,KAHN,aAGMA,KAHN,uBAGMA,KAAK,CAAEZ,KAHb,EAD4B;AAAA,GAA7B,CADH,CADD,GAWCL,uBA/BJ,CADF;AAoCD,CAlDD;;AAmDA,MAAMoB,SAAS,GAAG,CAAC;AAAEC,EAAAA,OAAF;AAAWC,EAAAA,IAAX;AAAiBd,EAAAA,MAAM,EAAEe;AAAzB,CAAD,KAAgD;AAChE,QAAMC,eAAe,GAAG7B,QAAQ,CAAC,QAAD,EAAW4B,UAAU,IAAI,EAAzB,CAAhC;AACA,QAAME,SAAS,GAAG9B,QAAQ,CAAC,QAAD,EAAW2B,IAAI,IAAI,EAAnB,CAA1B;;AAEA,MAAI,CAACD,OAAL,EAAc;AACZ,WAAO,IAAP;AACD;;AAED,sBAAO7B,KAAK,CAACkC,YAAN,CAAmBL,OAAnB,EAA4B;AACjCC,IAAAA,IAAI,EAAEG,SAAS,GAAGA,SAAH,GAAe,cADG;AAEjCjB,IAAAA,MAAM,EAAEgB;AAFyB,GAA5B,CAAP;AAID,CAZD;;AAaA,4BAAe/B,IAAI,eAACC,UAAU,CAACS,OAAD,CAAX,CAAnB","sourcesContent":["import React, { memo, forwardRef } from 'react';\nimport { useToken, usePropsResolution } from '../../../hooks';\nimport { makeStyledComponent } from '../../../utils/styled';\nimport { Svg, G } from './nbSvg';\nimport type { IIconProps } from './types';\nimport { questionOutlineIconPath } from './Icons/questionIconPath';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\n\nconst SVG = makeStyledComponent(Svg);\n\nconst SVGIcon = ({ children, ...props }: IIconProps, ref: any) => {\n  const {\n    focusable,\n    stroke,\n    color,\n    size,\n    ...resolvedProps\n  } = usePropsResolution('Icon', props);\n  const strokeHex = useToken('colors', stroke || '');\n  const colorHex = useToken('colors', color || '');\n  //TODO: refactor for responsive prop\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n  return (\n    <SVG\n      {...resolvedProps}\n      // height={\n      //   newProps.size\n      //     ? parseInt(newProps.size, 10)\n      //     : parseInt(newProps.height, 10)\n      // }\n      // width={\n      //   newProps.size\n      //     ? parseInt(newProps.size, 10)\n      //     : parseInt(newProps.width, 10)\n      // }\n      size={size}\n      color={colorHex}\n      stroke={strokeHex}\n      focusable={focusable}\n      accessibilityRole=\"image\"\n      // style={style}\n      ref={ref}\n    >\n      {React.Children.count(children) > 0 ? (\n        <G>\n          {React.Children.map(children, (child, i) => (\n            <ChildPath\n              key={child?.key ?? i}\n              element={child}\n              {...child?.props}\n            />\n          ))}\n        </G>\n      ) : (\n        questionOutlineIconPath\n      )}\n    </SVG>\n  );\n};\nconst ChildPath = ({ element, fill, stroke: pathStroke }: any) => {\n  const pathStrokeColor = useToken('colors', pathStroke || '');\n  const fillColor = useToken('colors', fill || '');\n\n  if (!element) {\n    return null;\n  }\n\n  return React.cloneElement(element, {\n    fill: fillColor ? fillColor : 'currentColor',\n    stroke: pathStrokeColor,\n  });\n};\nexport default memo(forwardRef(SVGIcon));\n"]}