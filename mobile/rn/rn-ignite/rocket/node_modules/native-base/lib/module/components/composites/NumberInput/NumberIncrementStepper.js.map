{"version":3,"sources":["NumberIncrementStepper.tsx"],"names":["React","NBStepper","NumberInputContext","useHasResponsiveProps","NumberIncrementStepper","children","isDisabled","pIsDisabled","props","ref","numberInputValue","step","max","Infinity","handleChange","context","useContext","pressHandler","memo","forwardRef"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,SAASC,SAAT,QAA0B,sBAA1B;AACA,SAASC,kBAAT,QAAmC,WAAnC;AACA,SAASC,qBAAT,QAAsC,sCAAtC;;AAEA,MAAMC,sBAAsB,GAAG,CAC7B;AAAEC,EAAAA,QAAF;AAAYC,EAAAA,UAAU,EAAEC,WAAxB;AAAqC,KAAGC;AAAxC,CAD6B,EAE7BC,GAF6B,KAG1B;AACH,QAAM;AACJC,IAAAA,gBAAgB,GAAG,CADf;AAEJC,IAAAA,IAAI,GAAG,CAFH;AAGJC,IAAAA,GAAG,GAAG,CAACC,QAHH;AAIJC,IAAAA,YAJI;AAKJ,OAAGC;AALC,MAMmBf,KAAK,CAACgB,UAAN,CAAiBd,kBAAjB,CANzB;AAQA,QAAMI,UAAU,GAAGC,WAAW,IAAIQ,OAAO,CAACT,UAA1C;;AACA,QAAMW,YAAY,GAAG,MAAM;AACzBH,IAAAA,YAAY,IAAIA,YAAY,CAACJ,gBAAgB,GAAGC,IAApB,CAA5B;AACD,GAFD,CAVG,CAaH;;;AACA,MAAIR,qBAAqB,CAACK,KAAD,CAAzB,EAAkC;AAChC,WAAO,IAAP;AACD;;AACD,sBACE,oBAAC,SAAD;AACE,IAAA,WAAW,MADb;AAEE,IAAA,UAAU,EAAEF,UAFd;AAGE,IAAA,YAAY,EAAEW,YAHhB;AAIE,IAAA,gBAAgB,EAAEP,gBAAgB,GAAGC,IAAnB,GAA0BC;AAJ9C,KAKMJ,KALN;AAME,IAAA,GAAG,EAAEC;AANP,MAQGJ,QARH,CADF;AAYD,CAhCD;;AAiCA,4BAAeL,KAAK,CAACkB,IAAN,eAAWlB,KAAK,CAACmB,UAAN,CAAiBf,sBAAjB,CAAX,CAAf","sourcesContent":["import React from 'react';\nimport type { INumberInputContext, INumberInputStepperProps } from './types';\nimport { NBStepper } from './NumberInputStepper';\nimport { NumberInputContext } from './Context';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\n\nconst NumberIncrementStepper = (\n  { children, isDisabled: pIsDisabled, ...props }: INumberInputStepperProps,\n  ref?: any\n) => {\n  const {\n    numberInputValue = 0,\n    step = 1,\n    max = +Infinity,\n    handleChange,\n    ...context\n  }: INumberInputContext = React.useContext(NumberInputContext);\n\n  const isDisabled = pIsDisabled || context.isDisabled;\n  const pressHandler = () => {\n    handleChange && handleChange(numberInputValue + step);\n  };\n  //TODO: refactor for responsive prop\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n  return (\n    <NBStepper\n      isIncrement\n      isDisabled={isDisabled}\n      pressHandler={pressHandler}\n      disablitityCheck={numberInputValue + step > max}\n      {...props}\n      ref={ref}\n    >\n      {children}\n    </NBStepper>\n  );\n};\nexport default React.memo(React.forwardRef(NumberIncrementStepper));\n"]}