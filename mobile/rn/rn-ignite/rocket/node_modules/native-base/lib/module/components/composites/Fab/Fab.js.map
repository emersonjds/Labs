{"version":3,"sources":["Fab.tsx"],"names":["React","memo","forwardRef","Button","usePropsResolution","OverlayContainer","useHasResponsiveProps","extractInObject","Fab","props","ref","buttonProps","remainingProps","themeProps","label","icon","renderInPortal","placement","placementProps","newProps","fabComponent"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,IAAhB,EAAsBC,UAAtB,QAAwC,OAAxC;AACA,SAASC,MAAT,QAAuB,yBAAvB;AAEA,SAASC,kBAAT,QAAmC,8BAAnC;AACA,SAASC,gBAAT,QAAiC,6BAAjC;AACA,SAASC,qBAAT,QAAsC,sCAAtC;AACA,SAASC,eAAT,QAAgC,4BAAhC;;AAEA,MAAMC,GAAG,GAAG,CAAC,EAAE,GAAGC;AAAL,CAAD,EAA0BC,GAA1B,KAAuC;AACjD;AACA,QAAM,CAACC,WAAD,EAAcC,cAAd,IAAgCL,eAAe,CAACE,KAAD,EAAQ,CAC3D,SAD2D,EAE3D,UAF2D,EAG3D,QAH2D,EAI3D,OAJ2D,EAK3D,QAL2D,EAM3D,QAN2D,EAO3D,UAP2D,EAQ3D,WAR2D,EAS3D,UAT2D,CAAR,CAArD;AAWA,QAAMI,UAAU,GAAGT,kBAAkB,CAAC,KAAD,EAAQQ,cAAR,CAArC;AAEA,QAAM;AACJE,IAAAA,KADI;AAEJC,IAAAA,IAFI;AAGJC,IAAAA,cAHI;AAIJC,IAAAA,SAJI;AAKJC,IAAAA,cALI;AAMJ,OAAGC;AANC,MAOFN,UAPJ;AASA,QAAMO,YAAY,gBAChB,oBAAC,MAAD,eACMT,WADN,EAEMO,cAAc,CAACD,SAAD,CAFpB;AAGE,IAAA,GAAG,EAAEP,GAHP;AAIE,IAAA,SAAS,EAAEK;AAJb,KAKMI,QALN,GAOGL,KAPH,CADF,CAxBiD,CAmCjD;;AACA,MAAIR,qBAAqB,CAACG,KAAD,CAAzB,EAAkC;AAChC,WAAO,IAAP;AACD;;AAED,SAAOO,cAAc,gBACnB,oBAAC,gBAAD,QAAmBI,YAAnB,CADmB,GAGnBA,YAHF;AAKD,CA7CD;;AA+CA,4BAAenB,IAAI,eAACC,UAAU,CAACM,GAAD,CAAX,CAAnB","sourcesContent":["import React, { memo, forwardRef } from 'react';\nimport { Button } from '../../primitives/Button';\nimport type { IFabProps } from './types';\nimport { usePropsResolution } from '../../../hooks/useThemeProps';\nimport { OverlayContainer } from '@react-native-aria/overlays';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\nimport { extractInObject } from '../../../theme/tools/utils';\n\nconst Fab = ({ ...props }: IFabProps, ref: any) => {\n  /** Extracting Button Specific Props */\n  const [buttonProps, remainingProps] = extractInObject(props, [\n    'variant',\n    '_pressed',\n    '_hover',\n    '_text',\n    '_focus',\n    '_stack',\n    '_loading',\n    '_disabled',\n    '_spinner',\n  ]);\n  const themeProps = usePropsResolution('FAB', remainingProps);\n\n  const {\n    label,\n    icon,\n    renderInPortal,\n    placement,\n    placementProps,\n    ...newProps\n  } = themeProps;\n\n  const fabComponent = (\n    <Button\n      {...buttonProps}\n      {...placementProps[placement]}\n      ref={ref}\n      startIcon={icon}\n      {...newProps}\n    >\n      {label}\n    </Button>\n  );\n  //TODO: refactor for responsive prop\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n\n  return renderInPortal ? (\n    <OverlayContainer>{fabComponent}</OverlayContainer>\n  ) : (\n    fabComponent\n  );\n};\n\nexport default memo(forwardRef(Fab));\n"]}