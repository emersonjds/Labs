{"version":3,"sources":["HStack.tsx"],"names":["React","memo","forwardRef","StackMain","usePropsResolution","useHasResponsiveProps","HStack","props","ref","resolvedProps"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,IAAhB,EAAsBC,UAAtB,QAAwC,OAAxC;AACA,OAAOC,SAAP,MAA+C,SAA/C;AACA,SAASC,kBAAT,QAAmC,8BAAnC;AAEA,SAASC,qBAAT,QAAsC,sCAAtC;;AAYA,MAAMC,MAAM,GAAG,CAACC,KAAD,EAAsBC,GAAtB,KAAoC;AACjD,QAAMC,aAAa,GAAGL,kBAAkB,CAAC,QAAD,EAAWG,KAAX,CAAxC,CADiD,CAEjD;;AACA,MAAIF,qBAAqB,CAACE,KAAD,CAAzB,EAAkC;AAChC,WAAO,IAAP;AACD;;AACD,sBAAO,oBAAC,SAAD;AAAW,IAAA,GAAG,EAAEC,GAAhB;AAAqB,IAAA,SAAS,EAAC;AAA/B,KAAyCC,aAAzC,EAAP;AACD,CAPD;;AASA,4BAAeR,IAAI,eAACC,UAAU,CAACI,MAAD,CAAX,CAAnB","sourcesContent":["import React, { memo, forwardRef } from 'react';\nimport StackMain, { InterfaceStackProps } from './Stack';\nimport { usePropsResolution } from '../../../hooks/useThemeProps';\nimport type { CustomProps, ResponsiveValue } from '../../types';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\nexport interface InterfaceHStackProps extends InterfaceStackProps {\n  /**\n   * The direction of the Stack Items.\n   * @default row\n   */\n  direction?: ResponsiveValue<\n    'column' | 'row' | 'column-reverse' | 'row-reverse'\n  >;\n}\n\nexport type IHStackProps = InterfaceHStackProps & CustomProps<'HStack'>;\nconst HStack = (props: IHStackProps, ref?: any) => {\n  const resolvedProps = usePropsResolution('HStack', props);\n  //TODO: refactor for responsive prop\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n  return <StackMain ref={ref} direction=\"row\" {...resolvedProps} />;\n};\n\nexport default memo(forwardRef(HStack));\n"]}