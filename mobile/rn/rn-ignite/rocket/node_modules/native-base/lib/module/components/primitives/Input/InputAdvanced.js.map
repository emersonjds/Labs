{"version":3,"sources":["InputAdvanced.tsx"],"names":["React","memo","forwardRef","InputBase","Box","usePropsResolution","extractInObject","stylingProps","useHover","mergeRefs","useHasResponsiveProps","InputAdvance","InputLeftElement","InputRightElement","leftElement","rightElement","onFocus","onBlur","inputProps","wrapperRef","props","ref","inputThemeProps","isDisabled","disabled","isInvalid","accessibilityInvalid","isReadOnly","accessibilityReadOnly","isRequired","required","isFocused","setIsFocused","useState","handleFocus","focusState","callback","_ref","useRef","isHovered","resolvedProps","layoutProps","nonLayoutProps","margin","border","layout","flexbox","position","background","baseInputProps","e"],"mappings":"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","sourcesContent":["import React, { memo, forwardRef } from 'react';\nimport InputBase from './InputBase';\nimport Box from '../Box';\nimport type { IInputProps } from './types';\nimport { usePropsResolution } from '../../../hooks/useThemeProps';\nimport { extractInObject, stylingProps } from '../../../theme/tools/utils';\nimport { useHover } from '@react-native-aria/interactions';\nimport { mergeRefs } from '../../../utils';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\n\nconst InputAdvance = (\n  {\n    InputLeftElement,\n    InputRightElement,\n    leftElement,\n    rightElement,\n    onFocus,\n    onBlur,\n    inputProps,\n    wrapperRef,\n    ...props\n  }: IInputProps & {\n    inputProps: any;\n  },\n  ref: any\n) => {\n  const inputThemeProps = {\n    isDisabled: inputProps.disabled,\n    isInvalid: inputProps.accessibilityInvalid,\n    isReadOnly: inputProps.accessibilityReadOnly,\n    isRequired: inputProps.required,\n  };\n\n  if (InputLeftElement) {\n    leftElement = InputLeftElement;\n  }\n  if (InputRightElement) {\n    rightElement = InputRightElement;\n  }\n\n  const [isFocused, setIsFocused] = React.useState(false);\n  const handleFocus = (focusState: boolean, callback: any) => {\n    setIsFocused(focusState);\n    callback();\n  };\n\n  const _ref = React.useRef(null);\n  const { isHovered } = useHover({}, _ref);\n\n  const resolvedProps = usePropsResolution(\n    'Input',\n    {\n      ...inputThemeProps,\n      ...props,\n    },\n    {\n      isDisabled: inputThemeProps.isDisabled,\n      isHovered,\n      isFocused,\n      isInvalid: inputThemeProps.isInvalid,\n      isReadOnly: inputThemeProps.isReadOnly,\n    }\n  );\n\n  const [layoutProps, nonLayoutProps] = extractInObject(resolvedProps, [\n    ...stylingProps.margin,\n    ...stylingProps.border,\n    ...stylingProps.layout,\n    ...stylingProps.flexbox,\n    ...stylingProps.position,\n    ...stylingProps.background,\n    'shadow',\n    'opacity',\n  ]);\n\n  // Extracting baseInputProps from remaining props\n  const [, baseInputProps] = extractInObject(nonLayoutProps, ['variant']);\n\n  //TODO: refactor for responsive prop\n  if (\n    useHasResponsiveProps({\n      ...props,\n      InputLeftElement,\n      InputRightElement,\n      onFocus,\n      onBlur,\n      inputProps,\n      wrapperRef,\n    })\n  ) {\n    return null;\n  }\n\n  return (\n    <Box\n      display=\"flex\"\n      flexDirection=\"row\"\n      alignItems=\"center\"\n      justifyContent=\"space-between\"\n      {...layoutProps}\n      ref={mergeRefs([_ref, wrapperRef])}\n    >\n      {InputLeftElement || leftElement ? InputLeftElement || leftElement : null}\n      <InputBase\n        inputProps={inputProps}\n        bg=\"transparent\"\n        {...baseInputProps}\n        flex={1}\n        disableFocusHandling\n        ref={ref}\n        variant=\"unstyled\"\n        onFocus={(e: any) => {\n          handleFocus(true, onFocus ? () => onFocus(e) : () => {});\n        }}\n        onBlur={(e: any) => {\n          handleFocus(false, onBlur ? () => onBlur(e) : () => {});\n        }}\n        shadow=\"none\"\n      />\n      {InputRightElement || rightElement\n        ? InputRightElement || rightElement\n        : null}\n    </Box>\n  );\n};\n\nexport default memo(forwardRef(InputAdvance));\n"]}