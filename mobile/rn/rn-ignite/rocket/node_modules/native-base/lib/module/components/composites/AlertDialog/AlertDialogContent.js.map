{"version":3,"sources":["AlertDialogContent.tsx"],"names":["React","memo","forwardRef","Box","usePropsResolution","AlertDialogContext","useHasResponsiveProps","AlertDialogContent","props","ref","newProps","contentSize","initialFocusRef","finalFocusRef","handleClose","useContext","useEffect","finalRefVal","current","focus"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,IAAhB,EAAsBC,UAAtB,QAAwC,OAAxC;AACA,OAAOC,GAAP,MAA+B,sBAA/B;AACA,SAASC,kBAAT,QAAmC,gBAAnC;AACA,SAASC,kBAAT,QAAmC,WAAnC;AACA,SAASC,qBAAT,QAAsC,sCAAtC;;AAEA,MAAMC,kBAAkB,GAAG,CAACC,KAAD,EAAmBC,GAAnB,KAAiC;AAC1D,QAAMC,QAAQ,GAAGN,kBAAkB,CAAC,oBAAD,EAAuBI,KAAvB,CAAnC;AACA,QAAM;AACJG,IAAAA,WADI;AAEJC,IAAAA,eAFI;AAGJC,IAAAA,aAHI;AAIJC,IAAAA;AAJI,MAKFd,KAAK,CAACe,UAAN,CAAiBV,kBAAjB,CALJ;AAMAL,EAAAA,KAAK,CAACgB,SAAN,CAAgB,MAAM;AACpB,UAAMC,WAAW,GAAGJ,aAAa,GAAGA,aAAa,CAACK,OAAjB,GAA2B,IAA5D;;AACA,QAAIN,eAAe,IAAIA,eAAe,CAACM,OAAvC,EAAgD;AAC9C;AACAN,MAAAA,eAAe,CAACM,OAAhB,CAAwBC,KAAxB;AACD;;AAED,WAAO,MAAM;AACX,UAAIF,WAAJ,EAAiB;AACf;AACAA,QAAAA,WAAW,CAACE,KAAZ;AACD;AACF,KALD;AAMD,GAbD,EAaG,CAACP,eAAD,EAAkBC,aAAlB,CAbH,EAR0D,CAuB1D;;AACA,MAAIP,qBAAqB,CAACE,KAAD,CAAzB,EAAkC;AAChC,WAAO,IAAP;AACD;;AACD,sBACE,oBAAC,GAAD,eACMG,WADN,EAEMD,QAFN;AAGE,IAAA,GAAG,EAAED,GAHP;AAIE,IAAA,qBAAqB,EAAEK,WAJzB,CAKE;AALF;AAME,kBAAW,MANb,CAOE;AAPF;AAQE,IAAA,iBAAiB,EAAC,OARpB;AASE,IAAA,wBAAwB;AAT1B,KADF;AAaD,CAxCD;;AA0CA,4BAAeb,IAAI,eAACC,UAAU,CAACK,kBAAD,CAAX,CAAnB","sourcesContent":["import React, { memo, forwardRef } from 'react';\nimport Box, { IBoxProps } from '../../primitives/Box';\nimport { usePropsResolution } from '../../../hooks';\nimport { AlertDialogContext } from './Context';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\n\nconst AlertDialogContent = (props: IBoxProps, ref?: any) => {\n  const newProps = usePropsResolution('AlertDialogContent', props);\n  const {\n    contentSize,\n    initialFocusRef,\n    finalFocusRef,\n    handleClose,\n  } = React.useContext(AlertDialogContext);\n  React.useEffect(() => {\n    const finalRefVal = finalFocusRef ? finalFocusRef.current : null;\n    if (initialFocusRef && initialFocusRef.current) {\n      //@ts-ignore\n      initialFocusRef.current.focus();\n    }\n\n    return () => {\n      if (finalRefVal) {\n        //@ts-ignore\n        finalRefVal.focus();\n      }\n    };\n  }, [initialFocusRef, finalFocusRef]);\n\n  //TODO: refactor for responsive prop\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n  return (\n    <Box\n      {...contentSize}\n      {...newProps}\n      ref={ref}\n      onAccessibilityEscape={handleClose}\n      //@ts-ignore - web only\n      aria-modal=\"true\"\n      //@ts-ignore - web only\n      accessibilityRole=\"alert\"\n      accessibilityViewIsModal\n    />\n  );\n};\n\nexport default memo(forwardRef(AlertDialogContent));\n"]}