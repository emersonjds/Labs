{"version":3,"sources":["badge.ts"],"names":["mode","getColorScheme","baseStyle","px","py","alignItems","_text","fontSize","fontWeight","variantSolid","props","colorScheme","bg","color","borderWidth","borderColor","borderRadius","variantSubtle","variantOutline","variants","solid","subtle","outline","defaultProps","variant"],"mappings":"AAAA,SAASA,IAAT,EAAeC,cAAf,QAAqC,UAArC;AAEA,MAAMC,SAAS,GAAG;AAChBC,EAAAA,EAAE,EAAE,GADY;AAEhBC,EAAAA,EAAE,EAAE,KAFY;AAGhBC,EAAAA,UAAU,EAAE,QAHI;AAIhBC,EAAAA,KAAK,EAAE;AAAEC,IAAAA,QAAQ,EAAE,IAAZ;AAAkBC,IAAAA,UAAU,EAAE;AAA9B;AAJS,CAAlB;;AAOA,SAASC,YAAT,CAAsBC,KAAtB,EAAkD;AAChD,QAAMC,WAAW,GAAGV,cAAc,CAACS,KAAD,CAAlC;AACA,SAAO;AACLE,IAAAA,EAAE,EAAEZ,IAAI,WAAIW,WAAJ,qBAA0BA,WAA1B,UAAJ,CAAiDD,KAAjD,CADC;AAELJ,IAAAA,KAAK,EAAE;AAAEO,MAAAA,KAAK,EAAEb,IAAI,gCAAJ,CAAqCU,KAArC;AAAT,KAFF;AAGLI,IAAAA,WAAW,EAAE,GAHR;AAILC,IAAAA,WAAW,EAAE,aAJR;AAKLC,IAAAA,YAAY,EAAE;AALT,GAAP;AAOD;;AAED,SAASC,aAAT,CAAuBP,KAAvB,EAAmD;AACjD,QAAMC,WAAW,GAAGV,cAAc,CAACS,KAAD,CAAlC;AACA,SAAO;AACLE,IAAAA,EAAE,EAAEZ,IAAI,WAAIW,WAAJ,qBAA0BA,WAA1B,UAAJ,CAAiDD,KAAjD,CADC;AAELJ,IAAAA,KAAK,EAAE;AAAEO,MAAAA,KAAK,EAAEb,IAAI,WAAIW,WAAJ,qBAA0BA,WAA1B,UAAJ,CAAiDD,KAAjD;AAAT,KAFF;AAGLI,IAAAA,WAAW,EAAE,GAHR;AAILE,IAAAA,YAAY,EAAE,GAJT;AAKLD,IAAAA,WAAW,EAAE;AALR,GAAP;AAOD;;AAED,SAASG,cAAT,CAAwBR,KAAxB,EAAoD;AAClD,QAAMC,WAAW,GAAGV,cAAc,CAACS,KAAD,CAAlC;AACA,SAAO;AACLK,IAAAA,WAAW,EAAEf,IAAI,WAAIW,WAAJ,qBAA0BA,WAA1B,UAAJ,CAAiDD,KAAjD,CADR;AAELJ,IAAAA,KAAK,EAAE;AAAEO,MAAAA,KAAK,EAAEb,IAAI,WAAIW,WAAJ,qBAA0BA,WAA1B,UAAJ,CAAiDD,KAAjD;AAAT,KAFF;AAGLM,IAAAA,YAAY,EAAE,GAHT;AAILF,IAAAA,WAAW,EAAE;AAJR,GAAP;AAMD;;AAED,MAAMK,QAAQ,GAAG;AACfC,EAAAA,KAAK,EAAEX,YADQ;AAEfY,EAAAA,MAAM,EAAEJ,aAFO;AAGfK,EAAAA,OAAO,EAAEJ;AAHM,CAAjB;AAMA,MAAMK,YAAY,GAAG;AACnBC,EAAAA,OAAO,EAAE,QADU;AAEnBb,EAAAA,WAAW,EAAE;AAFM,CAArB;AAKA,eAAe;AACbT,EAAAA,SADa;AAEbiB,EAAAA,QAFa;AAGbI,EAAAA;AAHa,CAAf","sourcesContent":["import { mode, getColorScheme } from '../tools';\n\nconst baseStyle = {\n  px: '2',\n  py: '0.5',\n  alignItems: 'center',\n  _text: { fontSize: 'xs', fontWeight: 'medium' },\n};\n\nfunction variantSolid(props: Record<string, any>) {\n  const colorScheme = getColorScheme(props);\n  return {\n    bg: mode(`${colorScheme}.600`, `${colorScheme}.300`)(props),\n    _text: { color: mode(`coolGray.100`, `coolGray.800`)(props) },\n    borderWidth: '1',\n    borderColor: 'transparent',\n    borderRadius: '2',\n  };\n}\n\nfunction variantSubtle(props: Record<string, any>) {\n  const colorScheme = getColorScheme(props);\n  return {\n    bg: mode(`${colorScheme}.200`, `${colorScheme}.700`)(props),\n    _text: { color: mode(`${colorScheme}.600`, `${colorScheme}.200`)(props) },\n    borderWidth: '1',\n    borderRadius: '2',\n    borderColor: 'transparent',\n  };\n}\n\nfunction variantOutline(props: Record<string, any>) {\n  const colorScheme = getColorScheme(props);\n  return {\n    borderColor: mode(`${colorScheme}.500`, `${colorScheme}.400`)(props),\n    _text: { color: mode(`${colorScheme}.500`, `${colorScheme}.400`)(props) },\n    borderRadius: '2',\n    borderWidth: '1',\n  };\n}\n\nconst variants = {\n  solid: variantSolid,\n  subtle: variantSubtle,\n  outline: variantOutline,\n};\n\nconst defaultProps = {\n  variant: 'subtle',\n  colorScheme: 'coolGray',\n};\n\nexport default {\n  baseStyle,\n  variants,\n  defaultProps,\n};\n"]}