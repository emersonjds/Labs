{"version":3,"sources":["Checkbox.tsx"],"names":["React","useContext","memo","forwardRef","Pressable","usePropsResolution","Center","useFormControlContext","Box","mergeRefs","useToggleState","CheckboxGroupContext","useCheckbox","useCheckboxGroupItem","useHasResponsiveProps","composeEventHandlers","combineContextAndProps","extractInObject","stylingProps","useHover","useFocus","useIsPressed","SizedIcon","Stack","wrapStringChild","Checkbox","wrapperRef","isHovered","isHoveredProp","isPressed","isPressedProp","isFocused","isFocusedProp","props","ref","formControlContext","isInvalid","isReadOnly","isIndeterminate","combinedProps","checkboxGroupContext","state","defaultSelected","defaultIsChecked","isSelected","isChecked","_ref","useRef","mergedRef","inputProps","groupItemInputProps","useMemo","checked","disabled","contextCombinedProps","useState","CheckboxComponent","hoverProps","pressableProps","focusProps","isDisabled","icon","_interactionBox","_icon","_stack","_text","onPress","onPressIn","onPressOut","onHoverIn","onHoverOut","onFocus","onBlur","resolvedProps","layoutProps","nonLayoutProps","margin","layout","flexbox","position","accessibilityProps","nonAccessibilityProps","children"],"mappings":"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","sourcesContent":["import React, { useContext, memo, forwardRef } from 'react';\nimport { Pressable, IPressableProps } from '../Pressable';\nimport { usePropsResolution } from '../../../hooks/useThemeProps';\nimport { Center } from '../../composites/Center';\nimport { useFormControlContext } from '../../composites/FormControl';\nimport Box from '../Box';\nimport { mergeRefs } from './../../../utils';\nimport type { ICheckboxProps } from './types';\nimport { useToggleState } from '@react-stately/toggle';\nimport { CheckboxGroupContext } from './CheckboxGroup';\nimport { useCheckbox, useCheckboxGroupItem } from '@react-native-aria/checkbox';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\nimport { composeEventHandlers, combineContextAndProps } from '../../../utils';\nimport { extractInObject, stylingProps } from '../../../theme/tools/utils';\nimport {\n  useHover,\n  useFocus,\n  useIsPressed,\n} from '../../primitives/Pressable/Pressable';\nimport SizedIcon from './SizedIcon';\nimport { Stack } from '../Stack';\nimport { wrapStringChild } from '../../../utils/wrapStringChild';\n\nconst Checkbox = (\n  {\n    wrapperRef,\n    isHovered: isHoveredProp,\n    isPressed: isPressedProp,\n    isFocused: isFocusedProp,\n    ...props\n  }: ICheckboxProps,\n  ref: any\n) => {\n  const formControlContext = useFormControlContext();\n\n  const {\n    isInvalid,\n    isReadOnly,\n    isIndeterminate,\n    ...combinedProps\n  } = combineContextAndProps(formControlContext, props);\n\n  const checkboxGroupContext = useContext(CheckboxGroupContext);\n  const state = useToggleState({\n    ...combinedProps,\n    defaultSelected: combinedProps.defaultIsChecked,\n    isSelected: combinedProps.isChecked,\n  });\n  const _ref = React.useRef();\n  const mergedRef = mergeRefs([ref, _ref]);\n\n  // Swap hooks depending on whether this checkbox is inside a CheckboxGroup.\n  // This is a bit unorthodox. Typically, hooks cannot be called in a conditional,\n  // but since the checkbox won't move in and out of a group, it should be safe.\n  const { inputProps: groupItemInputProps } = checkboxGroupContext\n    ? // eslint-disable-next-line react-hooks/rules-of-hooks\n      useCheckboxGroupItem(\n        combinedProps,\n        checkboxGroupContext.state,\n        //@ts-ignore\n        mergedRef\n      )\n    : // eslint-disable-next-line react-hooks/rules-of-hooks\n      useCheckbox(\n        combinedProps,\n        state,\n        //@ts-ignore\n        mergedRef\n      );\n\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  const inputProps = React.useMemo(() => groupItemInputProps, [\n    groupItemInputProps.checked,\n    groupItemInputProps.disabled,\n  ]);\n\n  const [contextCombinedProps] = React.useState({\n    ...checkboxGroupContext,\n    ...combinedProps,\n  });\n  return (\n    <CheckboxComponent\n      inputProps={inputProps}\n      combinedProps={contextCombinedProps}\n      isInvalid={isInvalid}\n      isReadOnly={isReadOnly}\n      isIndeterminate={isIndeterminate}\n      isHovered={isHoveredProp}\n      isPressed={isPressedProp}\n      isFocused={isFocusedProp}\n      wrapperRef={wrapperRef}\n    />\n  );\n};\nconst CheckboxComponent = React.memo(\n  ({\n    wrapperRef,\n    inputProps,\n    combinedProps,\n    isInvalid,\n    isReadOnly,\n    isIndeterminate,\n    isHovered: isHoveredProp,\n    isPressed: isPressedProp,\n    isFocused: isFocusedProp,\n  }: any) => {\n    const _ref = React.useRef();\n    const { hoverProps, isHovered } = useHover();\n    const { pressableProps, isPressed } = useIsPressed();\n    const { focusProps, isFocused } = useFocus();\n\n    const { checked: isChecked, disabled: isDisabled } = inputProps;\n\n    const {\n      icon,\n      _interactionBox,\n      _icon,\n      _stack,\n      _text,\n      onPress,\n      onPressIn,\n      onPressOut,\n      onHoverIn,\n      onHoverOut,\n      onFocus,\n      onBlur,\n      ...resolvedProps\n    } = usePropsResolution(\n      'Checkbox',\n      { ...combinedProps, ...inputProps },\n      {\n        isInvalid,\n        isReadOnly,\n        isIndeterminate,\n        isDisabled,\n        isChecked,\n        isHovered: isHoveredProp || isHovered,\n        isPressed: isPressedProp || isPressed,\n        isFocused: isFocusedProp || isFocused,\n      }\n    );\n\n    const [layoutProps, nonLayoutProps] = extractInObject(resolvedProps, [\n      ...stylingProps.margin,\n      ...stylingProps.layout,\n      ...stylingProps.flexbox,\n      ...stylingProps.position,\n      '_text',\n    ]);\n\n    const [\n      accessibilityProps,\n      nonAccessibilityProps,\n    ] = extractInObject(nonLayoutProps, [\n      'accessibilityRole',\n      'accessibilityState',\n    ]);\n\n    //TODO: refactor for responsive prop\n    if (useHasResponsiveProps(resolvedProps)) {\n      return null;\n    }\n\n    return (\n      <Pressable\n        disabled={isDisabled}\n        {...(pressableProps as IPressableProps)}\n        {...accessibilityProps}\n        onPress={onPress}\n        ref={mergeRefs([_ref, wrapperRef])}\n        accessibilityRole=\"checkbox\"\n        onPressIn={composeEventHandlers(onPressIn, pressableProps.onPressIn)}\n        onPressOut={composeEventHandlers(onPressOut, pressableProps.onPressOut)}\n        // @ts-ignore - web only\n        onHoverIn={composeEventHandlers(onHoverIn, hoverProps.onHoverIn)}\n        // @ts-ignore - web only\n        onHoverOut={composeEventHandlers(onHoverOut, hoverProps.onHoverOut)}\n        // @ts-ignore - web only\n        onFocus={composeEventHandlers(\n          composeEventHandlers(onFocus, focusProps.onFocus)\n          // focusRingProps.onFocu\n        )}\n        // @ts-ignore - web only\n        onBlur={composeEventHandlers(\n          composeEventHandlers(onBlur, focusProps.onBlur)\n          // focusRingProps.onBlur\n        )}\n      >\n        <Stack {...layoutProps} {..._stack}>\n          <Center>\n            {/* Interaction Wrapper */}\n            <Box {..._interactionBox} />\n            {/* Checkbox */}\n            <Center {...nonAccessibilityProps}>\n              <SizedIcon icon={icon} _icon={_icon} isChecked={isChecked} />\n            </Center>\n          </Center>\n          {/* Label */}\n          {wrapStringChild(combinedProps.children, _text)}\n        </Stack>\n      </Pressable>\n    );\n  }\n);\n\nexport default memo(forwardRef(Checkbox));\n"]}