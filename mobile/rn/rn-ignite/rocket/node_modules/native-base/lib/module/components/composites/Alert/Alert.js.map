{"version":3,"sources":["Alert.tsx"],"names":["React","memo","forwardRef","Box","usePropsResolution","AlertContext","useHasResponsiveProps","Alert","children","props","ref","status","variant","_icon","colorScheme","newProps"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,IAAhB,EAAsBC,UAAtB,QAAwC,OAAxC;AACA,OAAOC,GAAP,MAAgB,sBAAhB,C,CACA;;AACA,SAASC,kBAAT,QAAmC,8BAAnC;AAEA,SAASC,YAAT,QAA6B,WAA7B;AACA,SAASC,qBAAT,QAAsC,sCAAtC;;AAEA,MAAMC,KAAK,GAAG,CAAC;AAAEC,EAAAA,QAAF;AAAY,KAAGC;AAAf,CAAD,EAAsCC,GAAtC,KAAoD;AAChE,QAAM;AACJC,IAAAA,MADI;AAEJC,IAAAA,OAFI;AAGJC,IAAAA,KAHI;AAIJC,IAAAA,WAJI;AAKJ,OAAGC;AALC,MAMFX,kBAAkB,CAAC,OAAD,EAAUK,KAAV,CANtB,CADgE,CAQhE;;AACA,MAAIH,qBAAqB,CAACG,KAAD,CAAzB,EAAkC;AAChC,WAAO,IAAP;AACD;;AACD,sBACE,oBAAC,YAAD,CAAc,QAAd;AACE,IAAA,KAAK,EAAE;AACLE,MAAAA,MADK;AAELC,MAAAA,OAFK;AAGLC,MAAAA,KAHK;AAILC,MAAAA;AAJK;AADT,kBAQE,oBAAC,GAAD,eAASC,QAAT;AAAmB,IAAA,GAAG,EAAEL;AAAxB,MACGF,QADH,CARF,CADF;AAcD,CA1BD;;AA4BA,4BAAeP,IAAI,eAACC,UAAU,CAACK,KAAD,CAAX,CAAnB","sourcesContent":["import React, { memo, forwardRef } from 'react';\nimport Box from '../../primitives/Box';\n// import { HStack } from '../../primitives/Stack';\nimport { usePropsResolution } from '../../../hooks/useThemeProps';\nimport type { IAlertProps } from './types';\nimport { AlertContext } from './Context';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\n\nconst Alert = ({ children, ...props }: IAlertProps, ref?: any) => {\n  const {\n    status,\n    variant,\n    _icon,\n    colorScheme,\n    ...newProps\n  } = usePropsResolution('Alert', props);\n  //TODO: refactor for responsive prop\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n  return (\n    <AlertContext.Provider\n      value={{\n        status,\n        variant,\n        _icon,\n        colorScheme,\n      }}\n    >\n      <Box {...newProps} ref={ref}>\n        {children}\n      </Box>\n    </AlertContext.Provider>\n  );\n};\n\nexport default memo(forwardRef(Alert));\n"]}