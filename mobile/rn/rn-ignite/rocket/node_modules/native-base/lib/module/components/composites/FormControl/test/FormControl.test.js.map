{"version":3,"sources":["FormControl.test.tsx"],"names":["React","FormControl","useFormControl","TextInput","render","Wrapper","Input","forwardRef","props","ref","inputProps","it","getByPlaceholderText","textInput","expect","accessibilityRequired","toBe","required","accessibilityInvalid","accessibilityReadOnly","readOnly","disabled","accessibilityDescribedBy","toBeUndefined","inputID","_ref","nativeID","htmlFor"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,WAAT,EAAsBC,cAAtB,QAA4C,UAA5C;AACA,SAASC,SAAT,QAA0B,cAA1B;AACA,SAASC,MAAT,QAAuB,+BAAvB;AACA,SAASC,OAAT,QAAwB,8BAAxB;AAEA,MAAMC,KAAK,gBAAGN,KAAK,CAACO,UAAN,CAAiB,CAACC,KAAD,EAAaC,GAAb,KAA0B;AACvD,QAAMC,UAAU,GAAGR,cAAc,CAACM,KAAD,CAAjC;AACA;AAAA;AACE;AACA,wBAAC,SAAD;AAAW,MAAA,GAAG,EAAEC;AAAhB,OAAyBC,UAAzB;AAFF;AAID,CANa,CAAd;AAQAC,EAAE,CAAC,4BAAD,EAA+B,YAAY;AAC3C,MAAI;AAAEC,IAAAA;AAAF,MAA2BR,MAAM,eACnC,oBAAC,OAAD,qBACE,oBAAC,WAAD;AAAa,IAAA,QAAQ,EAAC,MAAtB;AAA6B,IAAA,UAAU;AAAvC,kBACE,oBAAC,WAAD,CAAa,KAAb,eADF,eAEE,oBAAC,KAAD;AAAO,IAAA,WAAW,EAAC;AAAnB,IAFF,eAGE,oBAAC,WAAD,CAAa,UAAb,kCAHF,eAIE,oBAAC,WAAD,CAAa,YAAb,+BAJF,CADF,CADmC,CAArC;AAYA,QAAMS,SAAS,GAAGD,oBAAoB,CAAC,MAAD,CAAtC;AACAE,EAAAA,MAAM,CAACD,SAAS,CAACL,KAAV,CAAgBO,qBAAjB,CAAN,CAA8CC,IAA9C,CAAmD,IAAnD;AACAF,EAAAA,MAAM,CAACD,SAAS,CAACL,KAAV,CAAgBS,QAAjB,CAAN,CAAiCD,IAAjC,CAAsC,IAAtC;AACD,CAhBC,CAAF;AAkBAL,EAAE,CAAC,2BAAD,EAA8B,YAAY;AAC1C,MAAI;AAAEC,IAAAA;AAAF,MAA2BR,MAAM,eACnC,oBAAC,OAAD,qBACE,oBAAC,WAAD;AAAa,IAAA,QAAQ,EAAC,MAAtB;AAA6B,IAAA,SAAS;AAAtC,kBACE,oBAAC,WAAD,CAAa,KAAb,eADF,eAEE,oBAAC,KAAD;AAAO,IAAA,WAAW,EAAC;AAAnB,IAFF,eAGE,oBAAC,WAAD,CAAa,UAAb,kCAHF,eAIE,oBAAC,WAAD,CAAa,YAAb,+BAJF,CADF,CADmC,CAArC;AAYA,QAAMS,SAAS,GAAGD,oBAAoB,CAAC,MAAD,CAAtC;AACAE,EAAAA,MAAM,CAACD,SAAS,CAACL,KAAV,CAAgBU,oBAAjB,CAAN,CAA6CF,IAA7C,CAAkD,IAAlD;AACD,CAfC,CAAF;AAiBAL,EAAE,CAAC,4BAAD,EAA+B,YAAY;AAC3C,MAAI;AAAEC,IAAAA;AAAF,MAA2BR,MAAM,eACnC,oBAAC,OAAD,qBACE,oBAAC,WAAD;AAAa,IAAA,QAAQ,EAAC,MAAtB;AAA6B,IAAA,UAAU;AAAvC,kBACE,oBAAC,WAAD,CAAa,KAAb,eADF,eAEE,oBAAC,KAAD;AAAO,IAAA,WAAW,EAAC;AAAnB,IAFF,eAGE,oBAAC,WAAD,CAAa,UAAb,kCAHF,eAIE,oBAAC,WAAD,CAAa,YAAb,+BAJF,CADF,CADmC,CAArC;AAYA,QAAMS,SAAS,GAAGD,oBAAoB,CAAC,MAAD,CAAtC;AACAE,EAAAA,MAAM,CAACD,SAAS,CAACL,KAAV,CAAgBW,qBAAjB,CAAN,CAA8CH,IAA9C,CAAmD,IAAnD;AACAF,EAAAA,MAAM,CAACD,SAAS,CAACL,KAAV,CAAgBY,QAAjB,CAAN,CAAiCJ,IAAjC,CAAsC,IAAtC;AACD,CAhBC,CAAF;AAkBAL,EAAE,CAAC,4BAAD,EAA+B,YAAY;AAC3C,MAAI;AAAEC,IAAAA;AAAF,MAA2BR,MAAM,eACnC,oBAAC,OAAD,qBACE,oBAAC,WAAD;AAAa,IAAA,QAAQ,EAAC,MAAtB;AAA6B,IAAA,UAAU;AAAvC,kBACE,oBAAC,WAAD,CAAa,KAAb,eADF,eAEE,oBAAC,KAAD;AAAO,IAAA,WAAW,EAAC;AAAnB,IAFF,eAGE,oBAAC,WAAD,CAAa,UAAb,kCAHF,eAIE,oBAAC,WAAD,CAAa,YAAb,+BAJF,CADF,CADmC,CAArC;AAYA,QAAMS,SAAS,GAAGD,oBAAoB,CAAC,MAAD,CAAtC;AACAE,EAAAA,MAAM,CAACD,SAAS,CAACL,KAAV,CAAgBa,QAAjB,CAAN,CAAiCL,IAAjC,CAAsC,IAAtC;AACD,CAfC,CAAF;AAiBAL,EAAE,CAAC,uCAAD,EAA0C,YAAY;AACtD,MAAI;AAAEC,IAAAA;AAAF,MAA2BR,MAAM,eACnC,oBAAC,OAAD,qBACE,oBAAC,WAAD;AAAa,IAAA,QAAQ,EAAC,MAAtB;AAA6B,IAAA,UAAU;AAAvC,kBACE,oBAAC,WAAD,CAAa,KAAb,eADF,eAEE,oBAAC,KAAD;AAAO,IAAA,WAAW,EAAC;AAAnB,IAFF,eAGE,oBAAC,WAAD,CAAa,UAAb,kCAHF,CADF,CADmC,CAArC;AASA,QAAMS,SAAS,GAAGD,oBAAoB,CAAC,MAAD,CAAtC;AACAE,EAAAA,MAAM,CAACD,SAAS,CAACL,KAAV,CAAgBc,wBAAjB,CAAN,CAAiDN,IAAjD,CAAsD,eAAtD;AACAF,EAAAA,MAAM,CAACD,SAAS,CAACL,KAAV,CAAgBW,qBAAjB,CAAN,CAA8CI,aAA9C;AACAT,EAAAA,MAAM,CAACD,SAAS,CAACL,KAAV,CAAgBU,oBAAjB,CAAN,CAA6CK,aAA7C;AACAT,EAAAA,MAAM,CAACD,SAAS,CAACL,KAAV,CAAgBO,qBAAjB,CAAN,CAA8CQ,aAA9C;AACD,CAfC,CAAF;AAiBAZ,EAAE,CAAC,oDAAD,EAAuD,YAAY;AACnE,MAAIF,GAAJ;AACA,QAAMe,OAAO,GAAG,MAAhB;AACA,MAAI;AAAEZ,IAAAA;AAAF,MAA2BR,MAAM,eACnC,oBAAC,OAAD,qBACE,oBAAC,WAAD;AAAa,IAAA,QAAQ,EAAEoB,OAAvB;AAAgC,IAAA,SAAS;AAAzC,kBACE,oBAAC,WAAD,CAAa,KAAb;AACE;AACA,IAAA,GAAG,EAAGC,IAAD,IAAWhB,GAAG,GAAGgB;AAFxB,YADF,eAOE,oBAAC,KAAD;AAAO,IAAA,WAAW,EAAC;AAAnB,IAPF,eAQE,oBAAC,WAAD,CAAa,UAAb,kCARF,eASE,oBAAC,WAAD,CAAa,YAAb,+BATF,CADF,CADmC,CAArC;AAiBA,QAAMZ,SAAS,GAAGD,oBAAoB,CAAC,MAAD,CAAtC,CApBmE,CAqBnE;;AACAE,EAAAA,MAAM,CAACD,SAAS,CAACL,KAAV,CAAgBkB,QAAjB,CAAN,CAAiCV,IAAjC,CAAsCP,GAAG,CAACkB,OAA1C;AACD,CAvBC,CAAF","sourcesContent":["import React from 'react';\nimport { FormControl, useFormControl } from '../index';\nimport { TextInput } from 'react-native';\nimport { render } from '@testing-library/react-native';\nimport { Wrapper } from '../../../../utils/test-utils';\n\nconst Input = React.forwardRef((props: any, ref: any) => {\n  const inputProps = useFormControl(props);\n  return (\n    //@ts-ignore\n    <TextInput ref={ref} {...inputProps} />\n  );\n});\n\nit('a11y test in when required', async () => {\n  let { getByPlaceholderText } = render(\n    <Wrapper>\n      <FormControl nativeID=\"name\" isRequired>\n        <FormControl.Label>Name</FormControl.Label>\n        <Input placeholder=\"Name\" />\n        <FormControl.HelperText>Enter your name please!</FormControl.HelperText>\n        <FormControl.ErrorMessage>\n          Your name is invalid\n        </FormControl.ErrorMessage>\n      </FormControl>\n    </Wrapper>\n  );\n  const textInput = getByPlaceholderText('Name');\n  expect(textInput.props.accessibilityRequired).toBe(true);\n  expect(textInput.props.required).toBe(true);\n});\n\nit('a11y test in when invalid', async () => {\n  let { getByPlaceholderText } = render(\n    <Wrapper>\n      <FormControl nativeID=\"name\" isInvalid>\n        <FormControl.Label>Name</FormControl.Label>\n        <Input placeholder=\"Name\" />\n        <FormControl.HelperText>Enter your name please!</FormControl.HelperText>\n        <FormControl.ErrorMessage>\n          Your name is invalid\n        </FormControl.ErrorMessage>\n      </FormControl>\n    </Wrapper>\n  );\n  const textInput = getByPlaceholderText('Name');\n  expect(textInput.props.accessibilityInvalid).toBe(true);\n});\n\nit('a11y test in when readOnly', async () => {\n  let { getByPlaceholderText } = render(\n    <Wrapper>\n      <FormControl nativeID=\"name\" isReadOnly>\n        <FormControl.Label>Name</FormControl.Label>\n        <Input placeholder=\"Name\" />\n        <FormControl.HelperText>Enter your name please!</FormControl.HelperText>\n        <FormControl.ErrorMessage>\n          Your name is invalid\n        </FormControl.ErrorMessage>\n      </FormControl>\n    </Wrapper>\n  );\n  const textInput = getByPlaceholderText('Name');\n  expect(textInput.props.accessibilityReadOnly).toBe(true);\n  expect(textInput.props.readOnly).toBe(true);\n});\n\nit('a11y test in when disabled', async () => {\n  let { getByPlaceholderText } = render(\n    <Wrapper>\n      <FormControl nativeID=\"name\" isDisabled>\n        <FormControl.Label>Name</FormControl.Label>\n        <Input placeholder=\"Name\" />\n        <FormControl.HelperText>Enter your name please!</FormControl.HelperText>\n        <FormControl.ErrorMessage>\n          Your name is invalid\n        </FormControl.ErrorMessage>\n      </FormControl>\n    </Wrapper>\n  );\n  const textInput = getByPlaceholderText('Name');\n  expect(textInput.props.disabled).toBe(true);\n});\n\nit('a11y test when helper text is present', async () => {\n  let { getByPlaceholderText } = render(\n    <Wrapper>\n      <FormControl nativeID=\"name\" isDisabled>\n        <FormControl.Label>Name</FormControl.Label>\n        <Input placeholder=\"Name\" />\n        <FormControl.HelperText>Enter your name please!</FormControl.HelperText>\n      </FormControl>\n    </Wrapper>\n  );\n  const textInput = getByPlaceholderText('Name');\n  expect(textInput.props.accessibilityDescribedBy).toBe('name-helptext');\n  expect(textInput.props.accessibilityReadOnly).toBeUndefined();\n  expect(textInput.props.accessibilityInvalid).toBeUndefined();\n  expect(textInput.props.accessibilityRequired).toBeUndefined();\n});\n\nit('sets htmlFor of FormLabel ref to nativeID of Input', async () => {\n  let ref: HTMLLabelElement;\n  const inputID = 'name';\n  let { getByPlaceholderText } = render(\n    <Wrapper>\n      <FormControl nativeID={inputID} isInvalid>\n        <FormControl.Label\n          //@ts-ignore\n          ref={(_ref) => (ref = _ref)}\n        >\n          Name\n        </FormControl.Label>\n        <Input placeholder=\"Name\" />\n        <FormControl.HelperText>Enter your name please!</FormControl.HelperText>\n        <FormControl.ErrorMessage>\n          Your name is invalid\n        </FormControl.ErrorMessage>\n      </FormControl>\n    </Wrapper>\n  );\n  const textInput = getByPlaceholderText('Name');\n  //@ts-ignore\n  expect(textInput.props.nativeID).toBe(ref.htmlFor);\n});\n"]}