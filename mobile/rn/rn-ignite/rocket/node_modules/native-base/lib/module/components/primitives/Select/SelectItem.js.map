{"version":3,"sources":["SelectItem.tsx"],"names":["React","forwardRef","memo","Platform","Actionsheet","SelectContext","useHasResponsiveProps","Item","isDisabled","label","value","props","ref","onValueChange","selectedValue","_selectedItem","_item","useContext","OS","isSelected","selected"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,UAAhB,EAA4BC,IAA5B,QAAwC,OAAxC;AAEA,SAASC,QAAT,QAAyB,cAAzB;AACA,SAASC,WAAT,QAA4B,8BAA5B;AACA,SAASC,aAAT,QAA8B,UAA9B;AACA,SAASC,qBAAT,QAAsC,sCAAtC;AAEA,OAAO,MAAMC,IAAI,GAAG,CAClB;AAAEC,EAAAA,UAAF;AAAcC,EAAAA,KAAd;AAAqBC,EAAAA,KAArB;AAA4B,KAAGC;AAA/B,CADkB,EAElBC,GAFkB,KAGf;AACH,QAAM;AACJC,IAAAA,aADI;AAEJC,IAAAA,aAFI;AAGJC,IAAAA,aAHI;AAIJC,IAAAA;AAJI,MAKFhB,KAAK,CAACiB,UAAN,CAAiBZ,aAAjB,CALJ,CADG,CAOH;;AACA,MAAIC,qBAAqB,CAAC,EAAE,GAAGK,KAAL;AAAYH,IAAAA,UAAZ;AAAwBC,IAAAA,KAAxB;AAA+BC,IAAAA;AAA/B,GAAD,CAAzB,EAAmE;AACjE,WAAO,IAAP;AACD;;AACD,MAAIP,QAAQ,CAACe,EAAT,KAAgB,KAApB,EAA2B;AACzB,UAAMC,UAAU,GAAGL,aAAa,KAAKJ,KAArC;AAEA,wBACE,oBAAC,WAAD,CAAa,IAAb;AACE,MAAA,GAAG,EAAEE,GADP;AAEE,MAAA,OAAO,EAAE,MAAM;AACb,YAAI,CAACJ,UAAL,EAAiB;AACfK,UAAAA,aAAa,CAACH,KAAD,CAAb;AACD;AACF,OANH;AAOE,MAAA,kBAAkB,EAAE;AAAEU,QAAAA,QAAQ,EAAED;AAAZ;AAPtB,OAQMH,KARN,EASOG,UAAU,IAAIJ,aATrB,EAUMJ,KAVN,GAYGF,KAZH,CADF;AAgBD,GAnBD,MAmBO;AACL,wBACE;AAAQ,MAAA,GAAG,EAAEG,GAAb;AAAkB,MAAA,KAAK,EAAEF,KAAzB;AAAgC,MAAA,QAAQ,EAAEF;AAA1C,OACGC,KADH,CADF;AAKD;AACF,CAxCM;AA0CP,4BAAeP,IAAI,eAACD,UAAU,CAACM,IAAD,CAAX,CAAnB","sourcesContent":["import React, { forwardRef, memo } from 'react';\nimport type { ISelectItemProps } from './types';\nimport { Platform } from 'react-native';\nimport { Actionsheet } from '../../composites/Actionsheet';\nimport { SelectContext } from './Select';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\n\nexport const Item = (\n  { isDisabled, label, value, ...props }: ISelectItemProps,\n  ref?: any\n) => {\n  const {\n    onValueChange,\n    selectedValue,\n    _selectedItem,\n    _item,\n  } = React.useContext(SelectContext);\n  //TODO: refactor for responsive prop\n  if (useHasResponsiveProps({ ...props, isDisabled, label, value })) {\n    return null;\n  }\n  if (Platform.OS !== 'web') {\n    const isSelected = selectedValue === value;\n\n    return (\n      <Actionsheet.Item\n        ref={ref}\n        onPress={() => {\n          if (!isDisabled) {\n            onValueChange(value);\n          }\n        }}\n        accessibilityState={{ selected: isSelected }}\n        {..._item}\n        {...(isSelected && _selectedItem)}\n        {...props}\n      >\n        {label}\n      </Actionsheet.Item>\n    );\n  } else {\n    return (\n      <option ref={ref} value={value} disabled={isDisabled}>\n        {label}\n      </option>\n    );\n  }\n};\n\nexport default memo(forwardRef(Item));\n"]}