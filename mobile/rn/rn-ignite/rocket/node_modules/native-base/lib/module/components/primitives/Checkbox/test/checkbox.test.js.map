{"version":3,"sources":["checkbox.test.tsx"],"names":["React","fireEvent","render","NativeBaseProvider","Checkbox","Text","CheckBoxGroup","groupValue","setGroupValue","useState","values","CheckBox","group","groupValues","setGroupValues","describe","it","getAllByRole","frame","x","y","width","height","insets","top","left","right","bottom","checkbox","expect","length","toBe","props","accessibilityState","checked","press","disabled"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { fireEvent, render } from '@testing-library/react-native';\nimport { NativeBaseProvider } from '../../../../core/NativeBaseProvider';\nimport { Checkbox } from '..';\nimport { Text } from '../..';\n\nfunction CheckBoxGroup() {\n  const [groupValue, setGroupValue] = React.useState(['Item 1 ', 'Item 3 ']);\n  return (\n    <Checkbox.Group\n      colorScheme=\"green\"\n      defaultValue={groupValue}\n      onChange={(values) => {\n        setGroupValue(values || []);\n      }}\n    >\n      <Checkbox value=\"Item 1 \">\n        <Text mx={2}>Item 1</Text>\n      </Checkbox>\n      <Checkbox value=\"Item 2 \">\n        <Text mx={2}>Item 2</Text>\n      </Checkbox>\n      <Checkbox value=\"Item 3 \">\n        <Text mx={2}>Item 3</Text>\n      </Checkbox>\n      <Checkbox colorScheme=\"orange\" value=\"Indeterminate Item \">\n        <Text mx={2}>Indeterminate Item</Text>\n      </Checkbox>\n    </Checkbox.Group>\n  );\n}\n\nfunction CheckBox(group: any) {\n  const [groupValues, setGroupValues] = React.useState<Array<any>>([]);\n  return group ? (\n    <Checkbox.Group onChange={setGroupValues} value={groupValues}>\n      <Checkbox value=\"one\">\n        <Text>One</Text>\n      </Checkbox>\n      <Checkbox\n        value=\"two\"\n        isIndeterminate\n        onChange={() => setGroupValues([...groupValues, 'two'])}\n      >\n        <Text>Two</Text>\n      </Checkbox>\n    </Checkbox.Group>\n  ) : (\n    <>\n      <Checkbox\n        value=\"one\"\n        onChange={() => {\n          setGroupValues([...groupValues, 'one']);\n        }}\n      >\n        <Text>One</Text>\n      </Checkbox>\n      <Checkbox\n        value=\"two\"\n        isIndeterminate\n        onChange={() => setGroupValues([...groupValues, 'two'])}\n      >\n        <Text>Two</Text>\n      </Checkbox>\n    </>\n  );\n}\n\ndescribe('CheckBoxGroup', () => {\n  it('handles defaults and onChange on checkBoxGroup', () => {\n    const { getAllByRole } = render(\n      <NativeBaseProvider\n        initialWindowMetrics={{\n          frame: { x: 0, y: 0, width: 0, height: 0 },\n          insets: { top: 0, left: 0, right: 0, bottom: 0 },\n        }}\n      >\n        <CheckBoxGroup />\n      </NativeBaseProvider>\n    );\n    const checkbox = getAllByRole('checkbox');\n    expect(checkbox.length).toBe(4);\n    expect(checkbox[0].props.accessibilityState.checked).toBe(true);\n    expect(checkbox[1].props.accessibilityState.checked).toBe(false);\n    expect(checkbox[2].props.accessibilityState.checked).toBe(true);\n    expect(checkbox[3].props.accessibilityState.checked).toBe(false);\n    fireEvent.press(checkbox[1]);\n    expect(checkbox[1].props.accessibilityState.checked).toBe(true);\n  });\n  it('can be disabled on checkBox', () => {\n    const { getAllByRole } = render(\n      <NativeBaseProvider\n        initialWindowMetrics={{\n          frame: { x: 0, y: 0, width: 0, height: 0 },\n          insets: { top: 0, left: 0, right: 0, bottom: 0 },\n        }}\n      >\n        <Checkbox value=\"Item 1 \">\n          <Text mx={2}>Item 1</Text>\n        </Checkbox>\n        <Checkbox value=\"Item 2 \" isDisabled>\n          <Text mx={2}>Item 2</Text>\n        </Checkbox>\n        <Checkbox value=\"Item 3 \">\n          <Text mx={2}>Item 3</Text>\n        </Checkbox>\n        <Checkbox colorScheme=\"orange\" value=\"Indeterminate Item \">\n          <Text mx={2}>Indeterminate Item</Text>\n        </Checkbox>\n      </NativeBaseProvider>\n    );\n    const checkbox = getAllByRole('checkbox');\n    expect(checkbox.length).toBe(4);\n    expect(checkbox[1].props.accessibilityState.disabled).toBe(true);\n  });\n  it('is checked on checkBox', () => {\n    const { getAllByRole } = render(\n      <NativeBaseProvider\n        initialWindowMetrics={{\n          frame: { x: 0, y: 0, width: 0, height: 0 },\n          insets: { top: 0, left: 0, right: 0, bottom: 0 },\n        }}\n      >\n        <Checkbox value=\"Item 1 \" isChecked>\n          <Text mx={2}>Item 1</Text>\n        </Checkbox>\n        <Checkbox value=\"Item 2 \" isDisabled>\n          <Text mx={2}>Item 2</Text>\n        </Checkbox>\n        <Checkbox value=\"Item 3 \">\n          <Text mx={2}>Item 3</Text>\n        </Checkbox>\n        <Checkbox colorScheme=\"orange\" value=\"Indeterminate Item \">\n          <Text mx={2}>Indeterminate Item</Text>\n        </Checkbox>\n      </NativeBaseProvider>\n    );\n    const checkbox = getAllByRole('checkbox');\n    expect(checkbox.length).toBe(4);\n    expect(checkbox[0].props.accessibilityState.checked).toBe(true);\n  });\n\n  /****   inDeterminant is not yet implemented in checkbox ****/\n\n  // it('inDeterminant on checkBoxGroup', () => {\n  //   const { getAllByRole } = render(\n  //     <NativeBaseProvider\n  //       initialWindowMetrics={{\n  //         frame: { x: 0, y: 0, width: 0, height: 0 },\n  //         insets: { top: 0, left: 0, right: 0, bottom: 0 },\n  //       }}\n  //     >\n  //       <CheckBox group={true} />\n  //     </NativeBaseProvider>\n  //   );\n  //   const checkbox = getAllByRole('checkbox');\n  //   expect(checkbox.length).toBe(2);\n  //   expect(checkbox[1].props.accessibilityState.checked).toBe('mixed');\n  // });\n\n  // it('inDeterminant on checkBox', () => {\n  //   const { getAllByRole } = render(\n  //     <NativeBaseProvider\n  //       initialWindowMetrics={{\n  //         frame: { x: 0, y: 0, width: 0, height: 0 },\n  //         insets: { top: 0, left: 0, right: 0, bottom: 0 },\n  //       }}\n  //     >\n  //       <CheckBox group={false} />\n  //     </NativeBaseProvider>\n  //   );\n  //   const checkbox = getAllByRole('checkbox');\n  //   expect(checkbox.length).toBe(2);\n  //   fireEvent.press(checkbox[1]);\n  //   expect(checkbox[1].props.accessibilityState.checked).toBe('mixed');\n  // });\n\n  it('onChange on checkBox', () => {\n    const { getAllByRole } = render(\n      <NativeBaseProvider\n        initialWindowMetrics={{\n          frame: { x: 0, y: 0, width: 0, height: 0 },\n          insets: { top: 0, left: 0, right: 0, bottom: 0 },\n        }}\n      >\n        <CheckBox />\n      </NativeBaseProvider>\n    );\n    const checkbox = getAllByRole('checkbox');\n    expect(checkbox.length).toBe(2);\n    fireEvent.press(checkbox[0]);\n    expect(checkbox[0].props.accessibilityState.checked).toBe(true);\n  });\n});\n"]}