{"version":3,"sources":["ModalContent.tsx"],"names":["React","memo","forwardRef","Box","usePropsResolution","ModalContext","Platform","useHasResponsiveProps","ModalContent","props","ref","resolvedProps","contentSize","initialFocusRef","finalFocusRef","handleClose","visible","useContext","useEffect","finalRefVal","current","focus","OS","undefined"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,IAAhB,EAAsBC,UAAtB,QAAwC,OAAxC;AACA,OAAOC,GAAP,MAA+B,sBAA/B;AACA,SAASC,kBAAT,QAAmC,gBAAnC;AACA,SAASC,YAAT,QAA6B,WAA7B;AACA,SAASC,QAAT,QAAyB,cAAzB;AACA,SAASC,qBAAT,QAAsC,sCAAtC;;AAEA,MAAMC,YAAY,GAAG,CAACC,KAAD,EAAmBC,GAAnB,KAAiC;AACpD,QAAMC,aAAa,GAAGP,kBAAkB,CAAC,cAAD,EAAiBK,KAAjB,CAAxC;AACA,QAAM;AACJG,IAAAA,WADI;AAEJC,IAAAA,eAFI;AAGJC,IAAAA,aAHI;AAIJC,IAAAA,WAJI;AAKJC,IAAAA;AALI,MAMFhB,KAAK,CAACiB,UAAN,CAAiBZ,YAAjB,CANJ;AAOAL,EAAAA,KAAK,CAACkB,SAAN,CAAgB,MAAM;AACpB,UAAMC,WAAW,GAAGL,aAAa,GAAGA,aAAa,CAACM,OAAjB,GAA2B,IAA5D;;AACA,QAAIJ,OAAJ,EAAa;AACX,UAAIH,eAAe,IAAIA,eAAe,CAACO,OAAvC,EAAgD;AAC9C;AACAP,QAAAA,eAAe,CAACO,OAAhB,CAAwBC,KAAxB;AACD;AACF,KALD,MAKO;AACL,UAAIF,WAAJ,EAAiB;AACf;AACAA,QAAAA,WAAW,CAACE,KAAZ;AACD;AACF;AACF,GAbD,EAaG,CAACR,eAAD,EAAkBC,aAAlB,EAAiCE,OAAjC,CAbH,EAToD,CAwBpD;;AACA,MAAIT,qBAAqB,CAACE,KAAD,CAAzB,EAAkC;AAChC,WAAO,IAAP;AACD;;AACD,sBACE,oBAAC,GAAD,eACMG,WADN,EAEMD,aAFN;AAGE,IAAA,GAAG,EAAED,GAHP;AAIE,IAAA,qBAAqB,EAAEK,WAJzB,CAKE;AALF;AAME,kBAAW,MANb,CAOE;AAPF;AAQE,IAAA,iBAAiB,EAAET,QAAQ,CAACgB,EAAT,KAAgB,KAAhB,GAAwB,QAAxB,GAAmCC,SARxD;AASE,IAAA,wBAAwB;AAT1B,KADF;AAaD,CAzCD;;AA2CA,4BAAetB,IAAI,eAACC,UAAU,CAACM,YAAD,CAAX,CAAnB","sourcesContent":["import React, { memo, forwardRef } from 'react';\nimport Box, { IBoxProps } from '../../primitives/Box';\nimport { usePropsResolution } from '../../../hooks';\nimport { ModalContext } from './Context';\nimport { Platform } from 'react-native';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\n\nconst ModalContent = (props: IBoxProps, ref?: any) => {\n  const resolvedProps = usePropsResolution('ModalContent', props);\n  const {\n    contentSize,\n    initialFocusRef,\n    finalFocusRef,\n    handleClose,\n    visible,\n  } = React.useContext(ModalContext);\n  React.useEffect(() => {\n    const finalRefVal = finalFocusRef ? finalFocusRef.current : null;\n    if (visible) {\n      if (initialFocusRef && initialFocusRef.current) {\n        //@ts-ignore\n        initialFocusRef.current.focus();\n      }\n    } else {\n      if (finalRefVal) {\n        //@ts-ignore\n        finalRefVal.focus();\n      }\n    }\n  }, [initialFocusRef, finalFocusRef, visible]);\n\n  //TODO: refactor for responsive prop\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n  return (\n    <Box\n      {...contentSize}\n      {...resolvedProps}\n      ref={ref}\n      onAccessibilityEscape={handleClose}\n      //@ts-ignore - web only\n      aria-modal=\"true\"\n      //@ts-ignore - web only\n      accessibilityRole={Platform.OS === 'web' ? 'dialog' : undefined}\n      accessibilityViewIsModal\n    />\n  );\n};\n\nexport default memo(forwardRef(ModalContent));\n"]}