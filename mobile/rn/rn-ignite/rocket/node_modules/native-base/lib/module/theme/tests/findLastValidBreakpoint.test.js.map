{"version":3,"sources":["findLastValidBreakpoint.test.tsx"],"names":["findLastValidBreakpoint","theme","describe","test","expect","breakpoints","toBe","base","sm","lg"],"mappings":"AAAA,SAASA,uBAAT,QAAwC,2BAAxC;AACA,SAASC,KAAT,QAAsB,aAAtB;AAEAC,QAAQ,CAAC,MAAD,EAAS,MAAM;AACrB;AACAC,EAAAA,IAAI,CAAC,mBAAD,EAAsB,MAAM;AAC9BC,IAAAA,MAAM,CAACJ,uBAAuB,CAAC,CAAC,CAAD,EAAI,CAAJ,CAAD,EAASC,KAAK,CAACI,WAAf,EAA4B,CAA5B,CAAxB,CAAN,CAA8DC,IAA9D,CAAmE,CAAnE;AACD,GAFG,CAAJ;AAGAH,EAAAA,IAAI,CAAC,oBAAD,EAAuB,MAAM;AAC/BC,IAAAA,MAAM,CAACJ,uBAAuB,CAAC,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAAD,EAAYC,KAAK,CAACI,WAAlB,EAA+B,CAA/B,CAAxB,CAAN,CAAiEC,IAAjE,CAAsE,CAAtE;AACD,GAFG,CAAJ;AAGAH,EAAAA,IAAI,CAAC,kBAAD,EAAqB,MAAM;AAC7BC,IAAAA,MAAM,CAACJ,uBAAuB,CAAC,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAAD,EAAYC,KAAK,CAACI,WAAlB,EAA+B,CAA/B,CAAxB,CAAN,CAAiEC,IAAjE,CAAsE,CAAtE;AACD,GAFG,CAAJ;AAGAH,EAAAA,IAAI,CAAC,oBAAD,EAAuB,MAAM;AAC/BC,IAAAA,MAAM,CACJJ,uBAAuB,CAAC;AAAEO,MAAAA,IAAI,EAAE,CAAR;AAAWC,MAAAA,EAAE,EAAE,CAAf;AAAkBC,MAAAA,EAAE,EAAE;AAAtB,KAAD,EAA4BR,KAAK,CAACI,WAAlC,EAA+C,CAA/C,CADnB,CAAN,CAEEC,IAFF,CAEO,CAFP;AAGD,GAJG,CAAJ;AAKAH,EAAAA,IAAI,CAAC,uBAAD,EAA0B,MAAM;AAClCC,IAAAA,MAAM,CACJJ,uBAAuB,CAAC;AAAEO,MAAAA,IAAI,EAAE,CAAR;AAAWC,MAAAA,EAAE,EAAE,CAAf;AAAkBC,MAAAA,EAAE,EAAE;AAAtB,KAAD,EAA4BR,KAAK,CAACI,WAAlC,EAA+C,CAA/C,CADnB,CAAN,CAEEC,IAFF,CAEO,CAFP;AAGD,GAJG,CAAJ;AAKAH,EAAAA,IAAI,CAAC,uBAAD,EAA0B,MAAM;AAClCC,IAAAA,MAAM,CACJJ,uBAAuB,CAAC;AAAEO,MAAAA,IAAI,EAAE,CAAR;AAAWC,MAAAA,EAAE,EAAE,CAAf;AAAkBC,MAAAA,EAAE,EAAE;AAAtB,KAAD,EAA4BR,KAAK,CAACI,WAAlC,EAA+C,CAA/C,CADnB,CAAN,CAEEC,IAFF,CAEO,CAFP;AAGD,GAJG,CAAJ;AAKAH,EAAAA,IAAI,CAAC,mBAAD,EAAsB,MAAM;AAC9BC,IAAAA,MAAM,CACJJ,uBAAuB,CAAC;AAAEO,MAAAA,IAAI,EAAE,CAAR;AAAWC,MAAAA,EAAE,EAAE,CAAf;AAAkBC,MAAAA,EAAE,EAAE;AAAtB,KAAD,EAA4BR,KAAK,CAACI,WAAlC,EAA+C,CAA/C,CADnB,CAAN,CAEEC,IAFF,CAEO,CAFP;AAGD,GAJG,CAAJ;AAKD,CA/BO,CAAR","sourcesContent":["import { findLastValidBreakpoint } from './../../theme/tools/utils';\nimport { theme } from '../../theme';\n\ndescribe('mode', () => {\n  // const theme = useTheme();\n  test('First array value', () => {\n    expect(findLastValidBreakpoint([1, 2], theme.breakpoints, 0)).toBe(1);\n  });\n  test('Middle array value', () => {\n    expect(findLastValidBreakpoint([1, 2, 3], theme.breakpoints, 1)).toBe(2);\n  });\n  test('Last array value', () => {\n    expect(findLastValidBreakpoint([1, 2, 3], theme.breakpoints, 2)).toBe(3);\n  });\n  test('First Object value', () => {\n    expect(\n      findLastValidBreakpoint({ base: 1, sm: 2, lg: 3 }, theme.breakpoints, 0)\n    ).toBe(1);\n  });\n  test('Middle object value 1', () => {\n    expect(\n      findLastValidBreakpoint({ base: 1, sm: 2, lg: 3 }, theme.breakpoints, 1)\n    ).toBe(2);\n  });\n  test('Middle object value 2', () => {\n    expect(\n      findLastValidBreakpoint({ base: 1, sm: 2, lg: 3 }, theme.breakpoints, 2)\n    ).toBe(2);\n  });\n  test('Last object value', () => {\n    expect(\n      findLastValidBreakpoint({ base: 1, sm: 2, lg: 3 }, theme.breakpoints, 3)\n    ).toBe(3);\n  });\n});\n"]}