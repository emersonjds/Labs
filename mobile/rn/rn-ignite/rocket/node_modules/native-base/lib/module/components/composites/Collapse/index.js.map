{"version":3,"sources":["index.tsx"],"names":["isNil","React","useEffect","useRef","forwardRef","LayoutAnimation","UIManager","Platform","Box","useHasResponsiveProps","usePrevious","value","ref","updatePrevious","newVal","current","Collapse","endingHeight","startingHeight","duration","isOpen","onAnimationEnd","onAnimationStart","props","OS","setLayoutAnimationEnabledExperimental","CustomLayoutLinear","create","type","Types","easeInEaseOut","property","Properties","opacity","update","defaultStartHeight","animatedStyle","height","animateView","callback","configureNext","wasOpen","size","setSize","useState","provideSize","layoutSize","_web","transition","e","nativeEvent","layout","memo"],"mappings":"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","sourcesContent":["import isNil from 'lodash.isnil';\nimport React, { useEffect, useRef, forwardRef } from 'react';\nimport { ViewStyle, LayoutAnimation, UIManager, Platform } from 'react-native';\nimport { Box } from '../../primitives';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\nimport type { InterfaceBoxProps } from '../../primitives/Box';\nexport type InterfaceCollapseProps = InterfaceBoxProps<ICollapseProps> & {\n  style?: ViewStyle;\n  endingHeight?: number;\n  startingHeight?: number;\n  duration?: number;\n  animateOpacity?: boolean;\n  isOpen?: boolean;\n  onAnimationEnd?: Function;\n  onAnimationStart?: Function;\n};\n\nexport type ICollapseProps = InterfaceCollapseProps;\n\nfunction usePrevious(value: any) {\n  const ref = useRef();\n  function updatePrevious(newVal: any) {\n    ref.current = newVal;\n  }\n  useEffect(() => {\n    updatePrevious(value);\n  }, [value]);\n  return { value: ref.current, updatePrevious };\n}\n\nconst Collapse = (\n  {\n    endingHeight,\n    startingHeight,\n    duration,\n    // animateOpacity,\n    isOpen,\n    onAnimationEnd,\n    onAnimationStart,\n    ...props\n  }: ICollapseProps,\n  ref?: any\n) => {\n  if (Platform.OS === 'android') {\n    UIManager.setLayoutAnimationEnabledExperimental &&\n      UIManager.setLayoutAnimationEnabledExperimental(true);\n  }\n  const CustomLayoutLinear = {\n    duration: duration ? duration : 400,\n    create: {\n      type: LayoutAnimation.Types.easeInEaseOut,\n      property: LayoutAnimation.Properties.opacity,\n    },\n    update: {\n      type: LayoutAnimation.Types.easeInEaseOut,\n    },\n  };\n  const defaultStartHeight: any = isOpen\n    ? endingHeight\n    : startingHeight\n    ? startingHeight\n    : 1;\n  let animatedStyle = { height: defaultStartHeight };\n  const animateView = () => {\n    if (onAnimationStart) {\n      onAnimationStart();\n    }\n    animatedStyle = {\n      height: isOpen ? endingHeight : defaultStartHeight,\n    };\n    let callback = onAnimationEnd ? onAnimationEnd : () => {};\n    LayoutAnimation.configureNext(CustomLayoutLinear, callback());\n  };\n\n  let wasOpen = usePrevious(isOpen);\n  if (!isNil(wasOpen.value) && wasOpen.value !== isOpen) {\n    animateView();\n    wasOpen.updatePrevious(isOpen);\n  }\n  const [size, setSize] = React.useState(startingHeight ?? 0);\n  const provideSize = (layoutSize: any) => {\n    setSize(layoutSize.height);\n  };\n  const _web = {\n    transition: `height ${duration ?? '400'}ms`,\n    height: isOpen ? endingHeight || size : startingHeight || 0,\n  };\n  //TODO: refactor for responsive prop\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n  return (\n    <Box\n      style={{ ...animatedStyle, ...(Platform.OS === 'web' && _web) }}\n      overflow=\"hidden\"\n      ref={ref}\n    >\n      <Box\n        //@ts-ignore\n        overflow={Platform.OS === 'web' ? 'auto' : 'scroll'}\n        onLayout={(e: any) => provideSize(e.nativeEvent.layout)}\n        {...props}\n      />\n    </Box>\n  );\n};\n\nexport default React.memo(forwardRef(Collapse));\n"]}