{"version":3,"sources":["utils.ts"],"names":["get","isNil","mergeWith","cloneDeep","themePropertyMap","getClosestBreakpoint","findLastValidBreakpoint","hasValidBreakpointFormat","extractInObject","useContrastText","extractProps","props","theme","componentTheme","currentBreakpoint","newProps","property","propValues","extractPropertyFromFunction","nestedProp","shadowProps","resolveValueWithBreakpoint","breakpoints","filterDefaultProps","defaultProps","resultProps","Object","keys","funcProps","isNested","some","key","mergeUnderscoreProps","_props","filter","propName","startsWith","forEach","bg","backgroundColor","textColor","color","values","breakpointTheme","calculateProps","colorModeProps","windowWidth","componentBaseStyle","baseStyle","objValue","srcValue","variant","variants","colorScheme","variantProps","extractedProps"],"mappings":"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","sourcesContent":["import get from 'lodash.get';\nimport isNil from 'lodash.isnil';\nimport mergeWith from 'lodash.mergewith';\nimport cloneDeep from 'lodash.clonedeep';\nimport { themePropertyMap } from './../../theme/base';\nimport {\n  getClosestBreakpoint,\n  findLastValidBreakpoint,\n  hasValidBreakpointFormat,\n  extractInObject,\n} from './../../theme/tools';\nimport { useContrastText } from '../useContrastText';\n\n/*\n Extract props from theme props and omit those from props\n*/\n/**\n *\n * @param props Props passed by the user\n * @param theme Theme object\n * @param colorModeProps `colorMode` object\n * @param componentTheme Theme for specific components\n * @param currentBreakpoint Current breakpoint values\n * @returns Extracting props from defaultProps while overriding the props that are already present\n */\nexport function extractProps(\n  props: any,\n  theme: any,\n  {},\n  componentTheme: any,\n  currentBreakpoint: number\n) {\n  let newProps: any = {};\n  for (let property in props) {\n    // If the property exists in themePropertyMap then get its value\n    if (themePropertyMap[property]) {\n      let propValues = extractPropertyFromFunction(\n        property,\n        props,\n        theme,\n        componentTheme\n      );\n      if (typeof propValues === 'string' || typeof propValues === 'number') {\n        newProps[property] = propValues;\n      } else if (!isNil(propValues)) {\n        for (let nestedProp in propValues) {\n          newProps[nestedProp] = get(\n            theme,\n            `${themePropertyMap[nestedProp]}.${propValues[nestedProp]}`,\n            propValues[nestedProp]\n          );\n        }\n      } else if (property === 'shadow') {\n        let shadowProps = theme[themePropertyMap[property]][props[property]];\n        if (!isNil(shadowProps)) {\n          newProps = { ...newProps, ...shadowProps };\n        }\n      } else {\n        newProps[property] = resolveValueWithBreakpoint(\n          props[property],\n          theme.breakpoints,\n          currentBreakpoint,\n          property\n        );\n      }\n    } else {\n      newProps[property] = resolveValueWithBreakpoint(\n        props[property],\n        theme.breakpoints,\n        currentBreakpoint,\n        property\n      );\n    }\n  }\n  return cloneDeep(newProps);\n}\n\n/*\nRemove props from defaultProps that are already present in props\n*/\nfunction filterDefaultProps(props: any, defaultProps: any) {\n  let [, resultProps] = extractInObject(defaultProps, Object.keys(props));\n  return resultProps;\n}\n\n/**\n * If property is functional in componentTheme, get its returned object\n *\n * @param property : name of the prop\n * @param props : all props\n * @param theme : provided theme without components\n * @param componentTheme : component specific theme\n * @returns\n */\nexport const extractPropertyFromFunction = (\n  property: string,\n  props: any,\n  theme: any,\n  componentTheme: any\n) => {\n  let propValues;\n  // Check if the entry in the theme is a function then calling it with all theme and props as params\n  if (\n    componentTheme &&\n    typeof componentTheme[themePropertyMap[property]] === 'function'\n  ) {\n    let funcProps = componentTheme[themePropertyMap[property]]({\n      theme,\n      ...props,\n    });\n    // Check if returned object from componentTheme is a nested object\n    let isNested: boolean = Object.keys(funcProps).some(function (key) {\n      return funcProps[key] && typeof funcProps[key] === 'object';\n    });\n    // If the returned value is nested object then find the property value in it, otherwise return the whole object\n    propValues = isNested\n      ? { ...get(funcProps, `${props[property]}`) }\n      : { ...funcProps };\n  } else {\n    // If the entry is any value other than function then return the whole object or value\n    propValues = get(\n      componentTheme,\n      `${themePropertyMap[property]}.${props[property]}`\n    );\n  }\n  return propValues;\n};\n\n/*\nMerge _props and apply contrastText color if not passed by theme or user\n*/\nexport function mergeUnderscoreProps(newProps: any, props: any) {\n  const _props = Object.keys(newProps).filter((propName) =>\n    propName.startsWith('_')\n  );\n  _props.forEach((propName: string) => {\n    // Adding color based on bg contrast if no color is given\n    const bg = newProps.bg ?? newProps.backgroundColor;\n    const textColor = bg\n      ? {\n          color: useContrastText(\n            bg,\n            newProps[propName]?.color ?? props[propName]?.color\n          ),\n        }\n      : {};\n    // Overriding calculated props with user added props\n    newProps[propName] = {\n      ...textColor,\n      ...newProps[propName],\n      ...props[propName],\n    };\n  });\n  return newProps;\n}\n\n/**\n *\n * Checks the property and resolves it if it has breakpoints\n * @param values : value from props\n * @param currentBreakpoint : current value for which breakpoint will be calculated\n * @param property : property name\n * @returns\n */\nexport const resolveValueWithBreakpoint = (\n  values: any,\n  breakpointTheme: any,\n  currentBreakpoint: number,\n  property: any\n) => {\n  if (hasValidBreakpointFormat(values, breakpointTheme, property)) {\n    // Check the last valid breakpoint value from all values\n    // If current breakpoint is `md` and we have `base` then `lg`, then last value will be taken(`base` in this case)\n    return findLastValidBreakpoint(values, breakpointTheme, currentBreakpoint);\n  } else {\n    return values;\n  }\n};\n\n/**\n * Takes all prop related data and returns the props that needs to be applied to the component\n *\n * @param theme Theme object\n * @param colorModeProps Color mode information\n * @param componentTheme Theme object for the specific component\n * @param props Props passed by the user\n * @param windowWidth Width of the current window\n * @returns props to be applied\n */\nexport function calculateProps(\n  theme: any,\n  colorModeProps: any,\n  componentTheme: any,\n  props: any,\n  windowWidth: any\n) {\n  let currentBreakpoint = getClosestBreakpoint(theme.breakpoints, windowWidth);\n  if (!props) {\n    props = {};\n  }\n\n  let newProps: any;\n  if (componentTheme) {\n    // Extracting props from defaultProps\n    newProps = extractProps(\n      filterDefaultProps(props, componentTheme.defaultProps),\n      theme,\n      colorModeProps,\n      componentTheme,\n      currentBreakpoint\n    );\n    // Extracting props from base style\n    let componentBaseStyle =\n      typeof componentTheme.baseStyle !== 'function'\n        ? componentTheme.baseStyle\n        : componentTheme.baseStyle({\n            theme,\n            ...newProps,\n            ...props,\n            ...colorModeProps,\n          });\n    newProps = mergeWith(\n      newProps,\n      componentBaseStyle,\n      // @ts-ignore\n      (objValue, srcValue, key) => {\n        if (!isNil(objValue)) {\n          delete newProps[key];\n        }\n      }\n    );\n\n    const variant =\n      props.variant || get(componentTheme, 'defaultProps.variant');\n    // Extracting props from variant\n    if (\n      variant &&\n      componentTheme.variants &&\n      componentTheme.variants[variant]\n    ) {\n      const colorScheme =\n        props.colorScheme || get(componentTheme, 'defaultProps.colorScheme');\n      let variantProps = componentTheme.variants[variant]({\n        ...props,\n        ...newProps,\n        colorScheme,\n        theme,\n        ...colorModeProps,\n      });\n      variantProps = extractProps(\n        variantProps,\n        theme,\n        colorModeProps,\n        componentTheme,\n        currentBreakpoint\n      );\n      // added this to handle order of props\n      newProps = mergeWith(\n        newProps,\n        variantProps,\n        // @ts-ignore\n        (objValue, srcValue, key) => {\n          if (!isNil(objValue)) {\n            delete newProps[key];\n          }\n        }\n      );\n      delete newProps.variant;\n      delete newProps.colorScheme;\n    }\n  }\n  // Extracting props from normal props\n  let extractedProps = extractProps(\n    props,\n    theme,\n    colorModeProps,\n    componentTheme,\n    currentBreakpoint\n  );\n  // added this to handle order of props\n  // @ts-ignore\n  newProps = mergeWith(newProps, extractedProps, (objValue, srcValue, key) => {\n    if (!isNil(objValue)) {\n      delete newProps[key];\n    }\n  });\n  newProps = mergeUnderscoreProps(newProps, props);\n  return newProps;\n}\n"]}