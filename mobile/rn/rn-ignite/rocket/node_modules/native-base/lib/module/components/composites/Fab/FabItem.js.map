{"version":3,"sources":["FabItem.tsx"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA","sourcesContent":["// import React from 'react';\n// import { Button, Box } from '../../primitives';\n// import { FabContext } from './context';\n// import type { IFabItemProps } from './props';\n// import { Animated } from 'react-native';\n// import { omitUndefined } from '../../../theme/tools/utils';\n\n// const FabItem = ({ children, ...props }: IFabItemProps) => {\n//   const slideAnim = React.useRef(new Animated.Value(0)).current;\n//   const { onPress, index = 0, ...newProps } = omitUndefined(props);\n//   const { isOpen, onToggle, slide }: any = React.useContext(FabContext);\n//   const [size, setSize] = React.useState(40);\n//   const slideStyle = {\n//     down: 'top',\n//     up: 'bottom',\n//     right: 'left',\n//     left: 'right',\n//   };\n\n//   const provideSize = (layoutSize: any) => {\n//     setSize(layoutSize.width + 10);\n//   };\n\n//   const pressHandler = () => {\n//     onToggle();\n//     onPress && onPress();\n//   };\n\n//   const slideIn = () => {\n//     Animated.timing(slideAnim, {\n//       toValue: 0,\n//       duration: 500,\n//       useNativeDriver: true,\n//     }).start();\n//   };\n\n//   let animToValue = index * size;\n//   animToValue =\n//     slide === 'left' || slide === 'up' ? animToValue * -1 : animToValue;\n//   const slideOut = () => {\n//     Animated.timing(slideAnim, {\n//       toValue: animToValue,\n//       duration: 500,\n//       useNativeDriver: true,\n//     }).start();\n//   };\n\n//   isOpen ? slideOut() : slideIn();\n//   const animatioStyle = {\n//     top: { transform: [{ translateY: slideAnim }] },\n//     right: { transform: [{ translateX: slideAnim }] },\n//     bottom: { transform: [{ translateY: slideAnim }] },\n//     left: { transform: [{ translateX: slideAnim }] },\n//   };\n\n//   return (\n//     // @ts-ignore\n//     <Animated.View style={animatioStyle[slideStyle[slide]]}>\n//       <Box\n//         position=\"absolute\"\n//         top={0}\n//         right={0}\n//         onLayout={(e) => provideSize(e.nativeEvent.layout)}\n//         zIndex={9999 - index}\n//       >\n//         <Button\n//           variant=\"unstyled\"\n//           bg=\"default.200\"\n//           borderRadius=\"full\"\n//           justifyContent=\"center\"\n//           alignItems=\"center\"\n//           {...newProps}\n//           onPress={pressHandler}\n//           p={1}\n//         >\n//           {children}\n//         </Button>\n//       </Box>\n//     </Animated.View>\n//   );\n// };\n\n// export default FabItem;\n"]}