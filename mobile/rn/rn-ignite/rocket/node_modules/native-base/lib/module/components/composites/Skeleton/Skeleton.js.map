{"version":3,"sources":["Skeleton.tsx"],"names":["React","memo","forwardRef","Animated","Platform","usePropsResolution","canUseDom","Box","useHasResponsiveProps","useToken","Skeleton","props","ref","isDomUsable","children","startColor","endColor","resolvedProps","blinkAnim","useRef","Value","current","tokenisedStartColor","useEffect","blink","sequence","timing","toValue","duration","fadeDuration","speed","useNativeDriver","OS","loop","start","skeletonStyle","skeleton","height","width","backgroundColor","opacity","isLoaded"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,IAAhB,EAAsBC,UAAtB,QAAwC,OAAxC;AACA,SAASC,QAAT,EAAmBC,QAAnB,QAAmC,cAAnC;AACA,SAASC,kBAAT,QAAmC,gBAAnC;AACA,SAASC,SAAT,QAA0B,gBAA1B;AACA,OAAOC,GAAP,MAAgB,sBAAhB;AAEA,SAASC,qBAAT,QAAsC,sCAAtC;AACA,SAASC,QAAT,QAAyB,yBAAzB;;AAEA,MAAMC,QAAQ,GAAG,CAACC,KAAD,EAAwBC,GAAxB,KAAqC;AACpD,QAAMC,WAAW,GAAGP,SAAS,EAA7B;AACA,QAAM;AACJQ,IAAAA,QADI;AAEJC,IAAAA,UAFI;AAGJC,IAAAA,QAHI;AAIJ,OAAGC;AAJC,MAKFZ,kBAAkB,CAAC,UAAD,EAAaM,KAAb,CALtB,CAFoD,CAQpD;;AACA,QAAMO,SAAS,GAAGlB,KAAK,CAACmB,MAAN,CAAa,IAAIhB,QAAQ,CAACiB,KAAb,CAAmB,CAAnB,CAAb,EAAoCC,OAAtD;AACA,QAAMC,mBAAmB,GAAGb,QAAQ,CAAC,QAAD,EAAWM,UAAX,CAApC,CAVoD,CAYpD;;AACAf,EAAAA,KAAK,CAACuB,SAAN,CAAgB,MAAM;AACpB;AACA,QAAIV,WAAJ,EAAiB;AACf,YAAMW,KAAK,GAAGrB,QAAQ,CAACsB,QAAT,CAAkB,CAC9BtB,QAAQ,CAACuB,MAAT,CAAgBR,SAAhB,EAA2B;AACzBS,QAAAA,OAAO,EAAE,CADgB;AAEzBC,QAAAA,QAAQ,EACNX,aAAa,CAACY,YAAd,GAA6B,KAA7B,IAAsC,IAAIZ,aAAa,CAACa,KAAxD,CAHuB;AAIzBC,QAAAA,eAAe,EAAE3B,QAAQ,CAAC4B,EAAT,KAAgB;AAJR,OAA3B,CAD8B,EAO9B7B,QAAQ,CAACuB,MAAT,CAAgBR,SAAhB,EAA2B;AACzBS,QAAAA,OAAO,EAAE,CADgB;AAEzBC,QAAAA,QAAQ,EACNX,aAAa,CAACY,YAAd,GAA6B,KAA7B,IAAsC,IAAIZ,aAAa,CAACa,KAAxD,CAHuB;AAIzBC,QAAAA,eAAe,EAAE3B,QAAQ,CAAC4B,EAAT,KAAgB;AAJR,OAA3B,CAP8B,CAAlB,CAAd;AAcA7B,MAAAA,QAAQ,CAAC8B,IAAT,CAAcT,KAAd,EAAqBU,KAArB;AACD;AACF,GAnBD,EAmBG,CAAChB,SAAD,EAAYL,WAAZ,EAAyBI,aAAzB,CAnBH;AAqBA,QAAMkB,aAAkB,GAAG;AACzBC,IAAAA,QAAQ,EAAE;AACRC,MAAAA,MAAM,EAAE,MADA;AAERC,MAAAA,KAAK,EAAE,MAFC;AAGRC,MAAAA,eAAe,EAAEjB,mBAHT;AAIRkB,MAAAA,OAAO,EAAEtB,SAJD,CAIY;;AAJZ;AADe,GAA3B,CAlCoD,CA2CpD;;AACA,MAAIV,qBAAqB,CAACG,KAAD,CAAzB,EAAkC;AAChC,WAAO,IAAP;AACD;;AAED,SAAOM,aAAa,CAACwB,QAAd,GACL3B,QADK,gBAGL,oBAAC,GAAD;AAAK,IAAA,EAAE,EAAEE;AAAT,KAAuBC,aAAvB;AAAsC,IAAA,GAAG,EAAEL;AAA3C,mBACE,oBAAC,QAAD,CAAU,IAAV;AAAe,IAAA,KAAK,EAAEuB,aAAa,CAACC;AAApC,IADF,CAHF;AAOD,CAvDD;;AAyDA,4BAAenC,IAAI,eAACC,UAAU,CAACQ,QAAD,CAAX,CAAnB","sourcesContent":["import React, { memo, forwardRef } from 'react';\nimport { Animated, Platform } from 'react-native';\nimport { usePropsResolution } from '../../../hooks';\nimport { canUseDom } from '../../../utils';\nimport Box from '../../primitives/Box';\nimport type { ISkeletonProps } from './types';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\nimport { useToken } from '../../../hooks/useToken';\n\nconst Skeleton = (props: ISkeletonProps, ref: any) => {\n  const isDomUsable = canUseDom();\n  const {\n    children,\n    startColor,\n    endColor,\n    ...resolvedProps\n  } = usePropsResolution('Skeleton', props);\n  // Setting blink Animation\n  const blinkAnim = React.useRef(new Animated.Value(0)).current;\n  const tokenisedStartColor = useToken('colors', startColor);\n\n  // Generating blink animation in a sequence\n  React.useEffect(() => {\n    //Check if window is loaded\n    if (isDomUsable) {\n      const blink = Animated.sequence([\n        Animated.timing(blinkAnim, {\n          toValue: 1,\n          duration:\n            resolvedProps.fadeDuration * 10000 * (1 / resolvedProps.speed),\n          useNativeDriver: Platform.OS !== 'web',\n        }),\n        Animated.timing(blinkAnim, {\n          toValue: 0,\n          duration:\n            resolvedProps.fadeDuration * 10000 * (1 / resolvedProps.speed),\n          useNativeDriver: Platform.OS !== 'web',\n        }),\n      ]);\n      Animated.loop(blink).start();\n    }\n  }, [blinkAnim, isDomUsable, resolvedProps]);\n\n  const skeletonStyle: any = {\n    skeleton: {\n      height: '100%',\n      width: '100%',\n      backgroundColor: tokenisedStartColor,\n      opacity: blinkAnim, // Bind opacity to animated value\n    },\n  };\n\n  //TODO: refactor for responsive prop\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n\n  return resolvedProps.isLoaded ? (\n    children\n  ) : (\n    <Box bg={endColor} {...resolvedProps} ref={ref}>\n      <Animated.View style={skeletonStyle.skeleton} />\n    </Box>\n  );\n};\n\nexport default memo(forwardRef(Skeleton));\n"]}