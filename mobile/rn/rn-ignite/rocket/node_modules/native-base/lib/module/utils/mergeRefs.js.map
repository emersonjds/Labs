{"version":3,"sources":["mergeRefs.ts"],"names":["mergeRefs","refs","value","forEach","ref","current","composeEventHandlers","originalEventHandler","ourEventHandler","handleEvent","event"],"mappings":"AAAA,OAAO,SAASA,SAAT,CACLC,IADK,EAEiB;AACtB,SAAQC,KAAD,IAAW;AAChBD,IAAAA,IAAI,CAACE,OAAL,CAAcC,GAAD,IAAS;AACpB,UAAI,OAAOA,GAAP,KAAe,UAAnB,EAA+B;AAC7BA,QAAAA,GAAG,CAACF,KAAD,CAAH;AACD,OAFD,MAEO,IAAIE,GAAG,IAAI,IAAX,EAAiB;AACrBA,QAAAA,GAAD,CAA0CC,OAA1C,GAAoDH,KAApD;AACD;AACF,KAND;AAOD,GARD;AASD;AAED,OAAO,SAASI,oBAAT,CACLC,oBADK,EAELC,eAFK,EAGL;AACA,SAAO,SAASC,WAAT,CAAqBC,KAArB,EAA+B;AACpCH,IAAAA,oBAAoB,SAApB,IAAAA,oBAAoB,WAApB,YAAAA,oBAAoB,CAAGG,KAAH,CAApB;AACAF,IAAAA,eAAe,SAAf,IAAAA,eAAe,WAAf,YAAAA,eAAe,CAAGE,KAAH,CAAf;AACD,GAHD;AAID","sourcesContent":["export function mergeRefs<T = any>(\n  refs: Array<React.MutableRefObject<T> | React.LegacyRef<T>>\n): React.RefCallback<T> {\n  return (value) => {\n    refs.forEach((ref) => {\n      if (typeof ref === 'function') {\n        ref(value);\n      } else if (ref != null) {\n        (ref as React.MutableRefObject<T | null>).current = value;\n      }\n    });\n  };\n}\n\nexport function composeEventHandlers<E>(\n  originalEventHandler?: null | ((event: E) => void),\n  ourEventHandler?: (event: E) => void\n) {\n  return function handleEvent(event: E) {\n    originalEventHandler?.(event);\n    ourEventHandler?.(event);\n  };\n}\n"]}