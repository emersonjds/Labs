{"version":3,"sources":["index.tsx"],"names":["React","memo","forwardRef","Pressable","Icon","usePropsResolution","useHasResponsiveProps","composeEventHandlers","useHover","useFocus","useIsPressed","useFocusRing","IconButton","icon","children","isHovered","isHoveredProp","isPressed","isPressedProp","isFocused","isFocusedProp","isFocusVisible","isFocusVisibleProp","isDisabled","props","ref","hoverProps","pressableProps","focusProps","focusRingProps","_icon","onPressIn","onPressOut","onHoverIn","onHoverOut","onFocus","onBlur","resolvedProps","clonedIcon","cloneElement"],"mappings":"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","sourcesContent":["import React, { memo, forwardRef } from 'react';\nimport { Pressable } from '../../primitives/Pressable';\nimport { Icon } from '../../primitives/Icon';\nimport { usePropsResolution } from '../../../hooks/useThemeProps';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\nimport { composeEventHandlers } from '../../../utils';\nimport type { IIconButtonProps } from './types';\nimport {\n  useHover,\n  useFocus,\n  useIsPressed,\n} from '../../primitives/Pressable/Pressable';\nimport { useFocusRing } from '@react-native-aria/focus';\n\nconst IconButton = (\n  {\n    icon,\n    children,\n    isHovered: isHoveredProp,\n    isPressed: isPressedProp,\n    isFocused: isFocusedProp,\n    isFocusVisible: isFocusVisibleProp,\n    isDisabled,\n    ...props\n  }: IIconButtonProps,\n  ref: any\n) => {\n  const { hoverProps, isHovered } = useHover();\n  const { pressableProps, isPressed } = useIsPressed();\n  const { focusProps, isFocused } = useFocus();\n  const { isFocusVisible, focusProps: focusRingProps }: any = useFocusRing();\n\n  const {\n    _icon,\n    onPressIn,\n    onPressOut,\n    onHoverIn,\n    onHoverOut,\n    onFocus,\n    onBlur,\n    ...resolvedProps\n  } = usePropsResolution('IconButton', props, {\n    isHovered: isHoveredProp || isHovered,\n    isPressed: isPressedProp || isPressed,\n    isFocused: isFocusedProp || isFocused,\n    isFocusVisible: isFocusVisibleProp || isFocusVisible,\n    isDisabled,\n  });\n\n  let clonedIcon;\n  if (icon) {\n    clonedIcon = React.cloneElement(icon, {\n      ..._icon,\n      ...icon?.props,\n      ...props._icon,\n    });\n  }\n\n  //TODO: refactor for responsive prop\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n\n  return (\n    <Pressable\n      accessibilityRole=\"button\"\n      ref={ref}\n      onPressIn={composeEventHandlers(onPressIn, pressableProps.onPressIn)}\n      onPressOut={composeEventHandlers(onPressOut, pressableProps.onPressOut)}\n      // @ts-ignore - web only\n      onHoverIn={composeEventHandlers(onHoverIn, hoverProps.onHoverIn)}\n      // @ts-ignore - web only\n      onHoverOut={composeEventHandlers(onHoverOut, hoverProps.onHoverOut)}\n      // @ts-ignore - web only\n      onFocus={composeEventHandlers(\n        composeEventHandlers(onFocus, focusProps.onFocus),\n        focusRingProps.onFocus\n      )}\n      // @ts-ignore - web only\n      onBlur={composeEventHandlers(\n        composeEventHandlers(onBlur, focusProps.onBlur),\n        focusRingProps.onBlur\n      )}\n      {...resolvedProps}\n    >\n      {clonedIcon || <Icon {..._icon}>{children}</Icon>}\n    </Pressable>\n  );\n};\n\nexport default memo(forwardRef(IconButton));\nexport type { IIconButtonProps };\n"]}