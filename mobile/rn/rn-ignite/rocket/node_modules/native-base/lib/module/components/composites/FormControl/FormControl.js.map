{"version":3,"sources":["FormControl.tsx"],"names":["React","memo","forwardRef","usePropsResolution","Box","useFormControlProvider","FormControlContext","useHasResponsiveProps","FormControl","props","ref","htmlProps","context","resolvedProps","isDisabled","isReadOnly","isInvalid"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,IAAhB,EAAsBC,UAAtB,QAAwC,OAAxC;AACA,SAASC,kBAAT,QAAmC,8BAAnC;AACA,OAAOC,GAAP,MAAgB,sBAAhB;AAEA,SAASC,sBAAT,EAAiCC,kBAAjC,QAA2D,kBAA3D;AACA,SAASC,qBAAT,QAAsC,sCAAtC;;AAEA,MAAMC,WAAW,GAAG,CAACC,KAAD,EAA2BC,GAA3B,KAAwC;AAC1D,QAAM;AAAEC,IAAAA,SAAF;AAAa,OAAGC;AAAhB,MAA4BP,sBAAsB,CAACI,KAAD,CAAxD;AACA,QAAMI,aAAa,GAAGV,kBAAkB,CAAC,aAAD,EAAgBM,KAAhB,EAAuB;AAC7DK,IAAAA,UAAU,EAAEF,OAAO,CAACE,UADyC;AAE7DC,IAAAA,UAAU,EAAEH,OAAO,CAACG,UAFyC;AAG7DC,IAAAA,SAAS,EAAEJ,OAAO,CAACI,SAH0C,CAI7D;;AAJ6D,GAAvB,CAAxC,CAF0D,CAQ1D;;AACA,MAAIT,qBAAqB,CAACE,KAAD,CAAzB,EAAkC;AAChC,WAAO,IAAP;AACD;;AACD,sBACE,oBAAC,kBAAD,CAAoB,QAApB;AAA6B,IAAA,KAAK,EAAEG;AAApC,kBACE,oBAAC,GAAD,eAASC,aAAT,EAA4BF,SAA5B;AAAuC,IAAA,GAAG,EAAED;AAA5C,KADF,CADF;AAKD,CAjBD;;AAmBA,4BAAeT,IAAI,eAACC,UAAU,CAACM,WAAD,CAAX,CAAnB","sourcesContent":["import React, { memo, forwardRef } from 'react';\nimport { usePropsResolution } from '../../../hooks/useThemeProps';\nimport Box from '../../primitives/Box';\nimport type { IFormControlProps } from './types';\nimport { useFormControlProvider, FormControlContext } from './useFormControl';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\n\nconst FormControl = (props: IFormControlProps, ref: any) => {\n  const { htmlProps, ...context } = useFormControlProvider(props);\n  const resolvedProps = usePropsResolution('FormControl', props, {\n    isDisabled: context.isDisabled,\n    isReadOnly: context.isReadOnly,\n    isInvalid: context.isInvalid,\n    // isRequired: context.isRequired,\n  });\n  //TODO: refactor for responsive prop\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n  return (\n    <FormControlContext.Provider value={context}>\n      <Box {...resolvedProps} {...htmlProps} ref={ref} />\n    </FormControlContext.Provider>\n  );\n};\n\nexport default memo(forwardRef(FormControl));\n"]}