{"version":3,"sources":["useKeyboardBottomInset.ts"],"names":["React","Keyboard","Platform","useKeyboardBottomInset","bottom","setBottom","useState","subscriptions","useRef","useEffect","onKeyboardChange","e","startCoordinates","endCoordinates","screenY","height","OS","current","addListener","forEach","subscription","remove"],"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,QAAT,EAAmBC,QAAnB,QAAkD,cAAlD;AAEA,OAAO,MAAMC,sBAAsB,GAAG,MAAM;AAC1C,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBL,KAAK,CAACM,QAAN,CAAe,CAAf,CAA5B;AACA,QAAMC,aAAa,GAAGP,KAAK,CAACQ,MAAN,CAAoB,EAApB,CAAtB;AAEAR,EAAAA,KAAK,CAACS,SAAN,CAAgB,MAAM;AACpB,aAASC,gBAAT,CAA0BC,CAA1B,EAA4C;AAC1C,UACEA,CAAC,CAACC,gBAAF,IACAD,CAAC,CAACE,cAAF,CAAiBC,OAAjB,IAA4BH,CAAC,CAACC,gBAAF,CAAmBE,OAFjD,EAIET,SAAS,CAACM,CAAC,CAACE,cAAF,CAAiBE,MAAjB,GAA0B,CAA3B,CAAT,CAJF,KAKKV,SAAS,CAAC,CAAD,CAAT;AACN;;AAED,QAAIH,QAAQ,CAACc,EAAT,KAAgB,KAApB,EAA2B;AACzBT,MAAAA,aAAa,CAACU,OAAd,GAAwB,CACtBhB,QAAQ,CAACiB,WAAT,CAAqB,yBAArB,EAAgDR,gBAAhD,CADsB,CAAxB;AAGD,KAJD,MAIO;AACLH,MAAAA,aAAa,CAACU,OAAd,GAAwB,CACtBhB,QAAQ,CAACiB,WAAT,CAAqB,iBAArB,EAAwCR,gBAAxC,CADsB,EAEtBT,QAAQ,CAACiB,WAAT,CAAqB,iBAArB,EAAwCR,gBAAxC,CAFsB,CAAxB;AAID;;AACD,WAAO,MAAM;AACXH,MAAAA,aAAa,CAACU,OAAd,CAAsBE,OAAtB,CAA+BC,YAAD,IAAkB;AAC9CA,QAAAA,YAAY,CAACC,MAAb;AACD,OAFD;AAGD,KAJD;AAKD,GAzBD,EAyBG,CAAChB,SAAD,EAAYE,aAAZ,CAzBH;AA2BA,SAAOH,MAAP;AACD,CAhCM","sourcesContent":["import * as React from 'react';\nimport { Keyboard, Platform, KeyboardEvent } from 'react-native';\n\nexport const useKeyboardBottomInset = () => {\n  const [bottom, setBottom] = React.useState(0);\n  const subscriptions = React.useRef<any[]>([]);\n\n  React.useEffect(() => {\n    function onKeyboardChange(e: KeyboardEvent) {\n      if (\n        e.startCoordinates &&\n        e.endCoordinates.screenY <= e.startCoordinates.screenY\n      )\n        setBottom(e.endCoordinates.height / 2);\n      else setBottom(0);\n    }\n\n    if (Platform.OS === 'ios') {\n      subscriptions.current = [\n        Keyboard.addListener('keyboardWillChangeFrame', onKeyboardChange),\n      ];\n    } else {\n      subscriptions.current = [\n        Keyboard.addListener('keyboardDidHide', onKeyboardChange),\n        Keyboard.addListener('keyboardDidShow', onKeyboardChange),\n      ];\n    }\n    return () => {\n      subscriptions.current.forEach((subscription) => {\n        subscription.remove();\n      });\n    };\n  }, [setBottom, subscriptions]);\n\n  return bottom;\n};\n"]}