{"version":3,"sources":["index.tsx"],"names":["React","memo","forwardRef","useRef","usePropsResolution","useHover","mergeRefs","makeStyledComponent","useResolvedFontFamily","Text","NativeText","useHasResponsiveProps","StyledText","TextAncestorContext","createContext","children","props","ref","hasTextAncestor","useContext","isTruncated","noOfLines","bold","italic","sub","highlight","underline","strikeThrough","fontFamily","propFontFamily","fontWeight","propFontWeight","fontStyle","propFontStyle","_hover","fontSize","numberOfLines","resolvedProps","resolveResponsively","componentTheme","undefined","_ref","isHovered","resolvedFontFamily","propsToSpread","bg","textDecorationLine"],"mappings":"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","sourcesContent":["import React, { memo, forwardRef, useRef } from 'react';\nimport { usePropsResolution } from '../../../hooks/useThemeProps';\nimport type { ITextProps } from './types';\nimport { useHover } from '@react-native-aria/interactions';\nimport { mergeRefs } from '../../../utils/mergeRefs';\nimport { makeStyledComponent } from '../../../utils/styled';\nimport { useResolvedFontFamily } from '../../../hooks/useResolvedFontFamily';\nimport { Text as NativeText } from 'react-native';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\n\nconst StyledText = makeStyledComponent(NativeText);\n// To have a RN compatible behaviour, we'll inherit parent text styles as base style\nconst TextAncestorContext = React.createContext(false);\n\nconst Text = ({ children, ...props }: ITextProps, ref: any) => {\n  const hasTextAncestor = React.useContext(TextAncestorContext);\n\n  const {\n    isTruncated,\n    noOfLines,\n    bold,\n    italic,\n    sub,\n    highlight,\n    underline,\n    strikeThrough,\n    fontFamily: propFontFamily,\n    fontWeight: propFontWeight,\n    fontStyle: propFontStyle,\n    _hover,\n    fontSize,\n    numberOfLines,\n    ...resolvedProps\n  } = usePropsResolution(\n    'Text',\n    props,\n    {},\n    {\n      resolveResponsively: ['noOfLines', 'numberOfLines'],\n      // We override the component base theme if text has an ancestor.\n      componentTheme: hasTextAncestor ? {} : undefined,\n    }\n  );\n\n  const _ref = useRef(null);\n  // TODO: might have to add this condition\n  const { isHovered } = useHover({}, _hover ? _ref : null);\n  // const { isHovered } = useHover({}, _ref);\n  let fontFamily = propFontFamily;\n  const fontStyle = italic ? 'italic' : propFontStyle;\n  const fontWeight = bold ? 'bold' : propFontWeight;\n\n  const resolvedFontFamily = useResolvedFontFamily({\n    fontFamily,\n    fontWeight: fontWeight ?? (hasTextAncestor ? undefined : 400),\n    fontStyle: fontStyle ?? (hasTextAncestor ? undefined : 'normal'),\n  });\n\n  if (resolvedFontFamily) {\n    fontFamily = resolvedFontFamily;\n  }\n\n  //TODO: refactor for responsive prop\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n\n  const propsToSpread = {\n    ...resolvedProps,\n    numberOfLines:\n      numberOfLines || noOfLines\n        ? numberOfLines || noOfLines\n        : isTruncated\n        ? 1\n        : undefined,\n    ...resolvedFontFamily,\n    bg: highlight ? 'warning.300' : resolvedProps.bg,\n    textDecorationLine:\n      underline && strikeThrough\n        ? 'underline line-through'\n        : underline\n        ? 'underline'\n        : strikeThrough\n        ? 'line-through'\n        : resolvedProps.textDecorationLine,\n    fontSize: sub ? 10 : fontSize,\n    ref: mergeRefs([ref, _ref]),\n    ...(isHovered && _hover),\n  };\n\n  return hasTextAncestor ? (\n    <StyledText {...propsToSpread}>{children}</StyledText>\n  ) : (\n    <TextAncestorContext.Provider value={true}>\n      <StyledText {...propsToSpread}>{children}</StyledText>\n    </TextAncestorContext.Provider>\n  );\n};\n\nexport default memo(forwardRef(Text));\nexport type { ITextProps };\n"]}