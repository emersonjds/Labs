{"version":3,"sources":["Tabs.tsx"],"names":["React","Box","useThemeProps","TabsContext","Item","useTabsState","TabViews","TabBar","useTabs","mergeRefs","useHasResponsiveProps","getTabsAndBars","children","bars","views","items","Children","toArray","tabBarProps","props","ref","undefined","tabViewsProps","forEach","item","type","displayName","concat","convertToCollectionItems","map","bar","index","textValue","accessibilityLabel","Tabs","onChange","activeTabStyle","inactiveTabStyle","activeIconProps","inactiveIconProps","tabBarStyle","isFitted","align","newProps","collectionChildren","mappedProps","defaultSelectedKey","defaultIndex","toString","selectedKey","onSelectionChange","e","parseInt","keyboardActivation","state","setAlign","tablistRef","useRef","tabListProps","tabPanelProps","selectedItem","memo","forwardRef"],"mappings":"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","sourcesContent":["import React from 'react';\nimport Box from '../../primitives/Box';\nimport type { ITabsProps } from './types';\nimport { useThemeProps } from '../../../hooks';\nimport { TabsContext } from './Context';\nimport { Item } from '@react-stately/collections';\nimport { useTabsState } from '@react-stately/tabs';\nimport TabViews from './TabViews';\nimport TabBar from './TabBar';\nimport { useTabs } from '@react-native-aria/tabs';\nimport { mergeRefs } from '../../../utils';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\nconst getTabsAndBars = (children: any) => {\n  let bars: any = [];\n  let views: any = [];\n  let items = React.Children.toArray(children);\n  let tabBarProps: any = { props: {}, ref: undefined };\n  let tabViewsProps = { props: {}, ref: undefined };\n  items.forEach((item: any) => {\n    if (item.type) {\n      if (item.type.displayName === 'TabBar') {\n        bars = bars.concat(item.props.children);\n        tabBarProps = { props: item.props, ref: item.ref };\n      } else if (item.type.displayName === 'TabViews') {\n        views = views.concat(item.props.children);\n        tabViewsProps = { props: item.props, ref: item.ref };\n      }\n    }\n  });\n  return { views, bars, tabViewsProps, tabBarProps };\n};\nconst convertToCollectionItems = (children: any) => {\n  const { views, bars } = getTabsAndBars(children);\n  return bars.map((bar: any, index: number) => {\n    let textValue;\n    if (bar.props.accessibilityLabel) {\n      textValue = bar.props.accessibilityLabel;\n    } else if (typeof bar.props.children === 'string') {\n      textValue = bar.props.children;\n    }\n    return (\n      <Item key={index} title={bar} textValue={textValue}>\n        {views[index]}\n      </Item>\n    );\n  });\n};\nconst Tabs = ({ children, ...props }: ITabsProps, ref: any) => {\n  const {\n    onChange,\n    activeTabStyle,\n    inactiveTabStyle,\n    activeIconProps,\n    inactiveIconProps,\n    tabBarStyle,\n    isFitted,\n    align,\n    ...newProps\n  } = useThemeProps('Tabs', props);\n  // useTabsState needs collection children.\n  const collectionChildren = convertToCollectionItems(children);\n  const { tabBarProps, tabViewsProps } = getTabsAndBars(children);\n  const mappedProps = {\n    children: collectionChildren,\n    defaultSelectedKey:\n      props.defaultIndex !== undefined\n        ? props.defaultIndex.toString()\n        : undefined,\n    selectedKey: props.index !== undefined ? props.index.toString() : undefined,\n    onSelectionChange: (e: any) => onChange && onChange(parseInt(e)),\n    keyboardActivation: props.keyboardActivation,\n  };\n  // useTabsState needs collection children.\n  let state = useTabsState(mappedProps);\n  const setAlign = () => {\n    switch (align) {\n      case 'start':\n        return 'flex-start';\n      case 'end':\n        return 'flex-end';\n      case 'center':\n        return 'center';\n      default:\n        return 'flex-start';\n    }\n  };\n  let tablistRef = React.useRef<any>();\n  let { tabListProps, tabPanelProps } = useTabs(mappedProps, state, tablistRef);\n  //TODO: refactor for responsive prop\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n  return (\n    <TabsContext.Provider\n      value={{\n        activeTabStyle,\n        inactiveTabStyle,\n        activeIconProps,\n        inactiveIconProps,\n        tabBarStyle,\n        isFitted,\n        align: setAlign(),\n        state,\n      }}\n    >\n      <Box width=\"100%\" {...newProps} ref={ref}>\n        <TabBar\n          tabListProps={tabListProps}\n          {...tabBarProps.props}\n          tablistRef={mergeRefs([tablistRef, tabBarProps.ref])}\n        />\n        <TabViews\n          {...tabPanelProps}\n          {...tabViewsProps.props}\n          ref={tabViewsProps.ref}\n        >\n          {state.selectedItem && state.selectedItem.props.children}\n        </TabViews>\n      </Box>\n    </TabsContext.Provider>\n  );\n};\nexport default React.memo(React.forwardRef(Tabs));\n"]}