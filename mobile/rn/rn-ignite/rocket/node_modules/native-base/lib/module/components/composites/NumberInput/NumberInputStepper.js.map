{"version":3,"sources":["NumberInputStepper.tsx"],"names":["React","TouchableOpacity","Platform","VStack","Box","useThemeProps","NumberInputContext","ChevronUpIcon","ChevronDownIcon","useHasResponsiveProps","NBStepper","forwardRef","children","props","ref","style","isIncrement","disablitityCheck","_active","_disabled","isDisabled","accessibilityLabel","pressHandler","iconColor","newProps","OS","disabled","cursor","NumberInputStepper","numberInputStepper","setNumberInputStepper","useContext","useEffect","memo"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,gBAAT,EAA2BC,QAA3B,QAA2C,cAA3C;AACA,SAASC,MAAT,EAAiBC,GAAjB,QAA4B,kBAA5B;AACA,SAASC,aAAT,QAA8B,gBAA9B;AAEA,SAASC,kBAAT,QAAmC,WAAnC;AACA,SAASC,aAAT,EAAwBC,eAAxB,QAA+C,6BAA/C;AACA,SAASC,qBAAT,QAAsC,sCAAtC;AAEA,OAAO,MAAMC,SAAS,gBAAGV,KAAK,CAACW,UAAN,CACvB,CAAC;AAAEC,EAAAA,QAAF;AAAY,KAAGC;AAAf,CAAD,EAA8BC,GAA9B,KAA4C;AAC1C,QAAM;AACJC,IAAAA,KADI;AAEJC,IAAAA,WAFI;AAGJC,IAAAA,gBAHI;AAIJC,IAAAA,OAJI;AAKJC,IAAAA,SALI;AAMJC,IAAAA,UANI;AAOJC,IAAAA,kBAPI;AAQJC,IAAAA,YARI;AASJC,IAAAA,SATI;AAUJ,OAAGC;AAVC,MAWFnB,aAAa,CAAC,oBAAD,EAAuBQ,KAAvB,CAXjB,CAD0C,CAa1C;;AACA,MAAIJ,qBAAqB,CAACI,KAAD,CAAzB,EAAkC;AAChC,WAAO,IAAP;AACD;;AACD,sBACE,oBAAC,gBAAD;AACE,IAAA,aAAa,EAAE,GADjB;AAEE,IAAA,QAAQ,EAAEI,gBAAgB,IAAIG,UAFhC;AAGE,IAAA,OAAO,EAAEE,YAHX;AAIE,IAAA,UAAU,MAJZ;AAKE,IAAA,kBAAkB,EAAED,kBALtB;AAME,IAAA,GAAG,EAAEP;AANP,kBAQE,oBAAC,GAAD,eACMU,QADN,EAEMN,OAFN,EAGOD,gBAAgB,IAAIG,UAApB,GAAiCD,SAAjC,GAA6C,EAHpD;AAIE,IAAA,WAAW,EAAC,aAJd;AAKE,IAAA,KAAK,EAAEJ,KALT;AAME,IAAA,OAAO,EAAEE,gBAAgB,IAAIG,UAApB,GAAiC,GAAjC,GAAuC;AANlD,KAOOlB,QAAQ,CAACuB,EAAT,KAAgB,KAAhB,GACD;AACEC,IAAAA,QAAQ,EAAET,gBAAgB,IAAIG,UADhC;AAEEO,IAAAA,MAAM,EAAEV,gBAAgB,IAAIG,UAApB,GAAiC,aAAjC,GAAiD;AAF3D,GADC,GAKD,EAZN,GAcGR,QAAQ,IAAII,WAAZ,gBACC,oBAAC,aAAD;AAAe,IAAA,KAAK,EAAEO;AAAtB,IADD,gBAGC,oBAAC,eAAD;AAAiB,IAAA,KAAK,EAAEA;AAAxB,IAjBJ,CARF,CADF;AA+BD,CAjDsB,CAAlB;;AAoDP,MAAMK,kBAAkB,GAAG,CACzB;AAAEhB,EAAAA,QAAF;AAAY,KAAGC;AAAf,CADyB,EAEzBC,GAFyB,KAGtB;AACH,QAAM;AACJe,IAAAA,kBADI;AAEJC,IAAAA;AAFI,MAGmB9B,KAAK,CAAC+B,UAAN,CAAiBzB,kBAAjB,CAHzB;AAKAN,EAAAA,KAAK,CAACgC,SAAN,CAAgB,MAAM;AACpB,KAACH,kBAAD,IACEC,qBAAqB,eACnB,oBAAC,MAAD,eAAYjB,KAAZ;AAAmB,MAAA,GAAG,EAAEC;AAAxB,QACGF,QADH,CADmB,CADvB;AAMD,GAPD,EAOG,CAACiB,kBAAD,EAAqBC,qBAArB,EAA4CjB,KAA5C,EAAmDD,QAAnD,EAA6DE,GAA7D,CAPH;AAQA,SAAO,IAAP;AACD,CAlBD;;AAoBA,4BAAed,KAAK,CAACiC,IAAN,eAAWjC,KAAK,CAACW,UAAN,CAAiBiB,kBAAjB,CAAX,CAAf","sourcesContent":["import React from 'react';\nimport { TouchableOpacity, Platform } from 'react-native';\nimport { VStack, Box } from '../../primitives';\nimport { useThemeProps } from '../../../hooks';\nimport type { INumberInputSteppersProps, INumberInputContext } from './types';\nimport { NumberInputContext } from './Context';\nimport { ChevronUpIcon, ChevronDownIcon } from '../../primitives/Icon/Icons';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\n\nexport const NBStepper = React.forwardRef(\n  ({ children, ...props }: any, ref?: any) => {\n    const {\n      style,\n      isIncrement,\n      disablitityCheck,\n      _active,\n      _disabled,\n      isDisabled,\n      accessibilityLabel,\n      pressHandler,\n      iconColor,\n      ...newProps\n    } = useThemeProps('NumberInputStepper', props);\n    //TODO: refactor for responsive prop\n    if (useHasResponsiveProps(props)) {\n      return null;\n    }\n    return (\n      <TouchableOpacity\n        activeOpacity={0.2}\n        disabled={disablitityCheck || isDisabled}\n        onPress={pressHandler}\n        accessible\n        accessibilityLabel={accessibilityLabel}\n        ref={ref}\n      >\n        <Box\n          {...newProps}\n          {..._active}\n          {...(disablitityCheck || isDisabled ? _disabled : {})}\n          borderColor=\"transparent\"\n          style={style}\n          opacity={disablitityCheck || isDisabled ? 0.4 : 1}\n          {...(Platform.OS === 'web'\n            ? {\n                disabled: disablitityCheck || isDisabled,\n                cursor: disablitityCheck || isDisabled ? 'not-allowed' : 'auto',\n              }\n            : {})}\n        >\n          {children || isIncrement ? (\n            <ChevronUpIcon color={iconColor} />\n          ) : (\n            <ChevronDownIcon color={iconColor} />\n          )}\n        </Box>\n      </TouchableOpacity>\n    );\n  }\n);\n\nconst NumberInputStepper = (\n  { children, ...props }: INumberInputSteppersProps,\n  ref?: any\n) => {\n  const {\n    numberInputStepper,\n    setNumberInputStepper,\n  }: INumberInputContext = React.useContext(NumberInputContext);\n\n  React.useEffect(() => {\n    !numberInputStepper &&\n      setNumberInputStepper(\n        <VStack {...props} ref={ref}>\n          {children}\n        </VStack>\n      );\n  }, [numberInputStepper, setNumberInputStepper, props, children, ref]);\n  return null;\n};\n\nexport default React.memo(React.forwardRef(NumberInputStepper));\n"]}