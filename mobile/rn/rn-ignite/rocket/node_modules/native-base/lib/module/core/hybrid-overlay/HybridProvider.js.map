{"version":3,"sources":["HybridProvider.tsx"],"names":["React","useMemo","Platform","HybridContext","useModeManager","keyboardDismissHandlerManager","HybridProvider","children","options","initialColorMode","accessibleColors","isTextColorAccessible","useSystemColorMode","colorModeManager","colorMode","setColorMode","toggleColorMode","useCallback","setAccessibleColors","useState","contextValue","useEffect","escapeKeyListener","OS","e","key","length","lastHandler","pop","document","addEventListener","removeEventListener"],"mappings":"AAAA,OAAOA,KAAP,IAAgBC,OAAhB,QAA+B,OAA/B;AACA,SAASC,QAAT,QAAyB,cAAzB;AACA,SAASC,aAAT,QAA8B,WAA9B;AACA,SAASC,cAAT,QAA+B,uBAA/B;AAEA,SAASC,6BAAT,QAA8C,aAA9C;;AAEA,MAAMC,cAAc,GAAG,CAAC;AACtBC,EAAAA,QADsB;AAEtBC,EAAAA,OAAO,EAAE;AACPC,IAAAA,gBAAgB,GAAG,OADZ;AAEPC,IAAAA,gBAAgB,EAAEC,qBAAqB,GAAG,KAFnC;AAGPC,IAAAA;AAHO,GAFa;AAOtBC,EAAAA;AAPsB,CAAD,KAQQ;AAC7B;AACA,QAAM;AAAEC,IAAAA,SAAF;AAAaC,IAAAA;AAAb,MAA8BX,cAAc,CAChDK,gBADgD,EAEhDG,kBAFgD,EAGhDC,gBAHgD,CAAlD;AAMA,QAAMG,eAAe,GAAGhB,KAAK,CAACiB,WAAN,CAAkB,MAAM;AAC9CF,IAAAA,YAAY,CAACD,SAAS,KAAK,OAAd,GAAwB,MAAxB,GAAiC,OAAlC,CAAZ;AACD,GAFuB,EAErB,CAACA,SAAD,EAAYC,YAAZ,CAFqB,CAAxB,CAR6B,CAY7B;;AACA,QAAM,CAACL,gBAAD,EAAmBQ,mBAAnB,IAA0ClB,KAAK,CAACmB,QAAN,CAC9CR,qBAD8C,CAAhD;AAIA,QAAMS,YAAY,GAAGnB,OAAO,CAAC,MAAM;AACjC,WAAO;AACLa,MAAAA,SAAS,EAAE;AACTA,QAAAA,SADS;AAETE,QAAAA,eAFS;AAGTD,QAAAA,YAHS;AAITL,QAAAA,gBAJS;AAKTQ,QAAAA;AALS;AADN,KAAP;AASD,GAV2B,EAUzB,CACDJ,SADC,EAEDE,eAFC,EAGDD,YAHC,EAIDL,gBAJC,EAKDQ,mBALC,CAVyB,CAA5B;AAkBAlB,EAAAA,KAAK,CAACqB,SAAN,CAAgB,MAAM;AACpB,QAAIC,iBAAsB,GAAG,IAA7B;;AAEA,QAAIpB,QAAQ,CAACqB,EAAT,KAAgB,KAApB,EAA2B;AACzBD,MAAAA,iBAAiB,GAAIE,CAAD,IAAsB;AACxC,YAAIA,CAAC,CAACC,GAAF,KAAU,QAAd,EAAwB;AACtB,cAAIpB,6BAA6B,CAACqB,MAA9B,KAAyC,CAA7C,EAAgD;AAC9C,kBAAMC,WAAgB,GAAGtB,6BAA6B,CAACuB,GAA9B,EAAzB;AACAD,YAAAA,WAAW;AACZ;AACF;AACF,OAPD;;AAQAE,MAAAA,QAAQ,CAACC,gBAAT,CAA0B,SAA1B,EAAqCR,iBAArC;AACD;;AAED,WAAO,MAAM;AACX,UAAIpB,QAAQ,CAACqB,EAAT,KAAgB,KAApB,EAA2B;AACzBM,QAAAA,QAAQ,CAACE,mBAAT,CAA6B,SAA7B,EAAwCT,iBAAxC;AACD;AACF,KAJD;AAKD,GApBD,EAoBG,EApBH;AAsBA,sBACE,oBAAC,aAAD,CAAe,QAAf;AAAwB,IAAA,KAAK,EAAEF;AAA/B,KACGb,QADH,CADF;AAKD,CAtED;;AAwEA,eAAeD,cAAf","sourcesContent":["import React, { useMemo } from 'react';\nimport { Platform } from 'react-native';\nimport { HybridContext } from './Context';\nimport { useModeManager } from './../color-mode/hooks';\nimport type { IColorModeProviderProps } from './../color-mode';\nimport { keyboardDismissHandlerManager } from '../../hooks';\n\nconst HybridProvider = ({\n  children,\n  options: {\n    initialColorMode = 'light',\n    accessibleColors: isTextColorAccessible = false,\n    useSystemColorMode,\n  },\n  colorModeManager,\n}: IColorModeProviderProps) => {\n  // Color-mode content\n  const { colorMode, setColorMode } = useModeManager(\n    initialColorMode,\n    useSystemColorMode,\n    colorModeManager\n  );\n\n  const toggleColorMode = React.useCallback(() => {\n    setColorMode(colorMode === 'light' ? 'dark' : 'light');\n  }, [colorMode, setColorMode]);\n\n  // Accessible color hook\n  const [accessibleColors, setAccessibleColors] = React.useState<boolean>(\n    isTextColorAccessible\n  );\n\n  const contextValue = useMemo(() => {\n    return {\n      colorMode: {\n        colorMode,\n        toggleColorMode,\n        setColorMode,\n        accessibleColors,\n        setAccessibleColors,\n      },\n    };\n  }, [\n    colorMode,\n    toggleColorMode,\n    setColorMode,\n    accessibleColors,\n    setAccessibleColors,\n  ]);\n\n  React.useEffect(() => {\n    let escapeKeyListener: any = null;\n\n    if (Platform.OS === 'web') {\n      escapeKeyListener = (e: KeyboardEvent) => {\n        if (e.key === 'Escape') {\n          if (keyboardDismissHandlerManager.length() > 0) {\n            const lastHandler: any = keyboardDismissHandlerManager.pop();\n            lastHandler();\n          }\n        }\n      };\n      document.addEventListener('keydown', escapeKeyListener);\n    }\n\n    return () => {\n      if (Platform.OS === 'web') {\n        document.removeEventListener('keydown', escapeKeyListener);\n      }\n    };\n  }, []);\n\n  return (\n    <HybridContext.Provider value={contextValue}>\n      {children}\n    </HybridContext.Provider>\n  );\n};\n\nexport default HybridProvider;\n"]}