{"version":3,"sources":["useMenu.tsx"],"names":["useFocusManager","useId","Platform","useMenuTrigger","handleOpen","isOpen","menuTriggerId","event","includes","key","preventDefault","undefined","useMenu","focusManager","onKeyDown","e","focusNext","wrap","focusPrevious","accessibilityRole","useMenuItem","textValue","ref","dataSet","nativebaseMenuItem","onHoverIn","current","OS","focus","useMenuOptionItem","isChecked","type","accessibilityState","checked","accessibilityChecked","ITEM_ATTR","getValue","element","getAttribute","useMenuTypeahead","props","length","ctrlKey","altKey","metaKey","container","currentTarget","values","Array","from","querySelectorAll","map","searchKey","foundValue","find","value","toLowerCase","startsWith","newItem","querySelector","setTimeout"],"mappings":"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","sourcesContent":["import { useFocusManager } from '@react-aria/focus';\nimport { useId } from '@react-aria/utils';\nimport { AccessibilityRole, Platform } from 'react-native';\n\ntype IMenuTriggerProps = {\n  handleOpen: () => void;\n  isOpen: boolean;\n};\n\nexport const useMenuTrigger = ({ handleOpen, isOpen }: IMenuTriggerProps) => {\n  const menuTriggerId = useId();\n  return {\n    'onKeyDownCapture': (event: KeyboardEvent) => {\n      if ([' ', 'Enter', 'ArrowUp', 'ArrowDown'].includes(event.key)) {\n        event.preventDefault();\n        handleOpen();\n      }\n    },\n    'aria-haspopup': 'menu',\n    'aria-expanded': isOpen ? true : undefined,\n    'nativeID': menuTriggerId,\n  };\n};\n\nexport const useMenu = () => {\n  const focusManager = useFocusManager();\n  const onKeyDown = (e: KeyboardEvent) => {\n    switch (e.key) {\n      case 'ArrowDown': {\n        e.preventDefault();\n        focusManager.focusNext({ wrap: true });\n        break;\n      }\n      case 'ArrowUp': {\n        e.preventDefault();\n        focusManager.focusPrevious({ wrap: true });\n        break;\n      }\n    }\n  };\n\n  return {\n    onKeyDown,\n    accessibilityRole: 'menu' as AccessibilityRole,\n  };\n};\n\nexport const useMenuItem = ({\n  textValue,\n  ref,\n}: {\n  textValue: string;\n  ref: any;\n}) => {\n  return {\n    accessibilityRole: 'menuitem' as AccessibilityRole,\n    dataSet: {\n      nativebaseMenuItem: textValue,\n    },\n    onHoverIn: () => {\n      if (ref.current && Platform.OS === 'web') ref.current.focus();\n    },\n  };\n};\n\nexport const useMenuOptionItem = ({\n  isChecked,\n  type,\n}: {\n  isChecked: boolean;\n  type: 'checkbox' | 'radio';\n}) => {\n  return {\n    accessibilityRole: ('menuitem' +\n      (Platform.OS === 'web' ? type : '')) as AccessibilityRole,\n    accessibilityState: {\n      checked: isChecked,\n    },\n    accessibilityChecked: isChecked,\n  };\n};\n\nconst ITEM_ATTR = 'data-nativebase-menu-item';\nconst getValue = (element: Element) => element.getAttribute(ITEM_ATTR) ?? '';\n\nexport const useMenuTypeahead = (props: any): any => {\n  return {\n    onKeyDown(event: KeyboardEvent) {\n      if (props.onKeyDown) {\n        props.onKeyDown(event);\n      }\n\n      if (\n        event.key.length === 1 &&\n        !(event.ctrlKey || event.altKey || event.metaKey)\n      ) {\n        const container = event.currentTarget as HTMLElement;\n        const values = Array.from(\n          container.querySelectorAll(`[${ITEM_ATTR}]`)\n        ).map(getValue);\n\n        const searchKey = event.key;\n\n        const foundValue = values.find((value) =>\n          value.toLowerCase().startsWith(searchKey)\n        );\n        const newItem = container.querySelector(\n          `[${ITEM_ATTR}=\"${foundValue}\"]`\n        );\n\n        if (newItem) {\n          /**\n           * Imperative focus during keydown is risky so we prevent React's batching updates\n           * to avoid potential bugs. See: https://github.com/facebook/react/issues/20332\n           */\n          setTimeout(() => (newItem as HTMLElement).focus());\n        }\n      }\n    },\n  };\n};\n"]}