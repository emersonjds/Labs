{"version":3,"sources":["SliderFilledTrack.tsx"],"names":["React","SliderContext","Box","usePropsResolution","useHasResponsiveProps","SliderFilledTrack","props","ref","isReversed","colorScheme","state","trackLayout","orientation","isDisabled","sliderSize","isReadOnly","useContext","sliderTrackPosition","height","getThumbPercent","width","resolvedProps","size","forwardRef"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,aAAT,QAA8B,WAA9B;AACA,OAAOC,GAAP,MAAgB,QAAhB;AAEA,SAASC,kBAAT,QAAmC,8BAAnC;AACA,SAASC,qBAAT,QAAsC,sCAAtC;;AAEA,MAAMC,iBAAiB,GAAG,CAACC,KAAD,EAAiCC,GAAjC,KAA+C;AACvE,QAAM;AACJC,IAAAA,UADI;AAEJC,IAAAA,WAFI;AAGJC,IAAAA,KAHI;AAIJC,IAAAA,WAJI;AAKJC,IAAAA,WALI;AAMJC,IAAAA,UANI;AAOJC,IAAAA,UAPI;AAQJC,IAAAA;AARI,MASFf,KAAK,CAACgB,UAAN,CAAiBf,aAAjB,CATJ;AAWA,QAAMgB,mBAAmB,GAAGT,UAAU,GAClCI,WAAW,KAAK,UAAhB,GACED,WAAW,CAACO,MAAZ,GAAqBP,WAAW,CAACO,MAAZ,GAAqBR,KAAK,CAACS,eAAN,CAAsB,CAAtB,CAD5C,GAEER,WAAW,CAACS,KAAZ,GAAoBT,WAAW,CAACS,KAAZ,GAAoBV,KAAK,CAACS,eAAN,CAAsB,CAAtB,CAHR,GAIlCT,KAAK,CAACS,eAAN,CAAsB,CAAtB,IAA2B,GAA3B,GAAiC,GAJrC;AAMA,QAAME,aAAa,GAAGlB,kBAAkB,CACtC,mBADsC,EAEtC;AACEmB,IAAAA,IAAI,EAAER,UADR;AAEEL,IAAAA,WAFF;AAGED,IAAAA,UAHF;AAIEI,IAAAA,WAJF;AAKEK,IAAAA,mBALF;AAME,OAAGX;AANL,GAFsC,EAUtC;AAAEO,IAAAA,UAAF;AAAcE,IAAAA;AAAd,GAVsC,CAAxC,CAlBuE,CA+BvE;;AACA,MAAIX,qBAAqB,CAACE,KAAD,CAAzB,EAAkC;AAChC,WAAO,IAAP;AACD;;AAED,sBACE,oBAAC,GAAD;AACE,IAAA,QAAQ,EAAC;AADX,KAEMe,aAFN;AAGE,IAAA,GAAG,EAAEd,GAHP,CAIE;AACA;;AALF,KADF;AASD,CA7CD;;AA+CA,4BAAeP,KAAK,CAACuB,UAAN,CAAiBlB,iBAAjB,CAAf","sourcesContent":["import React from 'react';\nimport { SliderContext } from './Context';\nimport Box from '../Box';\nimport type { ISliderTrackFilledProps } from './types';\nimport { usePropsResolution } from '../../../hooks/useThemeProps';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\n\nconst SliderFilledTrack = (props: ISliderTrackFilledProps, ref?: any) => {\n  const {\n    isReversed,\n    colorScheme,\n    state,\n    trackLayout,\n    orientation,\n    isDisabled,\n    sliderSize,\n    isReadOnly,\n  } = React.useContext(SliderContext);\n\n  const sliderTrackPosition = isReversed\n    ? orientation === 'vertical'\n      ? trackLayout.height - trackLayout.height * state.getThumbPercent(0)\n      : trackLayout.width - trackLayout.width * state.getThumbPercent(0)\n    : state.getThumbPercent(0) * 100 + '%';\n\n  const resolvedProps = usePropsResolution(\n    'SliderFilledTrack',\n    {\n      size: sliderSize,\n      colorScheme,\n      isReversed,\n      orientation,\n      sliderTrackPosition,\n      ...props,\n    },\n    { isDisabled, isReadOnly }\n  );\n\n  //TODO: refactor for responsive prop\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n\n  return (\n    <Box\n      position=\"absolute\"\n      {...resolvedProps}\n      ref={ref}\n      // {...(isReadOnly && _readOnly)}\n      // {...(isDisabled && _disabled)}\n    />\n  );\n};\n\nexport default React.forwardRef(SliderFilledTrack);\n"]}