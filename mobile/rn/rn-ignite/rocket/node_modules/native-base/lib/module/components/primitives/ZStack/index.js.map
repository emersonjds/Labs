{"version":3,"sources":["index.tsx"],"names":["React","memo","forwardRef","default","Box","getAbsoluteChildren","usePropsResolution","useHasResponsiveProps","ZStack","children","reversed","props","ref","resolvedProps"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,IAAhB,EAAsBC,UAAtB,QAAwC,OAAxC;AACA,SAASC,OAAO,IAAIC,GAApB,QAAkD,QAAlD;AACA,SAASC,mBAAT,QAAoC,gBAApC;AACA,SAASC,kBAAT,QAAmC,8BAAnC;AACA,SAASC,qBAAT,QAAsC,sCAAtC;;AAWA,MAAMC,MAAM,GAAG,CAAC;AAAEC,EAAAA,QAAF;AAAYC,EAAAA,QAAZ;AAAsB,KAAGC;AAAzB,CAAD,EAAiDC,GAAjD,KAA+D;AAC5E,QAAMC,aAAa,GAAGP,kBAAkB,CAAC,QAAD,EAAWK,KAAX,CAAxC,CAD4E,CAE5E;;AACA,MAAIJ,qBAAqB,CAACI,KAAD,CAAzB,EAAkC;AAChC,WAAO,IAAP;AACD;;AACD,sBACE,oBAAC,GAAD,eAASE,aAAT;AAAwB,IAAA,GAAG,EAAED;AAA7B,MACGP,mBAAmB,CAACI,QAAD,EAAWC,QAAX,CADtB,CADF;AAKD,CAXD;;AAaA,4BAAeT,IAAI,eAACC,UAAU,CAACM,MAAD,CAAX,CAAnB","sourcesContent":["import React, { memo, forwardRef } from 'react';\nimport { default as Box, InterfaceBoxProps } from '../Box';\nimport { getAbsoluteChildren } from '../../../utils';\nimport { usePropsResolution } from '../../../hooks/useThemeProps';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\nimport type { CustomProps } from '../../../components/types';\n\nexport interface InterfaceZStackProps extends InterfaceBoxProps<IZStackProps> {\n  /**\n   * The direction to stack the elements.\n   */\n  reversed?: boolean;\n}\n\nexport type IZStackProps = InterfaceZStackProps & CustomProps<'ZStack'>;\nconst ZStack = ({ children, reversed, ...props }: IZStackProps, ref?: any) => {\n  const resolvedProps = usePropsResolution('ZStack', props);\n  //TODO: refactor for responsive prop\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n  return (\n    <Box {...resolvedProps} ref={ref}>\n      {getAbsoluteChildren(children, reversed)}\n    </Box>\n  );\n};\n\nexport default memo(forwardRef(ZStack));\n"]}