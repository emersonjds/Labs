{"version":3,"sources":["colors.ts"],"names":["get","isEmpty","Color","mode","light","dark","props","colorMode","transparentize","color","opacity","theme","raw","getColor","setAlpha","toRgbString","fallback","hex","isValid","tone","isDark","isLight","randomColor","opts","random","toHexString","string","colors","randomColorFromList","randomColorFromString","randomFromList","list","Math","floor","length","str","index","i","charCodeAt","hash","toString","j","value","substr"],"mappings":"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","sourcesContent":["import get from 'lodash.get';\nimport isEmpty from 'lodash.isempty';\nimport Color from 'tinycolor2';\nimport type { Dict } from './utils';\n\nexport function mode(light: any, dark: any) {\n  return (props: any) => (props.colorMode === 'dark' ? dark : light);\n}\n\nexport const transparentize = (color: string, opacity: number) => (\n  theme: Dict\n) => {\n  const raw = getColor(theme, color);\n  return Color(raw).setAlpha(opacity).toRgbString();\n};\n\nexport const getColor = (theme: Dict, color: string, fallback?: string) => {\n  const hex = get(theme, `colors.${color}`, color);\n  const isValid = Color(hex).isValid();\n  return isValid ? hex : fallback;\n};\n\nexport const tone = (color: string) => (theme: Dict) => {\n  const hex = getColor(theme, color);\n  const isDark = Color(hex).isDark();\n  return isDark ? 'dark' : 'light';\n};\n\nexport const isDark = (color: string) => (theme: Dict) =>\n  tone(color)(theme) === 'dark';\n\nexport const isLight = (color: string) => (theme: Dict) =>\n  tone(color)(theme) === 'light';\n\ninterface RandomColorOptions {\n  /**\n   * If passed, string will be used to generate\n   * random color\n   */\n  string?: string;\n  /**\n   * List of colors to pick from at random\n   */\n  colors?: string[];\n}\nexport function randomColor(opts?: RandomColorOptions) {\n  const fallback = Color.random().toHexString();\n\n  if (!opts || isEmpty(opts)) {\n    return fallback;\n  }\n\n  if (opts.string && opts.colors) {\n    return randomColorFromList(opts.string, opts.colors);\n  }\n\n  if (opts.string && !opts.colors) {\n    return randomColorFromString(opts.string);\n  }\n\n  if (opts.colors && !opts.string) {\n    return randomFromList(opts.colors);\n  }\n\n  return fallback;\n}\n\nfunction randomFromList(list: string[]) {\n  return list[Math.floor(Math.random() * list.length)];\n}\n\nfunction randomColorFromList(str: string, list: string[]) {\n  let index = 0;\n  if (str.length === 0) return list[0];\n  for (let i = 0; i < str.length; i++) {\n    index = str.charCodeAt(i) + ((index << 5) - index);\n    index = index & index;\n  }\n  index = ((index % list.length) + list.length) % list.length;\n  return list[index];\n}\n\nfunction randomColorFromString(str: string) {\n  let hash = 0;\n  if (str.length === 0) return hash.toString();\n  for (let i = 0; i < str.length; i++) {\n    hash = str.charCodeAt(i) + ((hash << 5) - hash);\n    hash = hash & hash;\n  }\n  let color = '#';\n  for (let j = 0; j < 3; j++) {\n    const value = (hash >> (j * 8)) & 255;\n    color += ('00' + value.toString(16)).substr(-2);\n  }\n  return color;\n}\n"]}