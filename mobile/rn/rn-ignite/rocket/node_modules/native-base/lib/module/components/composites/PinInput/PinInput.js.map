{"version":3,"sources":["PinInput.tsx"],"names":["React","HStack","useThemeProps","useFormControlContext","Platform","PinInputContext","themeTools","useHasResponsiveProps","PinInput","children","props","ref","padding","remProps","extractInObject","manageFocus","defaultValue","value","space","onChange","newProps","formControlContext","RefList","setRefList","index","pinInputValue","setPinInputValue","useState","handleChange","newValue","fieldIndex","temp","undefined","join","current","focus","length","handleMultiValueChange","pinFieldLength","newValueLength","splicedValue","splice","OS","filter","_n","i","JSON","stringify","parseInt","indexSetter","allChildren","pinInputFiledCounter","Children","map","child","cloneElement","useEffect","memo","forwardRef"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { HStack } from '../../primitives/Stack';\nimport { useThemeProps } from '../../../hooks';\nimport type { IPinInputProps } from './types';\nimport { useFormControlContext } from '../FormControl';\nimport { Platform } from 'react-native';\nimport { PinInputContext } from './Context';\nimport { themeTools } from '../../../theme';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\n\nconst PinInput = ({ children, ...props }: IPinInputProps, ref?: any) => {\n  let [padding, remProps] = themeTools.extractInObject(props, [\n    'p',\n    'px',\n    'py',\n    'pt',\n    'pb',\n    'pl',\n    'pr',\n  ]);\n  const {\n    manageFocus,\n    defaultValue,\n    value,\n    space,\n    onChange,\n    ...newProps\n  } = useThemeProps('PinInput', remProps);\n  const formControlContext = useFormControlContext();\n\n  const RefList: Array<any> = [];\n  const setRefList = (ref: any, index: number) => {\n    RefList[index] = ref;\n  };\n  const [pinInputValue, setPinInputValue] = React.useState(\n    value || defaultValue\n  );\n\n  const handleChange = (newValue: string, fieldIndex: number) => {\n    let temp = (pinInputValue && [...pinInputValue]) || [];\n    temp[fieldIndex] = newValue;\n    value === undefined && setPinInputValue(temp.join(''));\n    onChange && onChange(temp.join(''));\n    if (newValue === '' && manageFocus && fieldIndex - 1 > -1)\n      RefList[fieldIndex - 1].current.focus();\n    else if (newValue && manageFocus && fieldIndex + 1 < RefList.length)\n      RefList[fieldIndex + 1].current.focus();\n    return temp.join('');\n  };\n  const handleMultiValueChange = (newValue: string, fieldIndex: number) => {\n    const pinFieldLength = RefList.length;\n    const newValueLength = newValue.length;\n    if (newValueLength >= pinFieldLength && newValueLength > 2) {\n      let splicedValue = newValue ? [...newValue] : [];\n      splicedValue.splice(pinFieldLength);\n      RefList[pinFieldLength - 1].current.focus();\n      setPinInputValue(splicedValue.join(''));\n      onChange && onChange(splicedValue.join(''));\n    }\n\n    if (Platform.OS !== 'ios') {\n      let temp = pinInputValue ? [...pinInputValue] : [];\n      if (newValue === '') {\n        // Handling Backward focus.\n        temp = temp.filter((_n, i) => i !== fieldIndex);\n        if (manageFocus && fieldIndex - 1 > -1)\n          RefList[fieldIndex - 1].current.focus();\n      } else {\n        temp[fieldIndex] = JSON.stringify(parseInt(newValue, 10) % 10);\n        if (manageFocus && fieldIndex + 1 < RefList.length)\n          RefList[fieldIndex + 1].current.focus();\n      }\n      value === undefined && setPinInputValue(temp.join(''));\n      onChange && onChange(temp.join(''));\n    }\n  };\n\n  const indexSetter = (allChildren: JSX.Element | JSX.Element[]) => {\n    let pinInputFiledCounter = -1;\n    return React.Children.map(allChildren, (child: JSX.Element) => {\n      pinInputFiledCounter++;\n      return React.cloneElement(\n        child,\n        {\n          fieldIndex: pinInputFiledCounter,\n        },\n        child.props.children\n      );\n    });\n  };\n\n  React.useEffect(() => {\n    if (value !== undefined && value != pinInputValue) setPinInputValue(value);\n  }, [value, pinInputValue, setPinInputValue]);\n\n  //TODO: refactor for responsive prop\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n\n  return (\n    <PinInputContext.Provider\n      value={{\n        ...formControlContext,\n        ...newProps,\n        setRefList,\n        handleChange,\n        handleMultiValueChange,\n        value: pinInputValue,\n      }}\n    >\n      {children && (\n        <HStack flexDirection=\"row\" space={space} {...padding} ref={ref}>\n          {indexSetter(children)}\n        </HStack>\n      )}\n    </PinInputContext.Provider>\n  );\n};\n\nexport default React.memo(React.forwardRef(PinInput));\n"]}