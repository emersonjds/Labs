{"version":3,"sources":["index.tsx"],"names":["React","memo","forwardRef","Text","usePropsResolution","useHasResponsiveProps","Heading","props","ref","resolvedProps"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,IAAhB,EAAsBC,UAAtB,QAAwC,OAAxC;AACA,OAAOC,IAAP,MAAiB,SAAjB;AACA,SAASC,kBAAT,QAAmC,8BAAnC;AAEA,SAASC,qBAAT,QAAsC,sCAAtC;;AAEA,MAAMC,OAAO,GAAG,CAACC,KAAD,EAAuBC,GAAvB,KAAoC;AAClD,QAAMC,aAAa,GAAGL,kBAAkB,CAAC,SAAD,EAAYG,KAAZ,CAAxC,CADkD,CAElD;;AACA,MAAIF,qBAAqB,CAACE,KAAD,CAAzB,EAAkC;AAChC,WAAO,IAAP;AACD;;AACD,sBAAO,oBAAC,IAAD,eAAUE,aAAV;AAAyB,IAAA,GAAG,EAAED;AAA9B,KAAP;AACD,CAPD;;AASA,4BAAeP,IAAI,eAACC,UAAU,CAACI,OAAD,CAAX,CAAnB","sourcesContent":["import React, { memo, forwardRef } from 'react';\nimport Text from '../Text';\nimport { usePropsResolution } from '../../../hooks/useThemeProps';\nimport type { IHeadingProps } from './types';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\n\nconst Heading = (props: IHeadingProps, ref: any) => {\n  const resolvedProps = usePropsResolution('Heading', props);\n  //TODO: refactor for responsive prop\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n  return <Text {...resolvedProps} ref={ref} />;\n};\n\nexport default memo(forwardRef(Heading));\nexport type { IHeadingProps };\n"]}