{"version":3,"sources":["PinInputField.tsx"],"names":["React","Input","PinInputContext","Platform","mergeRefs","useHasResponsiveProps","PinInputFiled","fieldIndex","defaultValue","pDefaultValue","props","ref","handleChange","value","cValue","setRefList","cDefaultValue","handleMultiValueChange","context","useContext","keyPressHandler","event","OS","nativeEvent","key","textChangeHandler","myRef","useRef","useEffect","memo","forwardRef"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,KAAT,QAAsB,wBAAtB;AAEA,SAASC,eAAT,QAAgC,WAAhC;AACA,SAASC,QAAT,QAAyB,cAAzB;AACA,SAASC,SAAT,QAA0B,gBAA1B;AACA,SAASC,qBAAT,QAAsC,sCAAtC;;AAEA,MAAMC,aAAa,GAAG,CACpB;AACEC,EAAAA,UAAU,GAAG,CADf;AAEEC,EAAAA,YAAY,EAAEC,aAFhB;AAGE,KAAGC;AAHL,CADoB,EAMpBC,GANoB,KAOjB;AACH,MAAI;AACFC,IAAAA,YADE;AAEFC,IAAAA,KAAK,EAAEC,MAFL;AAGFC,IAAAA,UAHE;AAIFP,IAAAA,YAAY,EAAEQ,aAJZ;AAKFC,IAAAA,sBALE;AAMF,OAAGC;AAND,MAOkBlB,KAAK,CAACmB,UAAN,CAAiBjB,eAAjB,CAPtB;AAQAc,EAAAA,aAAa,GAAGA,aAAa,IAAIA,aAAa,CAACT,UAAD,CAA9C;AACA,MAAIC,YAAY,GAAGC,aAAa,IAAIO,aAApC;AACA,MAAIH,KAAK,GAAGC,MAAM,IAAIA,MAAM,CAACP,UAAD,CAA5B;;AAEA,QAAMa,eAAe,GAAIC,KAAD,IAAgB;AACtC,QAAIlB,QAAQ,CAACmB,EAAT,KAAgB,KAApB,EAA2B;AACzB,UAAID,KAAK,CAACE,WAAN,CAAkBC,GAAlB,IAAyB,CAAzB,IAA8BH,KAAK,CAACE,WAAN,CAAkBC,GAAlB,IAAyB,CAA3D,EAA8D;AAC5DZ,QAAAA,YAAY,IAAIA,YAAY,CAACS,KAAK,CAACE,WAAN,CAAkBC,GAAnB,EAAwBjB,UAAxB,CAA5B;AACD,OAFD,MAEO,IAAIc,KAAK,CAACE,WAAN,CAAkBC,GAAlB,KAA0B,WAA9B,EAA2C;AAChDZ,QAAAA,YAAY,IAAIA,YAAY,CAAC,EAAD,EAAKL,UAAL,CAA5B;AACD;AACF;AACF,GARD;;AASA,QAAMkB,iBAAiB,GAAIZ,KAAD,IAAgB;AACxC;AACAI,IAAAA,sBAAsB,IAAIA,sBAAsB,CAACJ,KAAD,EAAQN,UAAR,CAAhD;AACD,GAHD;;AAIA,QAAMmB,KAAK,GAAG1B,KAAK,CAAC2B,MAAN,CAAa,IAAb,CAAd;AACA3B,EAAAA,KAAK,CAAC4B,SAAN,CAAgB,MAAM;AACpBb,IAAAA,UAAU,IAAIA,UAAU,CAACW,KAAD,EAAQnB,UAAR,CAAxB;AACD,GAFD,EAEG,CAACmB,KAAD,EAAQnB,UAAR,EAAoBQ,UAApB,CAFH,EA3BG,CA+BH;;AACA,MAAIV,qBAAqB,CAACK,KAAD,CAAzB,EAAkC;AAChC,WAAO,IAAP;AACD;;AACD,sBACE,oBAAC,KAAD,CACE;AADF;AAEE,IAAA,GAAG,EAAEN,SAAS,CAAC,CAACsB,KAAD,EAAQf,GAAR,CAAD;AAFhB,KAGMO,OAHN,EAIMR,KAJN;AAKE,IAAA,UAAU,EAAGW,KAAD,IAAWD,eAAe,CAACC,KAAD,CALxC;AAME,IAAA,YAAY,EAAGR,KAAD,IAAWY,iBAAiB,CAACZ,KAAD,CAN5C;AAOE,IAAA,YAAY,EAAC,SAPf;AAQE,IAAA,YAAY,EAAEL,YARhB;AASE,IAAA,KAAK,EAAEK;AATT,KADF;AAaD,CAvDD;;AAyDA,4BAAeb,KAAK,CAAC6B,IAAN,eAAW7B,KAAK,CAAC8B,UAAN,CAAiBxB,aAAjB,CAAX,CAAf","sourcesContent":["import React from 'react';\nimport { Input } from '../../primitives/Input';\nimport type { IPinInputFieldProps, IPinInputContext } from './types';\nimport { PinInputContext } from './Context';\nimport { Platform } from 'react-native';\nimport { mergeRefs } from '../../../utils';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\n\nconst PinInputFiled = (\n  {\n    fieldIndex = 0,\n    defaultValue: pDefaultValue,\n    ...props\n  }: IPinInputFieldProps,\n  ref?: any\n) => {\n  let {\n    handleChange,\n    value: cValue,\n    setRefList,\n    defaultValue: cDefaultValue,\n    handleMultiValueChange,\n    ...context\n  }: IPinInputContext = React.useContext(PinInputContext);\n  cDefaultValue = cDefaultValue && cDefaultValue[fieldIndex];\n  let defaultValue = pDefaultValue || cDefaultValue;\n  let value = cValue && cValue[fieldIndex];\n\n  const keyPressHandler = (event: any) => {\n    if (Platform.OS !== 'web') {\n      if (event.nativeEvent.key >= 0 && event.nativeEvent.key <= 9) {\n        handleChange && handleChange(event.nativeEvent.key, fieldIndex);\n      } else if (event.nativeEvent.key === 'Backspace') {\n        handleChange && handleChange('', fieldIndex);\n      }\n    }\n  };\n  const textChangeHandler = (value: any) => {\n    // Also used to handle change for Android.\n    handleMultiValueChange && handleMultiValueChange(value, fieldIndex);\n  };\n  const myRef = React.useRef(null);\n  React.useEffect(() => {\n    setRefList && setRefList(myRef, fieldIndex);\n  }, [myRef, fieldIndex, setRefList]);\n\n  //TODO: refactor for responsive prop\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n  return (\n    <Input\n      //@ts-ignore\n      ref={mergeRefs([myRef, ref])}\n      {...context}\n      {...props}\n      onKeyPress={(event) => keyPressHandler(event)}\n      onChangeText={(value) => textChangeHandler(value)}\n      keyboardType=\"numeric\"\n      defaultValue={defaultValue}\n      value={value}\n    />\n  );\n};\n\nexport default React.memo(React.forwardRef(PinInputFiled));\n"]}