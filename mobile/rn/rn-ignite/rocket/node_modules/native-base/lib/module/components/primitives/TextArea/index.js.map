{"version":3,"sources":["index.tsx"],"names":["React","memo","forwardRef","Input","usePropsResolution","useHasResponsiveProps","useHover","mergeRefs","TextArea","wrapperRef","isDisabled","isInvalid","isReadOnly","isFocused","isFocusedProp","isHovered","isHoveredProp","props","ref","_ref","useRef","setIsFocused","useState","handleFocus","focusState","callback","totalLines","onFocus","onBlur","newProps","extendTheme","e"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,IAAhB,EAAsBC,UAAtB,QAAwC,OAAxC;AACA,SAASC,KAAT,QAAsB,UAAtB;AAEA,SAASC,kBAAT,QAAmC,8BAAnC;AACA,SAASC,qBAAT,QAAsC,sCAAtC;AACA,SAASC,QAAT,QAAyB,iCAAzB;AACA,SAASC,SAAT,QAA0B,gBAA1B;;AAcA,MAAMC,QAAQ,GAAG,CACf;AACEC,EAAAA,UADF;AAEEC,EAAAA,UAFF;AAGEC,EAAAA,SAHF;AAIEC,EAAAA,UAJF;AAKEC,EAAAA,SAAS,EAAEC,aALb;AAMEC,EAAAA,SAAS,EAAEC,aANb;AAOE,KAAGC;AAPL,CADe,EAUfC,GAVe,KAWZ;AACH,QAAMC,IAAI,GAAGnB,KAAK,CAACoB,MAAN,CAAa,IAAb,CAAb;;AACA,QAAM;AAAEL,IAAAA;AAAF,MAAgBT,QAAQ,CAAC,EAAD,EAAKa,IAAL,CAA9B;AACA,QAAM,CAACN,SAAD,EAAYQ,YAAZ,IAA4BrB,KAAK,CAACsB,QAAN,CAAeR,aAAf,CAAlC;;AACA,QAAMS,WAAW,GAAG,CAACC,UAAD,EAAsBC,QAAtB,KAAwC;AAC1DJ,IAAAA,YAAY,CAACG,UAAD,CAAZ;AACAC,IAAAA,QAAQ;AACT,GAHD;;AAIA,QAAM;AAAEC,IAAAA,UAAF;AAAcC,IAAAA,OAAd;AAAuBC,IAAAA,MAAvB;AAA+B,OAAGC;AAAlC,MAA+CzB,kBAAkB,CACrE,UADqE,EAErEa,KAFqE,EAGrE;AACEF,IAAAA,SAAS,EAAEC,aAAa,IAAID,SAD9B;AAEEL,IAAAA,UAFF;AAGEG,IAAAA,SAHF;AAIEF,IAAAA,SAJF;AAKEC,IAAAA;AALF,GAHqE,EAUrE;AAAEkB,IAAAA,WAAW,EAAE,CAAC,OAAD;AAAf,GAVqE,CAAvE,CARG,CAoBH;;AACA,MAAIzB,qBAAqB,CAACY,KAAD,CAAzB,EAAkC;AAChC,WAAO,IAAP;AACD;;AACD,sBACE,oBAAC,KAAD,eACMY,QADN;AAEE,IAAA,sCAAsC,MAFxC;AAGE,IAAA,aAAa,EAAEH,UAHjB;AAIE,IAAA,UAAU,EAAEjB,UAJd;AAKE,IAAA,GAAG,EAAEF,SAAS,CAAC,CAACY,IAAD,EAAOD,GAAP,CAAD,CALhB;AAME,IAAA,OAAO,EAAGa,CAAD,IAAO;AACdR,MAAAA,WAAW,CAAC,IAAD,EAAOI,OAAO,GAAG,MAAMA,OAAO,CAACI,CAAD,CAAhB,GAAsB,MAAM,CAAE,CAA5C,CAAX;AACD,KARH;AASE,IAAA,MAAM,EAAGA,CAAD,IAAO;AACbR,MAAAA,WAAW,CAAC,KAAD,EAAQK,MAAM,GAAG,MAAMA,MAAM,CAACG,CAAD,CAAf,GAAqB,MAAM,CAAE,CAA3C,CAAX;AACD,KAXH;AAYE,IAAA,UAAU,EAAErB,UAZd;AAaE,IAAA,SAAS,EAAEC,SAbb;AAcE,IAAA,UAAU,EAAEC;AAdd,KADF;AAkBD,CArDD;;AAuDA,4BAAeX,IAAI,eAACC,UAAU,CAACM,QAAD,CAAX,CAAnB","sourcesContent":["import React, { memo, forwardRef } from 'react';\nimport { Input } from '../Input';\nimport type { InterfaceInputProps } from '../Input/types';\nimport { usePropsResolution } from '../../../hooks/useThemeProps';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\nimport { useHover } from '@react-native-aria/interactions';\nimport { mergeRefs } from '../../../utils';\nimport type { PlatformProps } from '../../../components/types';\nexport interface ITextAreaProps\n  extends Omit<\n      InterfaceInputProps,\n      '_web' | '_android' | '_ios' | '_light' | '_dark' | '_important'\n    >,\n    PlatformProps<ITextAreaProps> {\n  /**\n   * Maps to react-native TextInput's numberOfLines.\n   */\n  totalLines?: number;\n}\n\nconst TextArea = (\n  {\n    wrapperRef,\n    isDisabled,\n    isInvalid,\n    isReadOnly,\n    isFocused: isFocusedProp,\n    isHovered: isHoveredProp,\n    ...props\n  }: ITextAreaProps,\n  ref: any\n) => {\n  const _ref = React.useRef(null);\n  const { isHovered } = useHover({}, _ref);\n  const [isFocused, setIsFocused] = React.useState(isFocusedProp);\n  const handleFocus = (focusState: boolean, callback: any) => {\n    setIsFocused(focusState);\n    callback();\n  };\n  const { totalLines, onFocus, onBlur, ...newProps } = usePropsResolution(\n    'TextArea',\n    props,\n    {\n      isHovered: isHoveredProp || isHovered,\n      isDisabled,\n      isFocused,\n      isInvalid,\n      isReadOnly,\n    },\n    { extendTheme: ['Input'] }\n  );\n  //TODO: refactor for responsive prop\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n  return (\n    <Input\n      {...newProps}\n      INTERNAL_notResolveThemeAndPseudoProps\n      numberOfLines={totalLines}\n      wrapperRef={wrapperRef}\n      ref={mergeRefs([_ref, ref])}\n      onFocus={(e) => {\n        handleFocus(true, onFocus ? () => onFocus(e) : () => {});\n      }}\n      onBlur={(e) => {\n        handleFocus(false, onBlur ? () => onBlur(e) : () => {});\n      }}\n      isDisabled={isDisabled}\n      isInvalid={isInvalid}\n      isReadOnly={isReadOnly}\n    />\n  );\n};\n\nexport default memo(forwardRef(TextArea));\n"]}