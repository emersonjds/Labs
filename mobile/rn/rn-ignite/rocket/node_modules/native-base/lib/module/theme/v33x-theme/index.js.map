{"version":3,"sources":["index.ts"],"names":["base","components","tools","config","useSystemColorMode","initialColorMode","accessibleColors","v33xTheme","themeTools"],"mappings":"AAAA,OAAOA,IAAP,MAAiB,QAAjB;AACA,OAAOC,UAAP,MAAuB,cAAvB;AACA,OAAO,KAAKC,KAAZ,MAAuB,SAAvB,C,CACA;;AAGA,MAAMC,MAAwB,GAAG;AAC/BC,EAAAA,kBAAkB,EAAE,KADW;AACJ;AAC3BC,EAAAA,gBAAgB,EAAE,OAFa;AAG/BC,EAAAA,gBAAgB,EAAE;AAHa,CAAjC;AAMA,MAAMC,SAAS,GAAG,EAChB,GAAGP,IADa;AAEhBC,EAAAA,UAFgB;AAGhBE,EAAAA;AAHgB,CAAlB;AAcA,SAASI,SAAT,EAAoBL,KAAK,IAAIM,UAA7B","sourcesContent":["import base from './base';\nimport components from './components';\nimport * as tools from './tools';\n//@ts-ignore\nimport type { ColorModeOptions } from './../core/color-mode/types';\n\nconst config: ColorModeOptions = {\n  useSystemColorMode: false, // TODO: implement this\n  initialColorMode: 'light',\n  accessibleColors: false,\n};\n\nconst v33xTheme = {\n  ...base,\n  components,\n  config,\n};\n\nexport type V33xTheme = typeof v33xTheme & { fontConfig: any };\n\nexport interface ICustomTheme {}\n\nexport interface IV33xTheme\n  extends ICustomTheme,\n    Omit<V33xTheme, keyof ICustomTheme> {}\n\nexport { v33xTheme, tools as themeTools };\n"]}