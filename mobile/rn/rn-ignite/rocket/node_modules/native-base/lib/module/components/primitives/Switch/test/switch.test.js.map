{"version":3,"sources":["switch.test.tsx"],"names":["React","render","NativeBaseProvider","Switch","jest","useFakeTimers","describe","it","getAllByRole","frame","x","y","width","height","insets","top","left","right","bottom","switches","expect","props","value","toBe","disabled"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,MAAT,QAAuB,+BAAvB;AACA,SAASC,kBAAT,QAAmC,qCAAnC;AAEA,OAAOC,MAAP,MAAmB,UAAnB;AAEAC,IAAI,CAACC,aAAL;AACAC,QAAQ,CAAC,QAAD,EAAW,MAAM;AACvBC,EAAAA,EAAE,CAAC,wBAAD,EAA2B,MAAM;AACjC,QAAI;AAAEC,MAAAA;AAAF,QAAmBP,MAAM,eAC3B,oBAAC,kBAAD;AACE,MAAA,oBAAoB,EAAE;AACpBQ,QAAAA,KAAK,EAAE;AAAEC,UAAAA,CAAC,EAAE,CAAL;AAAQC,UAAAA,CAAC,EAAE,CAAX;AAAcC,UAAAA,KAAK,EAAE,CAArB;AAAwBC,UAAAA,MAAM,EAAE;AAAhC,SADa;AAEpBC,QAAAA,MAAM,EAAE;AAAEC,UAAAA,GAAG,EAAE,CAAP;AAAUC,UAAAA,IAAI,EAAE,CAAhB;AAAmBC,UAAAA,KAAK,EAAE,CAA1B;AAA6BC,UAAAA,MAAM,EAAE;AAArC;AAFY;AADxB,oBAME,oBAAC,MAAD;AAAQ,MAAA,gBAAgB;AAAxB,MANF,CAD2B,CAA7B;AAUA,QAAIC,QAAQ,GAAGX,YAAY,CAAC,QAAD,CAA3B;AACAY,IAAAA,MAAM,CAACD,QAAQ,CAAC,CAAD,CAAR,CAAYE,KAAZ,CAAkBC,KAAnB,CAAN,CAAgCC,IAAhC,CAAqC,IAArC;AACD,GAbC,CAAF;AAeAhB,EAAAA,EAAE,CAAC,iBAAD,EAAoB,MAAM;AAC1B,QAAI;AAAEC,MAAAA;AAAF,QAAmBP,MAAM,eAC3B,oBAAC,kBAAD;AACE,MAAA,oBAAoB,EAAE;AACpBQ,QAAAA,KAAK,EAAE;AAAEC,UAAAA,CAAC,EAAE,CAAL;AAAQC,UAAAA,CAAC,EAAE,CAAX;AAAcC,UAAAA,KAAK,EAAE,CAArB;AAAwBC,UAAAA,MAAM,EAAE;AAAhC,SADa;AAEpBC,QAAAA,MAAM,EAAE;AAAEC,UAAAA,GAAG,EAAE,CAAP;AAAUC,UAAAA,IAAI,EAAE,CAAhB;AAAmBC,UAAAA,KAAK,EAAE,CAA1B;AAA6BC,UAAAA,MAAM,EAAE;AAArC;AAFY;AADxB,oBAME,oBAAC,MAAD;AAAQ,MAAA,UAAU;AAAlB,MANF,CAD2B,CAA7B;AAUA,QAAIC,QAAQ,GAAGX,YAAY,CAAC,QAAD,CAA3B;AACAY,IAAAA,MAAM,CAACD,QAAQ,CAAC,CAAD,CAAR,CAAYE,KAAZ,CAAkBG,QAAnB,CAAN,CAAmCD,IAAnC,CAAwC,IAAxC;AACD,GAbC,CAAF;AAcD,CA9BO,CAAR","sourcesContent":["import React from 'react';\nimport { render } from '@testing-library/react-native';\nimport { NativeBaseProvider } from '../../../../core/NativeBaseProvider';\n\nimport Switch from '../index';\n\njest.useFakeTimers();\ndescribe('Switch', () => {\n  it('can be default checked', () => {\n    let { getAllByRole } = render(\n      <NativeBaseProvider\n        initialWindowMetrics={{\n          frame: { x: 0, y: 0, width: 0, height: 0 },\n          insets: { top: 0, left: 0, right: 0, bottom: 0 },\n        }}\n      >\n        <Switch defaultIsChecked />\n      </NativeBaseProvider>\n    );\n    let switches = getAllByRole('switch');\n    expect(switches[0].props.value).toBe(true);\n  });\n\n  it('can be disabled', () => {\n    let { getAllByRole } = render(\n      <NativeBaseProvider\n        initialWindowMetrics={{\n          frame: { x: 0, y: 0, width: 0, height: 0 },\n          insets: { top: 0, left: 0, right: 0, bottom: 0 },\n        }}\n      >\n        <Switch isDisabled />\n      </NativeBaseProvider>\n    );\n    let switches = getAllByRole('switch');\n    expect(switches[0].props.disabled).toBe(true);\n  });\n});\n"]}