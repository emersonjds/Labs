{"version":3,"sources":["PopoverCloseButton.tsx"],"names":["React","usePropsResolution","Pressable","CloseIcon","PopoverContext","useHasResponsiveProps","useHover","useFocus","useIsPressed","composeEventHandlers","useFocusRing","PopoverCloseButton","props","ref","onClose","useContext","hoverProps","isHovered","pressableProps","isPressed","focusProps","isFocused","isFocusVisible","focusRingProps","_icon","onPressIn","onPressOut","onHoverIn","onHoverOut","onFocus","onBlur","resolvedProps","memo","forwardRef"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,kBAAT,QAAmC,gBAAnC;AACA,SAASC,SAAT,QAA0B,4BAA1B;AACA,SAASC,SAAT,QAA0B,6BAA1B;AACA,SAASC,cAAT,QAA+B,kBAA/B;AAEA,SAASC,qBAAT,QAAsC,sCAAtC;AACA,SACEC,QADF,EAEEC,QAFF,EAGEC,YAHF,QAIO,sCAJP;AAKA,SAASC,oBAAT,QAAqC,gBAArC;AACA,SAASC,YAAT,QAA6B,0BAA7B;;AAEA,MAAMC,kBAAkB,GAAG,CAACC,KAAD,EAAsBC,GAAtB,KAAmC;AAC5D,QAAM;AAAEC,IAAAA;AAAF,MAAmBd,KAAK,CAACe,UAAN,CAAiBX,cAAjB,CAAzB;AACA,QAAM;AAAEY,IAAAA,UAAF;AAAcC,IAAAA;AAAd,MAA4BX,QAAQ,EAA1C;AACA,QAAM;AAAEY,IAAAA,cAAF;AAAkBC,IAAAA;AAAlB,MAAgCX,YAAY,EAAlD;AACA,QAAM;AAAEY,IAAAA,UAAF;AAAcC,IAAAA;AAAd,MAA4Bd,QAAQ,EAA1C;AACA,QAAM;AAAEe,IAAAA,cAAF;AAAkBF,IAAAA,UAAU,EAAEG;AAA9B,MAAsDb,YAAY,EAAxE;AAEA,QAAM;AACJc,IAAAA,KADI;AAEJC,IAAAA,SAFI;AAGJC,IAAAA,UAHI;AAIJC,IAAAA,SAJI;AAKJC,IAAAA,UALI;AAMJC,IAAAA,OANI;AAOJC,IAAAA,MAPI;AAQJ,OAAGC;AARC,MASF9B,kBAAkB,CAAC,oBAAD,EAAuBW,KAAvB,EAA8B;AAClDK,IAAAA,SADkD;AAElDE,IAAAA,SAFkD;AAGlDE,IAAAA,SAHkD;AAIlDC,IAAAA;AAJkD,GAA9B,CATtB,CAP4D,CAsB5D;;AACA,MAAIjB,qBAAqB,CAACO,KAAD,CAAzB,EAAkC;AAChC,WAAO,IAAP;AACD;;AACD,sBACE,oBAAC,SAAD;AACE,IAAA,iBAAiB,EAAC,QADpB;AAEE,IAAA,GAAG,EAAEC,GAFP;AAGE,IAAA,SAAS,EAAEJ,oBAAoB,CAACgB,SAAD,EAAYP,cAAc,CAACO,SAA3B,CAHjC;AAIE,IAAA,UAAU,EAAEhB,oBAAoB,CAACiB,UAAD,EAAaR,cAAc,CAACQ,UAA5B,CAJlC,CAKE;AALF;AAME,IAAA,SAAS,EAAEjB,oBAAoB,CAACkB,SAAD,EAAYX,UAAU,CAACW,SAAvB,CANjC,CAOE;AAPF;AAQE,IAAA,UAAU,EAAElB,oBAAoB,CAACmB,UAAD,EAAaZ,UAAU,CAACY,UAAxB,CARlC,CASE;AATF;AAUE,IAAA,OAAO,EAAEnB,oBAAoB,CAC3BA,oBAAoB,CAACoB,OAAD,EAAUT,UAAU,CAACS,OAArB,CADO,EAE3BN,cAAc,CAACM,OAFY,CAV/B,CAcE;AAdF;AAeE,IAAA,MAAM,EAAEpB,oBAAoB,CAC1BA,oBAAoB,CAACqB,MAAD,EAASV,UAAU,CAACU,MAApB,CADM,EAE1BP,cAAc,CAACO,MAFW,CAf9B;AAmBE,IAAA,OAAO,EAAEhB;AAnBX,KAoBMiB,aApBN,gBAsBE,oBAAC,SAAD,EAAeP,KAAf,CAtBF,CADF;AA0BD,CApDD;;AAsDA,4BAAexB,KAAK,CAACgC,IAAN,eAAWhC,KAAK,CAACiC,UAAN,CAAiBtB,kBAAjB,CAAX,CAAf","sourcesContent":["import React from 'react';\nimport { usePropsResolution } from '../../../hooks';\nimport { Pressable } from '../../primitives/Pressable';\nimport { CloseIcon } from '../../primitives/Icon/Icons';\nimport { PopoverContext } from './PopoverContext';\nimport type { IButtonProps } from '../../primitives/Button';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\nimport {\n  useHover,\n  useFocus,\n  useIsPressed,\n} from '../../primitives/Pressable/Pressable';\nimport { composeEventHandlers } from '../../../utils';\nimport { useFocusRing } from '@react-native-aria/focus';\n\nconst PopoverCloseButton = (props: IButtonProps, ref: any) => {\n  const { onClose }: any = React.useContext(PopoverContext);\n  const { hoverProps, isHovered } = useHover();\n  const { pressableProps, isPressed } = useIsPressed();\n  const { focusProps, isFocused } = useFocus();\n  const { isFocusVisible, focusProps: focusRingProps }: any = useFocusRing();\n\n  const {\n    _icon,\n    onPressIn,\n    onPressOut,\n    onHoverIn,\n    onHoverOut,\n    onFocus,\n    onBlur,\n    ...resolvedProps\n  } = usePropsResolution('PopoverCloseButton', props, {\n    isHovered,\n    isPressed,\n    isFocused,\n    isFocusVisible,\n  });\n  //TODO: refactor for responsive prop\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n  return (\n    <Pressable\n      accessibilityRole=\"button\"\n      ref={ref}\n      onPressIn={composeEventHandlers(onPressIn, pressableProps.onPressIn)}\n      onPressOut={composeEventHandlers(onPressOut, pressableProps.onPressOut)}\n      // @ts-ignore - web only\n      onHoverIn={composeEventHandlers(onHoverIn, hoverProps.onHoverIn)}\n      // @ts-ignore - web only\n      onHoverOut={composeEventHandlers(onHoverOut, hoverProps.onHoverOut)}\n      // @ts-ignore - web only\n      onFocus={composeEventHandlers(\n        composeEventHandlers(onFocus, focusProps.onFocus),\n        focusRingProps.onFocus\n      )}\n      // @ts-ignore - web only\n      onBlur={composeEventHandlers(\n        composeEventHandlers(onBlur, focusProps.onBlur),\n        focusRingProps.onBlur\n      )}\n      onPress={onClose}\n      {...resolvedProps}\n    >\n      <CloseIcon {..._icon} />\n    </Pressable>\n  );\n};\n\nexport default React.memo(React.forwardRef(PopoverCloseButton));\n"]}