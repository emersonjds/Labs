{"version":3,"sources":["NumberInput.tsx"],"names":["React","useThemeProps","useFormControlContext","NumberInputContext","Box","useHasResponsiveProps","NumberInput","children","props","ref","defaultValue","keepWithinRange","value","min","max","onChange","newProps","formControlContext","numberInputValue","setNumberInputValue","useState","parseInt","numberInputStepper","setNumberInputStepper","handleChange","newValue","temp","handleChangeWithoutCheck","useEffect","undefined","isControlled","memo","forwardRef"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,aAAT,QAA8B,gBAA9B;AACA,SAASC,qBAAT,QAAsC,gBAAtC;AAEA,SAASC,kBAAT,QAAmC,WAAnC;AACA,OAAOC,GAAP,MAAgB,sBAAhB;AACA,SAASC,qBAAT,QAAsC,sCAAtC;;AAEA,MAAMC,WAAW,GAAG,CAAC;AAAEC,EAAAA,QAAF;AAAY,KAAGC;AAAf,CAAD,EAA4CC,GAA5C,KAA0D;AAC5E,QAAM;AACJC,IAAAA,YADI;AAEJC,IAAAA,eAFI;AAGJC,IAAAA,KAHI;AAIJC,IAAAA,GAJI;AAKJC,IAAAA,GALI;AAMJC,IAAAA,QANI;AAOJ,OAAGC;AAPC,MAQFf,aAAa,CAAC,aAAD,EAAgBO,KAAhB,CARjB;AASA,QAAMS,kBAAkB,GAAGf,qBAAqB,EAAhD;AAEA,QAAM,CAACgB,gBAAD,EAAmBC,mBAAnB,IAA0CnB,KAAK,CAACoB,QAAN,CAC9CC,QAAQ,CAACT,KAAK,IAAIF,YAAV,EAAwB,EAAxB,CADsC,CAAhD;AAGA,QAAM,CAACY,kBAAD,EAAqBC,qBAArB,IAA8CvB,KAAK,CAACoB,QAAN,CAAe,IAAf,CAApD;;AACA,QAAMI,YAAY,GAAIC,QAAD,IAAsB;AACzC,UAAMC,IAAI,GAAGD,QAAb;AACAN,IAAAA,mBAAmB,CAACO,IAAD,CAAnB;;AACA,QAAIf,eAAJ,EAAqB;AACnB,UAAIc,QAAQ,GAAGZ,GAAf,EAAoBM,mBAAmB,CAACN,GAAD,CAAnB,CAApB,KACK,IAAIY,QAAQ,GAAGX,GAAf,EAAoBK,mBAAmB,CAACL,GAAD,CAAnB;AAC1B,KANwC,CAOzC;;;AACAC,IAAAA,QAAQ,IAAIA,QAAQ,CAACW,IAAD,CAApB;AACD,GATD;;AAUA,QAAMC,wBAAwB,GAAIF,QAAD,IAAsB;AACrD,UAAMC,IAAI,GAAGD,QAAb;AACAN,IAAAA,mBAAmB,CAACO,IAAD,CAAnB;AACD,GAHD;;AAKA1B,EAAAA,KAAK,CAAC4B,SAAN,CAAgB,MAAM;AACpB,QAAIhB,KAAK,KAAKiB,SAAV,IAAuBjB,KAAK,IAAIM,gBAApC,EACEC,mBAAmB,CAACP,KAAD,CAAnB;AACH,GAHD,EAGG,CAACA,KAAD,EAAQM,gBAAR,EAA0BC,mBAA1B,CAHH,EA/B4E,CAmC5E;;AACA,MAAId,qBAAqB,CAACG,KAAD,CAAzB,EAAkC;AAChC,WAAO,IAAP;AACD;;AACD,sBACE,oBAAC,GAAD;AAAK,IAAA,GAAG,EAAEC;AAAV,kBACE,oBAAC,kBAAD,CAAoB,QAApB;AACE,IAAA,KAAK,EAAE,EACL,GAAGQ,kBADE;AAEL,SAAGD,QAFE;AAGLH,MAAAA,GAHK;AAILC,MAAAA,GAJK;AAKLU,MAAAA,YALK;AAMLG,MAAAA,wBANK;AAOLT,MAAAA,gBAPK;AAQLI,MAAAA,kBARK;AASLC,MAAAA,qBATK;AAULO,MAAAA,YAAY,EAAElB,KAAK,KAAKiB;AAVnB;AADT,KAcGtB,QAdH,CADF,CADF;AAoBD,CA3DD;;AA6DA,4BAAeP,KAAK,CAAC+B,IAAN,eAAW/B,KAAK,CAACgC,UAAN,CAAiB1B,WAAjB,CAAX,CAAf","sourcesContent":["import React from 'react';\nimport { useThemeProps } from '../../../hooks';\nimport { useFormControlContext } from '../FormControl';\nimport type { INumberInputProps } from './types';\nimport { NumberInputContext } from './Context';\nimport Box from '../../primitives/Box';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\n\nconst NumberInput = ({ children, ...props }: INumberInputProps, ref?: any) => {\n  const {\n    defaultValue,\n    keepWithinRange,\n    value,\n    min,\n    max,\n    onChange,\n    ...newProps\n  } = useThemeProps('NumberInput', props);\n  const formControlContext = useFormControlContext();\n\n  const [numberInputValue, setNumberInputValue] = React.useState(\n    parseInt(value || defaultValue, 10)\n  );\n  const [numberInputStepper, setNumberInputStepper] = React.useState(null);\n  const handleChange = (newValue: number) => {\n    const temp = newValue;\n    setNumberInputValue(temp);\n    if (keepWithinRange) {\n      if (newValue < min) setNumberInputValue(min);\n      else if (newValue > max) setNumberInputValue(max);\n    }\n    //NOTE: only calling onChange on stepper click or blur event of input.\n    onChange && onChange(temp);\n  };\n  const handleChangeWithoutCheck = (newValue: number) => {\n    const temp = newValue;\n    setNumberInputValue(temp);\n  };\n\n  React.useEffect(() => {\n    if (value !== undefined && value != numberInputValue)\n      setNumberInputValue(value);\n  }, [value, numberInputValue, setNumberInputValue]);\n  //TODO: refactor for responsive prop\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n  return (\n    <Box ref={ref}>\n      <NumberInputContext.Provider\n        value={{\n          ...formControlContext,\n          ...newProps,\n          min,\n          max,\n          handleChange,\n          handleChangeWithoutCheck,\n          numberInputValue,\n          numberInputStepper,\n          setNumberInputStepper,\n          isControlled: value !== undefined,\n        }}\n      >\n        {children}\n      </NumberInputContext.Provider>\n    </Box>\n  );\n};\n\nexport default React.memo(React.forwardRef(NumberInput));\n"]}