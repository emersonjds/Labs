{"version":3,"sources":["createContext.tsx"],"names":["React","createContext","rootComponentName","Context","Provider","props","children","providerProps","value","useMemo","Object","values","useContext","consumerName","context","Error","displayName"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;;AAEA,SAASC,aAAT,CACEC,iBADF,EAEE;AACA,QAAMC,OAAO,gBAAGH,KAAK,CAACC,aAAN,CAAsC,IAAtC,CAAhB;;AAEA,WAASG,QAAT,CAAkBC,KAAlB,EAA2E;AACzE,UAAM;AAAEC,MAAAA,QAAF;AAAY,SAAGC;AAAf,QAAiCF,KAAvC,CADyE,CAEzE;;AACA,UAAMG,KAAK,GAAGR,KAAK,CAACS,OAAN,CACZ,MAAMF,aADM,EAEZ;AACAG,IAAAA,MAAM,CAACC,MAAP,CAAcJ,aAAd,CAHY,CAAd;AAKA,wBAAO,oBAAC,OAAD,CAAS,QAAT;AAAkB,MAAA,KAAK,EAAEC;AAAzB,OAAiCF,QAAjC,CAAP;AACD;;AAED,WAASM,UAAT,CAAoBC,YAApB,EAA0C;AACxC,UAAMC,OAAO,GAAGd,KAAK,CAACY,UAAN,CAAiBT,OAAjB,CAAhB;;AACA,QAAIW,OAAO,KAAK,IAAhB,EAAsB;AACpB,YAAM,IAAIC,KAAJ,YACCF,YADD,oCACyCX,iBADzC,OAAN;AAGD;;AACD,WAAOY,OAAP;AACD;;AAEDV,EAAAA,QAAQ,CAACY,WAAT,GAAuBd,iBAAiB,GAAG,UAA3C;AACA,SAAO,CAACE,QAAD,EAAWQ,UAAX,CAAP;AACD;;AAED,SAASX,aAAT","sourcesContent":["import React from 'react';\n\nfunction createContext<ContextValueType extends object>(\n  rootComponentName: string\n) {\n  const Context = React.createContext<ContextValueType>(null as any);\n\n  function Provider(props: ContextValueType & { children: React.ReactNode }) {\n    const { children, ...providerProps } = props;\n    // Only re-memoize when prop values change\n    const value = React.useMemo(\n      () => providerProps,\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n      Object.values(providerProps)\n    ) as ContextValueType;\n    return <Context.Provider value={value}>{children}</Context.Provider>;\n  }\n\n  function useContext(consumerName: string) {\n    const context = React.useContext(Context);\n    if (context === null) {\n      throw new Error(\n        `\\`${consumerName}\\` must be used within \\`${rootComponentName}\\``\n      );\n    }\n    return context;\n  }\n\n  Provider.displayName = rootComponentName + 'Provider';\n  return [Provider, useContext] as const;\n}\n\nexport { createContext };\n"]}