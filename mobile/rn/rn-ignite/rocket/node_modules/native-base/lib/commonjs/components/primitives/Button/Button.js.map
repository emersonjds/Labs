{"version":3,"sources":["Button.tsx"],"names":["Button","children","startIcon","rightIcon","leftIcon","endIcon","spinner","isDisabled","isLoading","isHovered","isHoveredProp","isPressed","isPressedProp","isFocused","isFocusedProp","isFocusVisible","isFocusVisibleProp","spinnerPlacement","props","ref","hoverProps","pressableProps","focusProps","focusRingProps","onPressIn","onPressOut","onHoverIn","onHoverOut","onFocus","onBlur","_text","_stack","_spinner","isLoadingText","_icon","resolvedProps","React","isValidElement","Children","map","child","index","cloneElement","key","spinnerElement","color","boxChildren","accessibilityRole"],"mappings":"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","sourcesContent":["import React, { memo, forwardRef } from 'react';\nimport Spinner from '../Spinner';\nimport { usePropsResolution } from '../../../hooks/useThemeProps';\nimport { default as Box, IBoxProps } from '../Box';\nimport HStack from '../Stack/HStack';\nimport { Pressable } from '../Pressable';\nimport type { IButtonProps } from './types';\nimport { composeEventHandlers } from '../../../utils';\nimport {\n  useHover,\n  useFocus,\n  useIsPressed,\n} from '../../primitives/Pressable/Pressable';\nimport { useFocusRing } from '@react-native-aria/focus';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\n\nconst Button = (\n  {\n    //@ts-ignore\n    children,\n    startIcon,\n    rightIcon,\n    leftIcon,\n    endIcon,\n    spinner,\n    isDisabled,\n    isLoading,\n    isHovered: isHoveredProp,\n    isPressed: isPressedProp,\n    isFocused: isFocusedProp,\n    isFocusVisible: isFocusVisibleProp,\n    spinnerPlacement = 'start',\n    ...props\n  }: IButtonProps & IBoxProps,\n  ref: any\n) => {\n  const { hoverProps, isHovered } = useHover();\n  const { pressableProps, isPressed } = useIsPressed();\n  const { focusProps, isFocused } = useFocus();\n  const { isFocusVisible, focusProps: focusRingProps }: any = useFocusRing();\n\n  const {\n    onPressIn,\n    onPressOut,\n    onHoverIn,\n    onHoverOut,\n    onFocus,\n    onBlur,\n    _text,\n    _stack,\n    _spinner,\n    isLoadingText,\n    _icon,\n    ...resolvedProps\n  } = usePropsResolution('Button', props, {\n    isDisabled,\n    isHovered: isHoveredProp || isHovered,\n    isFocused: isFocusedProp || isFocused,\n    isPressed: isPressedProp || isPressed,\n    isLoading,\n    isFocusVisible: isFocusVisibleProp || isFocusVisible,\n  });\n\n  //TODO: refactor for responsive prop\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n\n  if (leftIcon) {\n    startIcon = leftIcon;\n  }\n  if (rightIcon) {\n    endIcon = rightIcon;\n  }\n  if (endIcon && React.isValidElement(endIcon)) {\n    endIcon = React.Children.map(\n      endIcon,\n      (child: JSX.Element, index: number) => {\n        return React.cloneElement(child, {\n          key: `button-end-icon-${index}`,\n          ..._icon,\n          ...child.props,\n        });\n      }\n    );\n  }\n  if (startIcon && React.isValidElement(startIcon)) {\n    startIcon = React.Children.map(\n      startIcon,\n      (child: JSX.Element, index: number) => {\n        return React.cloneElement(child, {\n          key: `button-start-icon-${index}`,\n          ..._icon,\n          ...child.props,\n        });\n      }\n    );\n  }\n\n  const spinnerElement = spinner ? (\n    spinner\n  ) : (\n    <Spinner color={_text?.color} {..._spinner} />\n  );\n\n  const boxChildren = (child: any) => {\n    return child ? <Box _text={_text}>{child}</Box> : null;\n  };\n\n  return (\n    <Pressable\n      disabled={isDisabled || isLoading}\n      ref={ref}\n      onPressIn={composeEventHandlers(onPressIn, pressableProps.onPressIn)}\n      onPressOut={composeEventHandlers(onPressOut, pressableProps.onPressOut)}\n      // @ts-ignore - web only\n      onHoverIn={composeEventHandlers(onHoverIn, hoverProps.onHoverIn)}\n      // @ts-ignore - web only\n      onHoverOut={composeEventHandlers(onHoverOut, hoverProps.onHoverOut)}\n      // @ts-ignore - web only\n      onFocus={composeEventHandlers(\n        composeEventHandlers(onFocus, focusProps.onFocus),\n        focusRingProps.onFocus\n      )}\n      // @ts-ignore - web only\n      onBlur={composeEventHandlers(\n        composeEventHandlers(onBlur, focusProps.onBlur),\n        focusRingProps.onBlur\n      )}\n      {...resolvedProps}\n      accessibilityRole={props.accessibilityRole ?? 'button'}\n    >\n      <HStack {..._stack} test={true}>\n        {startIcon && !isLoading ? startIcon : null}\n        {isLoading && spinnerPlacement === 'start' ? spinnerElement : null}\n        {isLoading\n          ? isLoadingText\n            ? boxChildren(isLoadingText)\n            : null\n          : boxChildren(children)}\n\n        {endIcon && !isLoading ? endIcon : null}\n        {isLoading && spinnerPlacement === 'end' ? spinnerElement : null}\n      </HStack>\n    </Pressable>\n  );\n};\n\nexport default memo(forwardRef(Button));\n"]}