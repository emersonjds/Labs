{"version":3,"sources":["HybridProvider.tsx"],"names":["HybridProvider","children","options","initialColorMode","accessibleColors","isTextColorAccessible","useSystemColorMode","colorModeManager","colorMode","setColorMode","toggleColorMode","React","useCallback","setAccessibleColors","useState","contextValue","useEffect","escapeKeyListener","Platform","OS","e","key","keyboardDismissHandlerManager","length","lastHandler","pop","document","addEventListener","removeEventListener"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AACA;;AAEA;;;;;;AAEA,MAAMA,cAAc,GAAG,CAAC;AACtBC,EAAAA,QADsB;AAEtBC,EAAAA,OAAO,EAAE;AACPC,IAAAA,gBAAgB,GAAG,OADZ;AAEPC,IAAAA,gBAAgB,EAAEC,qBAAqB,GAAG,KAFnC;AAGPC,IAAAA;AAHO,GAFa;AAOtBC,EAAAA;AAPsB,CAAD,KAQQ;AAC7B;AACA,QAAM;AAAEC,IAAAA,SAAF;AAAaC,IAAAA;AAAb,MAA8B,2BAClCN,gBADkC,EAElCG,kBAFkC,EAGlCC,gBAHkC,CAApC;;AAMA,QAAMG,eAAe,GAAGC,eAAMC,WAAN,CAAkB,MAAM;AAC9CH,IAAAA,YAAY,CAACD,SAAS,KAAK,OAAd,GAAwB,MAAxB,GAAiC,OAAlC,CAAZ;AACD,GAFuB,EAErB,CAACA,SAAD,EAAYC,YAAZ,CAFqB,CAAxB,CAR6B,CAY7B;;;AACA,QAAM,CAACL,gBAAD,EAAmBS,mBAAnB,IAA0CF,eAAMG,QAAN,CAC9CT,qBAD8C,CAAhD;;AAIA,QAAMU,YAAY,GAAG,oBAAQ,MAAM;AACjC,WAAO;AACLP,MAAAA,SAAS,EAAE;AACTA,QAAAA,SADS;AAETE,QAAAA,eAFS;AAGTD,QAAAA,YAHS;AAITL,QAAAA,gBAJS;AAKTS,QAAAA;AALS;AADN,KAAP;AASD,GAVoB,EAUlB,CACDL,SADC,EAEDE,eAFC,EAGDD,YAHC,EAIDL,gBAJC,EAKDS,mBALC,CAVkB,CAArB;;AAkBAF,iBAAMK,SAAN,CAAgB,MAAM;AACpB,QAAIC,iBAAsB,GAAG,IAA7B;;AAEA,QAAIC,sBAASC,EAAT,KAAgB,KAApB,EAA2B;AACzBF,MAAAA,iBAAiB,GAAIG,CAAD,IAAsB;AACxC,YAAIA,CAAC,CAACC,GAAF,KAAU,QAAd,EAAwB;AACtB,cAAIC,sCAA8BC,MAA9B,KAAyC,CAA7C,EAAgD;AAC9C,kBAAMC,WAAgB,GAAGF,sCAA8BG,GAA9B,EAAzB;;AACAD,YAAAA,WAAW;AACZ;AACF;AACF,OAPD;;AAQAE,MAAAA,QAAQ,CAACC,gBAAT,CAA0B,SAA1B,EAAqCV,iBAArC;AACD;;AAED,WAAO,MAAM;AACX,UAAIC,sBAASC,EAAT,KAAgB,KAApB,EAA2B;AACzBO,QAAAA,QAAQ,CAACE,mBAAT,CAA6B,SAA7B,EAAwCX,iBAAxC;AACD;AACF,KAJD;AAKD,GApBD,EAoBG,EApBH;;AAsBA,sBACE,6BAAC,sBAAD,CAAe,QAAf;AAAwB,IAAA,KAAK,EAAEF;AAA/B,KACGd,QADH,CADF;AAKD,CAtED;;eAwEeD,c","sourcesContent":["import React, { useMemo } from 'react';\nimport { Platform } from 'react-native';\nimport { HybridContext } from './Context';\nimport { useModeManager } from './../color-mode/hooks';\nimport type { IColorModeProviderProps } from './../color-mode';\nimport { keyboardDismissHandlerManager } from '../../hooks';\n\nconst HybridProvider = ({\n  children,\n  options: {\n    initialColorMode = 'light',\n    accessibleColors: isTextColorAccessible = false,\n    useSystemColorMode,\n  },\n  colorModeManager,\n}: IColorModeProviderProps) => {\n  // Color-mode content\n  const { colorMode, setColorMode } = useModeManager(\n    initialColorMode,\n    useSystemColorMode,\n    colorModeManager\n  );\n\n  const toggleColorMode = React.useCallback(() => {\n    setColorMode(colorMode === 'light' ? 'dark' : 'light');\n  }, [colorMode, setColorMode]);\n\n  // Accessible color hook\n  const [accessibleColors, setAccessibleColors] = React.useState<boolean>(\n    isTextColorAccessible\n  );\n\n  const contextValue = useMemo(() => {\n    return {\n      colorMode: {\n        colorMode,\n        toggleColorMode,\n        setColorMode,\n        accessibleColors,\n        setAccessibleColors,\n      },\n    };\n  }, [\n    colorMode,\n    toggleColorMode,\n    setColorMode,\n    accessibleColors,\n    setAccessibleColors,\n  ]);\n\n  React.useEffect(() => {\n    let escapeKeyListener: any = null;\n\n    if (Platform.OS === 'web') {\n      escapeKeyListener = (e: KeyboardEvent) => {\n        if (e.key === 'Escape') {\n          if (keyboardDismissHandlerManager.length() > 0) {\n            const lastHandler: any = keyboardDismissHandlerManager.pop();\n            lastHandler();\n          }\n        }\n      };\n      document.addEventListener('keydown', escapeKeyListener);\n    }\n\n    return () => {\n      if (Platform.OS === 'web') {\n        document.removeEventListener('keydown', escapeKeyListener);\n      }\n    };\n  }, []);\n\n  return (\n    <HybridContext.Provider value={contextValue}>\n      {children}\n    </HybridContext.Provider>\n  );\n};\n\nexport default HybridProvider;\n"]}