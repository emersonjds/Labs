{"version":3,"sources":["useControllableProp.ts"],"names":["useControllableProp","prop","state","current","isControlled","React","useRef","undefined","value","useControllableState","props","valueProp","defaultValue","onChange","valueState","setValue","useState","updateValue","useCallback","next","nextValue"],"mappings":";;;;;;;;AAAA;;;;AAEO,SAASA,mBAAT,CAAgCC,IAAhC,EAAqDC,KAArD,EAA+D;AACpE,QAAM;AAAEC,IAAAA,OAAO,EAAEC;AAAX,MAA4BC,eAAMC,MAAN,CAAaL,IAAI,KAAKM,SAAtB,CAAlC;;AACA,QAAMC,KAAK,GAAGJ,YAAY,IAAI,OAAOH,IAAP,KAAgB,WAAhC,GAA8CA,IAA9C,GAAqDC,KAAnE;AACA,SAAO,CAACE,YAAD,EAAeI,KAAf,CAAP;AACD;;AAqBD;AACA;AACA;AACA;AACO,SAASC,oBAAT,CAAiCC,KAAjC,EAAsE;AAC3E,QAAM;AAAEF,IAAAA,KAAK,EAAEG,SAAT;AAAoBC,IAAAA,YAApB;AAAkCC,IAAAA;AAAlC,MAA+CH,KAArD;;AAEA,QAAM,CAACI,UAAD,EAAaC,QAAb,IAAyBV,eAAMW,QAAN,CAAeJ,YAAf,CAA/B;;AACA,QAAMR,YAAY,GAAGO,SAAS,KAAKJ,SAAnC;AAEA,QAAMC,KAAK,GAAGJ,YAAY,GAAIO,SAAJ,GAAsBG,UAAhD;;AAEA,QAAMG,WAAW,GAAGZ,eAAMa,WAAN,CACjBC,IAAD,IAAe;AACb,UAAMC,SAAS,GAAG,OAAOD,IAAP,KAAgB,UAAhB,GAA6BA,IAAI,CAACX,KAAD,CAAjC,GAA2CW,IAA7D;;AACA,QAAI,CAACf,YAAL,EAAmB;AACjBW,MAAAA,QAAQ,CAACK,SAAD,CAAR;AACD;;AACDP,IAAAA,QAAQ,IAAIA,QAAQ,CAACO,SAAD,CAApB;AACD,GAPiB,EAQlB,CAAChB,YAAD,EAAeS,QAAf,EAAyBL,KAAzB,CARkB,CAApB;;AAWA,SAAO,CAACA,KAAD,EAAQS,WAAR,CAAP;AACD","sourcesContent":["import React from 'react';\n\nexport function useControllableProp<T>(prop: T | undefined, state: T) {\n  const { current: isControlled } = React.useRef(prop !== undefined);\n  const value = isControlled && typeof prop !== 'undefined' ? prop : state;\n  return [isControlled, value] as const;\n}\n\nexport interface UseControllableStateProps<T> {\n  /**\n   * The value to used in controlled mode\n   */\n  value?: T;\n  /**\n   * The initial value to be used, in uncontrolled mode\n   */\n  defaultValue?: T | (() => T);\n  /**\n   * The callback fired when the value changes\n   */\n  onChange?: (value: T) => void;\n  /**\n   * The component name (for warnings)\n   */\n  name?: string;\n}\n\n/**\n * React hook for using controlling component state.\n * @param props\n */\nexport function useControllableState<T>(props: UseControllableStateProps<T>) {\n  const { value: valueProp, defaultValue, onChange } = props;\n\n  const [valueState, setValue] = React.useState(defaultValue as T);\n  const isControlled = valueProp !== undefined;\n\n  const value = isControlled ? (valueProp as T) : valueState;\n\n  const updateValue = React.useCallback(\n    (next: any) => {\n      const nextValue = typeof next === 'function' ? next(value) : next;\n      if (!isControlled) {\n        setValue(nextValue);\n      }\n      onChange && onChange(nextValue);\n    },\n    [isControlled, onChange, value]\n  );\n\n  return [value, updateValue] as [T, React.Dispatch<React.SetStateAction<T>>];\n}\n"]}