{"version":3,"sources":["index.tsx"],"names":["Code","props","ref","newProps","fontFamily","Platform","OS","React","memo","forwardRef"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AACA;;AAEA;;;;;;AAEA,MAAMA,IAAI,GAAG,CAAC,EAAE,GAAGC;AAAL,CAAD,EAA2BC,GAA3B,KAAyC;AACpD,MAAI,EAAE,GAAGC;AAAL,MAAkB,0BAAc,MAAd,EAAsBF,KAAtB,CAAtB,CADoD,CAEpD;;AACA,MAAI,kDAAsBA,KAAtB,CAAJ,EAAkC;AAChC,WAAO,IAAP;AACD;;AACD,sBACE,6BAAC,YAAD;AACE,IAAA,KAAK,EAAE;AACLG,MAAAA,UAAU,EAAEC,sBAASC,EAAT,KAAgB,KAAhB,GAAwB,SAAxB,GAAoC;AAD3C;AADT,KAIMH,QAJN;AAKE,IAAA,GAAG,EAAED;AALP,KADF;AASD,CAfD;;4BAkBeK,eAAMC,IAAN,eAAWD,eAAME,UAAN,CAAiBT,IAAjB,CAAX,C","sourcesContent":["import React from 'react';\nimport { Platform } from 'react-native';\nimport { useThemeProps } from '../../../hooks';\nimport Box from '../../primitives/Box';\nimport type { ICodeProps } from './types';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\n\nconst Code = ({ ...props }: ICodeProps, ref?: any) => {\n  let { ...newProps } = useThemeProps('Code', props);\n  //TODO: refactor for responsive prop\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n  return (\n    <Box\n      _text={{\n        fontFamily: Platform.OS === 'ios' ? 'Courier' : 'monospace',\n      }}\n      {...newProps}\n      ref={ref}\n    />\n  );\n};\n\nexport type { ICodeProps };\nexport default React.memo(React.forwardRef(Code));\n"]}