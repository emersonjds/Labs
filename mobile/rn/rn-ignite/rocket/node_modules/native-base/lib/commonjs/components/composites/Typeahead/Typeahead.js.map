{"version":3,"sources":["Typeahead.tsx"],"names":["Typeahead","React","forwardRef","onSelectedItemChange","options","renderItem","getOptionLabel","getOptionKey","onChange","numberOfItems","rest","ref","undefined","slice","item","Error","id","optionLabel","optionKey","ComboBoxImplementation","props","layoutProps","layoutPropsList","state","triggerRef","useRef","inputRef","listBoxRef","popoverRef","buttonProps","triggerProps","inputProps","listBoxProps","labelProps","buttonRef","menuTrigger","toggleIconSetter","toggleIcon","isOpen","label","ListBoxPopup","dropdownHeight","autoFocus","focusStrategy","disallowEmptySelection","node","Platform","OS","current","collection","map","key","Option","searchItemStyle","isDisabled","disabledKeys","has","isSelected","selectionManager","isFocused","focusedKey","optionProps","shouldFocusOnHover","shouldUseVirtualFocus","backgroundColor","opacity","_focus","_disabled","rendered"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { useButton } from '@react-native-aria/button';\nimport { ComboBoxState, useComboBoxState } from '@react-stately/combobox';\nimport { useComboBox } from '@react-native-aria/combobox';\nimport { useListBox, useOption } from '@react-native-aria/listbox';\nimport { ScrollView, findNodeHandle, Platform } from 'react-native';\nimport { Item } from '@react-stately/collections';\nimport Box from '../../primitives/Box';\nimport { Pressable } from '../../primitives/Pressable';\nimport Text from '../../primitives/Text';\nimport { extractInObject } from '../../../theme/tools';\nimport { ITypeaheadProps, IComboBoxProps, layoutPropsList } from './types';\nimport { Input } from '../../primitives/Input';\nimport { useThemeProps } from '../../../hooks';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\n\nexport const Typeahead = React.forwardRef(\n  (\n    {\n      onSelectedItemChange,\n      options,\n      renderItem,\n      getOptionLabel,\n      getOptionKey,\n      onChange,\n      numberOfItems,\n      ...rest\n    }: ITypeaheadProps,\n    ref?: any\n  ) => {\n    //TODO: refactor for responsive prop\n    if (useHasResponsiveProps(rest)) {\n      return null;\n    }\n    return (\n      <ComboBoxImplementation\n        {...rest}\n        onSelectionChange={onSelectedItemChange}\n        items={\n          numberOfItems !== undefined\n            ? options.slice(0, numberOfItems)\n            : options\n        }\n        onInputChange={onChange}\n        ref={ref}\n      >\n        {(item: any) => {\n          if (typeof item !== 'string' && getOptionLabel === undefined) {\n            throw new Error('Please use getOptionLabel prop');\n          }\n\n          if (item.id === undefined && getOptionKey === undefined) {\n            throw new Error('Please use getOptionKey prop');\n          }\n\n          const optionLabel = getOptionLabel ? getOptionLabel(item) : item;\n          const optionKey = getOptionKey\n            ? getOptionKey(item)\n            : item.id !== undefined\n            ? item.id\n            : optionLabel;\n\n          return (\n            <Item textValue={optionLabel} key={optionKey}>\n              {renderItem ? (\n                renderItem(item)\n              ) : (\n                <Box p={2} justifyContent=\"center\">\n                  <Text>{optionLabel}</Text>\n                </Box>\n              )}\n            </Item>\n          );\n        }}\n      </ComboBoxImplementation>\n    );\n  }\n);\n\nconst ComboBoxImplementation = React.forwardRef(\n  (props: IComboBoxProps, ref?: any) => {\n    const [layoutProps] = extractInObject(props, layoutPropsList);\n    let state = useComboBoxState(props);\n\n    let triggerRef = React.useRef(null);\n    let inputRef = React.useRef(null);\n    let listBoxRef = React.useRef(null);\n    let popoverRef = React.useRef(null);\n\n    let {\n      buttonProps: triggerProps,\n      inputProps,\n      listBoxProps,\n      labelProps,\n    } = useComboBox(\n      {\n        ...props,\n        inputRef,\n        buttonRef: triggerRef,\n        listBoxRef,\n        popoverRef,\n        menuTrigger: 'input',\n      },\n      state\n    );\n\n    const toggleIconSetter = () => {\n      if (typeof props.toggleIcon === 'function')\n        return props.toggleIcon({\n          isOpen: state.isOpen,\n        });\n      return props.toggleIcon;\n    };\n\n    let { buttonProps } = useButton(triggerProps);\n\n    return (\n      <Box flexDirection=\"row\" {...layoutProps} ref={ref}>\n        <Box flex={1}>\n          {props.label && (\n            <Text {...labelProps} pb={1}>\n              {props.label}\n            </Text>\n          )}\n          <Input\n            {...inputProps}\n            ref={inputRef}\n            InputRightElement={\n              // @ts-ignore - RN has hitSlop type inconsistent for View and Pressable!\n              <Pressable {...buttonProps} ref={triggerRef}>\n                {toggleIconSetter()}\n              </Pressable>\n            }\n          />\n\n          {state.isOpen && (\n            <ListBoxPopup\n              {...listBoxProps}\n              listBoxRef={listBoxRef}\n              popoverRef={popoverRef}\n              state={state}\n              label={props.label}\n            />\n          )}\n        </Box>\n      </Box>\n    );\n  }\n);\n\ntype IListBoxProps = {\n  popoverRef: any;\n  listBoxRef: any;\n  state: ComboBoxState<any>;\n  dropdownHeight: number;\n  label: string;\n};\n\nfunction ListBoxPopup(props: IListBoxProps) {\n  let { popoverRef, listBoxRef, state, dropdownHeight, label } = props;\n\n  let { listBoxProps } = useListBox(\n    {\n      label,\n      autoFocus: state.focusStrategy,\n      disallowEmptySelection: true,\n    },\n    state,\n    listBoxRef\n  );\n\n  return (\n    <Box ref={popoverRef}>\n      <Box position=\"absolute\" width=\"100%\" maxHeight={dropdownHeight ?? 200}>\n        <ScrollView\n          {...listBoxProps}\n          keyboardShouldPersistTaps=\"handled\"\n          ref={(node) => {\n            if (Platform.OS === 'web') {\n              listBoxRef.current = findNodeHandle(node);\n            } else {\n              listBoxRef.current = node;\n            }\n          }}\n        >\n          {[...state.collection].map((item) => (\n            <Option key={item.key} item={item} state={state} />\n          ))}\n        </ScrollView>\n      </Box>\n    </Box>\n  );\n}\n\nfunction Option({ item, state }: { item: any; state: ComboBoxState<any> }) {\n  const searchItemStyle = useThemeProps('TypeAheadSearchItem', {});\n\n  let ref = React.useRef(null);\n  let isDisabled = state.disabledKeys.has(item.key);\n  let isSelected = state.selectionManager.isSelected(item.key);\n  let isFocused = state.selectionManager.focusedKey === item.key;\n\n  let { optionProps } = useOption(\n    {\n      key: item.key,\n      isDisabled,\n      isSelected,\n      shouldFocusOnHover: true,\n      shouldUseVirtualFocus: true,\n    },\n    state,\n    ref\n  );\n\n  let backgroundColor = searchItemStyle.backgroundColor;\n  let opacity = 1;\n\n  if (isSelected) {\n    backgroundColor = searchItemStyle._focus.backgroundColor;\n  } else if (isFocused) {\n    backgroundColor = searchItemStyle._focus.backgroundColor;\n  } else if (isDisabled) {\n    opacity = 0.6;\n    backgroundColor = searchItemStyle._disabled.backgroundColor;\n  }\n\n  return (\n    <Pressable\n      {...optionProps}\n      opacity={opacity}\n      cursor={\n        isDisabled ? (Platform.OS === 'web' ? 'not-allowed' : null) : null\n      }\n      backgroundColor={backgroundColor}\n      ref={ref}\n    >\n      {item.rendered}\n    </Pressable>\n  );\n}\n"]}