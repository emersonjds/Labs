{"version":3,"sources":["Actionsheet.tsx"],"names":["Actionsheet","children","hideDragIndicator","props","ref","isOpen","disableOverlay","onClose","resolvedProps","overlayStyle","Platform","OS","position","style"],"mappings":";;;;;;;AAAA;;AACA;;AAEA;;AACA;;AACA;;AACA;;;;;;;;AAEA,MAAMA,WAAW,GAAG,CAClB;AAAEC,EAAAA,QAAF;AAAYC,EAAAA,iBAAiB,GAAG,KAAhC;AAAuC,KAAGC;AAA1C,CADkB,EAElBC,GAFkB,KAGf;AACH,QAAM;AACJC,IAAAA,MADI;AAEJC,IAAAA,cAFI;AAGJC,IAAAA,OAHI;AAIJ,OAAGC;AAJC,MAKF,+BAAmB,aAAnB,EAAkCL,KAAlC,CALJ,CADG,CAQH;;AACA,MAAI,kDAAsBA,KAAtB,CAAJ,EAAkC;AAChC,WAAO,IAAP;AACD,GAXE,CAYH;;;AACA,MAAIM,YAAY,GAAGC,sBAASC,EAAT,KAAgB,KAAhB,GAAwB;AAAEC,IAAAA,QAAQ,EAAE;AAAZ,GAAxB,GAAgD,EAAnE;AAEA,sBACE,6BAAC,YAAD;AACE,IAAA,MAAM,EAAEP,MADV;AAEE,IAAA,OAAO,EAAEE;AAFX,KAGMC,aAHN;AAIE,IAAA,cAAc,EAAEF,cAAc,GAAG,KAAH,GAAW,IAJ3C;AAKE,IAAA,mBAAmB,EAAEA,cAAc,GAAG,KAAH,GAAW,IALhD;AAME,IAAA,GAAG,EAAEF,GANP;AAOE,IAAA,QAAQ,EAAE;AAAES,MAAAA,KAAK,EAAEJ;AAAT;AAPZ,mBASE,6BAAC,sCAAD,CAAoB,QAApB;AAA6B,IAAA,KAAK,EAAE;AAAEP,MAAAA;AAAF;AAApC,KACGD,QADH,CATF,CADF;AAeD,CAjCD;;4BAmCe,+BAAK,uBAAWD,WAAX,CAAL,C","sourcesContent":["import React, { memo, forwardRef } from 'react';\nimport { Modal } from '../../composites/Modal';\nimport type { IActionsheetProps } from './types';\nimport { usePropsResolution } from '../../../hooks';\nimport { ActionSheetContext } from './ActionSheetContext';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\nimport { Platform } from 'react-native';\n\nconst Actionsheet = (\n  { children, hideDragIndicator = false, ...props }: IActionsheetProps,\n  ref: any\n) => {\n  const {\n    isOpen,\n    disableOverlay,\n    onClose,\n    ...resolvedProps\n  } = usePropsResolution('Actionsheet', props);\n\n  //TODO: refactor for responsive prop\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n  //Fixing overlay position for Web due to scrollView issue\n  let overlayStyle = Platform.OS === 'web' ? { position: 'fixed' } : {};\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      {...resolvedProps}\n      overlayVisible={disableOverlay ? false : true}\n      closeOnOverlayClick={disableOverlay ? false : true}\n      ref={ref}\n      _overlay={{ style: overlayStyle }}\n    >\n      <ActionSheetContext.Provider value={{ hideDragIndicator }}>\n        {children}\n      </ActionSheetContext.Provider>\n    </Modal>\n  );\n};\n\nexport default memo(forwardRef(Actionsheet));\n"]}