{"version":3,"sources":["ActionsheetContent.tsx"],"names":["Content","hideDragIndicator","children","handleClose","pan","sheetHeight","props","ref","_dragIndicator","_dragIndicatorWrapperOffSet","_dragIndicatorWrapper","resolvedProps","panResponder","React","useRef","PanResponder","create","onStartShouldSetPanResponder","onMoveShouldSetPanResponder","_evt","gestureState","dy","onPanResponderMove","e","Animated","event","y","useNativeDriver","onPanResponderRelease","_e","current","timing","toValue","x","duration","start","setTimeout","spring","overshootClamping","panHandlers","ActionsheetContent","useContext","ModalContext","ActionSheetContext","ValueXY","handleCloseCallback","useCallback","transform","translateY","width","height","nativeEvent","layout"],"mappings":"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","sourcesContent":["import React, { memo, forwardRef } from 'react';\nimport { Modal } from '../../composites/Modal';\nimport type { IActionsheetContentProps } from './types';\nimport { usePropsResolution } from '../../../hooks';\nimport { Animated, PanResponder } from 'react-native';\nimport { ModalContext } from '../Modal/Context';\nimport Box from '../../primitives/Box';\nimport { ActionSheetContext } from './ActionSheetContext';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\n\nconst Content = memo(\n  forwardRef(\n    (\n      {\n        hideDragIndicator,\n        children,\n        handleClose,\n        pan,\n        sheetHeight,\n        ...props\n      }: any,\n      ref: any\n    ) => {\n      const {\n        _dragIndicator,\n        _dragIndicatorWrapperOffSet,\n        _dragIndicatorWrapper,\n        ...resolvedProps\n      } = usePropsResolution('ActionsheetContent', props);\n\n      const panResponder = React.useRef(\n        PanResponder.create({\n          onStartShouldSetPanResponder: () => true,\n          onMoveShouldSetPanResponder: (_evt, gestureState) => {\n            return gestureState.dy > 15;\n          },\n          onPanResponderMove: (e, gestureState) => {\n            if (gestureState.dy > 0) {\n              Animated.event([null, { dy: pan.y }], {\n                useNativeDriver: false,\n              })(e, gestureState);\n            }\n          },\n          onPanResponderRelease: (_e, gestureState) => {\n            // If sheet is dragged 1/4th of it's height, close it\n            if (sheetHeight.current / 4 - gestureState.dy < 0) {\n              Animated.timing(pan, {\n                toValue: { x: 0, y: sheetHeight.current },\n                duration: 150,\n                useNativeDriver: true,\n              }).start(handleClose);\n\n              setTimeout(() => {\n                Animated.timing(pan, {\n                  toValue: { x: 0, y: 0 },\n                  duration: 150,\n                  useNativeDriver: true,\n                }).start();\n              }, 300);\n            } else {\n              Animated.spring(pan, {\n                toValue: { x: 0, y: 0 },\n                overshootClamping: true,\n                useNativeDriver: true,\n              }).start();\n            }\n          },\n        })\n      ).current;\n\n      return (\n        <>\n          {!hideDragIndicator ? (\n            <>\n              {/* To increase the draggable area */}\n              <Box\n                {...panResponder.panHandlers}\n                {..._dragIndicatorWrapperOffSet}\n              />\n            </>\n          ) : null}\n\n          <Modal.Content {...resolvedProps} ref={ref} safeAreaBottom>\n            {!hideDragIndicator ? (\n              <>\n                {/* Hack. Fix later. Add -2 negative margin to remove the padding added by ActionSheetContent */}\n                <Box {...panResponder.panHandlers} {..._dragIndicatorWrapper}>\n                  <Box {..._dragIndicator} />\n                </Box>\n              </>\n            ) : null}\n\n            {children}\n          </Modal.Content>\n        </>\n      );\n    }\n  )\n);\nconst ActionsheetContent = (\n  { children, ...props }: IActionsheetContentProps,\n  ref?: any\n) => {\n  // return null;\n  const { handleClose } = React.useContext(ModalContext);\n  const { hideDragIndicator } = React.useContext(ActionSheetContext);\n  const pan = React.useRef(new Animated.ValueXY()).current;\n  const sheetHeight = React.useRef(0);\n\n  const handleCloseCallback = React.useCallback(handleClose, [\n    ModalContext,\n    handleClose,\n  ]);\n\n  // useEffect(() => {\n\n  // }, [])\n\n  //TODO: refactor for responsive prop\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n\n  return (\n    <Animated.View\n      style={{\n        transform: [{ translateY: pan.y }],\n        width: '100%',\n      }}\n      onLayout={(event) => {\n        const { height } = event.nativeEvent.layout;\n        sheetHeight.current = height;\n      }}\n      pointerEvents=\"box-none\"\n    >\n      <Content\n        children={children}\n        sheetHeight={sheetHeight}\n        pan={pan}\n        hideDragIndicator={hideDragIndicator}\n        handleClose={handleCloseCallback}\n        ref={ref}\n        {...props}\n      />\n    </Animated.View>\n  );\n};\n\nexport default memo(forwardRef(ActionsheetContent));\n"]}