{"version":3,"sources":["Pressable.tsx"],"names":["useHover","isHovered","setHovered","React","useState","hoverProps","onHoverIn","onHoverOut","useFocus","isFocused","setFocused","focusProps","onFocus","onBlur","useIsPressed","isPressed","setIsPressed","pressableProps","onPressIn","onPressOut","StyledPressable","RNPressable","Pressable","children","isDisabled","disabled","isHoveredProp","isPressedProp","isFocusedProp","isFocusVisible","isFocusVisibleProp","props","ref","focusRingProps","resolvedProps"],"mappings":"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","sourcesContent":["import React, { forwardRef, memo } from 'react';\nimport { Pressable as RNPressable } from 'react-native';\nimport { composeEventHandlers } from '../../../utils';\nimport type { IPressableProps } from './types';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\nimport { makeStyledComponent } from '../../../utils/styled';\nimport { usePropsResolution } from '../../../hooks/useThemeProps';\nimport { useFocusRing } from '@react-native-aria/focus';\n\nexport const useHover = () => {\n  const [isHovered, setHovered] = React.useState(false);\n  return {\n    hoverProps: {\n      onHoverIn: () => setHovered(true),\n      onHoverOut: () => setHovered(false),\n    },\n    isHovered,\n  };\n};\n\nexport const useFocus = () => {\n  const [isFocused, setFocused] = React.useState(false);\n  return {\n    focusProps: {\n      onFocus: () => setFocused(true),\n      onBlur: () => setFocused(false),\n    },\n    isFocused,\n  };\n};\n\nexport const useIsPressed = () => {\n  const [isPressed, setIsPressed] = React.useState(false);\n  return {\n    pressableProps: {\n      onPressIn: () => setIsPressed(true),\n      onPressOut: () => setIsPressed(false),\n    },\n    isPressed,\n  };\n};\n\nconst StyledPressable = makeStyledComponent(RNPressable);\n\nconst Pressable = (\n  {\n    children,\n    isDisabled,\n    disabled,\n    isHovered: isHoveredProp,\n    isPressed: isPressedProp,\n    isFocused: isFocusedProp,\n    isFocusVisible: isFocusVisibleProp,\n    ...props\n  }: IPressableProps,\n  ref: any\n) => {\n  const { hoverProps, isHovered } = useHover();\n  const { pressableProps, isPressed } = useIsPressed();\n  const { focusProps, isFocused } = useFocus();\n  const { isFocusVisible, focusProps: focusRingProps }: any = useFocusRing();\n\n  const {\n    onPressIn,\n    onPressOut,\n    onHoverIn,\n    onHoverOut,\n    onFocus,\n    onBlur,\n    ...resolvedProps\n  } = usePropsResolution('Pressable', props, {\n    isPressed: isPressedProp || isPressed,\n    isFocused: isFocusedProp || isFocused,\n    isHovered: isHoveredProp || isHovered,\n    isFocusVisible: isFocusVisibleProp || isFocusVisible,\n    isDisabled: disabled || isDisabled,\n  });\n\n  // TODO: Replace Render props with Context Hook\n\n  //TODO: refactor for responsive prop\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n\n  // TODO: Replace Render props with Context Hook\n  return (\n    <StyledPressable\n      ref={ref}\n      onPressIn={composeEventHandlers(onPressIn, pressableProps.onPressIn)}\n      onPressOut={composeEventHandlers(onPressOut, pressableProps.onPressOut)}\n      // @ts-ignore - web only\n      onHoverIn={composeEventHandlers(onHoverIn, hoverProps.onHoverIn)}\n      // @ts-ignore - web only\n      onHoverOut={composeEventHandlers(onHoverOut, hoverProps.onHoverOut)}\n      // @ts-ignore - web only\n      onFocus={composeEventHandlers(\n        composeEventHandlers(onFocus, focusProps.onFocus),\n        focusRingProps.onFocus\n      )}\n      // @ts-ignore - web only\n      onBlur={composeEventHandlers(\n        composeEventHandlers(onBlur, focusProps.onBlur),\n        focusRingProps.onBlur\n      )}\n      disabled={disabled || isDisabled}\n      {...resolvedProps}\n    >\n      {typeof children !== 'function'\n        ? children\n        : children({\n            isPressed,\n            isHovered,\n            isFocused,\n          })}\n    </StyledPressable>\n  );\n};\n\nexport default memo(forwardRef(Pressable));\n"]}