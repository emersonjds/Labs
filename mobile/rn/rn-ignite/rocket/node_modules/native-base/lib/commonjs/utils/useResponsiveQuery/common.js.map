{"version":3,"sources":["common.ts"],"names":["getResponsiveStylesImpl","width","queries","styles","initial","StyleSheet","create","flatten","query","forEach","queryRule","style","flattenQueryStyle","maxWidth","minWidth","push","rangeStyle","minWidthStyle","maxWidthStyle","useDimensionsWithEnable","enable","dimensions","setDimensions","React","useState","Dimensions","get","useEffect","handleChange","window","height","scale","fontScale","addEventListener","removeEventListener"],"mappings":"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","sourcesContent":["import type {\n  GetResponsiveStylesParams,\n  GetResponsiveStylesReturnType,\n} from './types';\nimport { Dimensions, ScaledSize, StyleSheet } from 'react-native';\nimport React from 'react';\n\nexport const getResponsiveStylesImpl = (width: number) => (\n  queries: GetResponsiveStylesParams\n): GetResponsiveStylesReturnType => {\n  if (typeof width === 'number') {\n    let styles = queries.initial\n      ? [\n          StyleSheet.create({ initial: StyleSheet.flatten(queries.initial) })\n            .initial,\n        ]\n      : [];\n\n    if (queries.query) {\n      queries.query.forEach((queryRule) => {\n        if (queryRule.style) {\n          const flattenQueryStyle = StyleSheet.flatten(queryRule.style);\n\n          if (\n            typeof queryRule.maxWidth === 'number' &&\n            typeof queryRule.minWidth === 'number'\n          ) {\n            if (width >= queryRule.minWidth && width <= queryRule.maxWidth) {\n              styles.push(\n                StyleSheet.create({ rangeStyle: flattenQueryStyle }).rangeStyle\n              );\n            }\n          } else if (typeof queryRule.minWidth === 'number') {\n            if (width >= queryRule.minWidth) {\n              styles.push(\n                StyleSheet.create({ minWidthStyle: flattenQueryStyle })\n                  .minWidthStyle\n              );\n            }\n          } else if (typeof queryRule.maxWidth === 'number') {\n            if (width <= queryRule.maxWidth) {\n              styles.push(\n                StyleSheet.create({ maxWidthStyle: flattenQueryStyle })\n                  .maxWidthStyle\n              );\n            }\n          }\n        }\n      });\n      return { styles };\n    }\n  }\n\n  return {};\n};\n\n// The below implementation is taken from React Native's source and added a flag to conditionally attach/remove listeners\nexport const useDimensionsWithEnable = ({ enable }: { enable?: boolean }) => {\n  const [dimensions, setDimensions] = React.useState(() =>\n    Dimensions.get('window')\n  );\n\n  React.useEffect(() => {\n    if (enable) {\n      function handleChange({ window }: { window: ScaledSize }) {\n        if (\n          dimensions.width !== window.width ||\n          dimensions.height !== window.height ||\n          dimensions.scale !== window.scale ||\n          dimensions.fontScale !== window.fontScale\n        ) {\n          setDimensions(window);\n        }\n      }\n      Dimensions.addEventListener('change', handleChange);\n      // We might have missed an update between calling `get` in render and\n      // `addEventListener` in this handler, so we set it here. If there was\n      // no change, React will filter out this update as a no-op.\n      handleChange({ window: Dimensions.get('window') });\n\n      return () => {\n        Dimensions.removeEventListener('change', handleChange);\n      };\n    }\n    return () => {};\n  }, [dimensions, enable]);\n  return dimensions;\n};\n"]}