{"version":3,"sources":["SVGIcon.tsx"],"names":["SVG","Svg","SVGIcon","children","props","ref","focusable","stroke","color","size","resolvedProps","strokeHex","colorHex","React","Children","count","map","child","i","key","questionOutlineIconPath","ChildPath","element","fill","pathStroke","pathStrokeColor","fillColor","cloneElement"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AACA;;AAEA;;AACA;;;;;;;;AAEA,MAAMA,GAAG,GAAG,iCAAoBC,UAApB,CAAZ;;AAEA,MAAMC,OAAO,GAAG,CAAC;AAAEC,EAAAA,QAAF;AAAY,KAAGC;AAAf,CAAD,EAAqCC,GAArC,KAAkD;AAChE,QAAM;AACJC,IAAAA,SADI;AAEJC,IAAAA,MAFI;AAGJC,IAAAA,KAHI;AAIJC,IAAAA,IAJI;AAKJ,OAAGC;AALC,MAMF,+BAAmB,MAAnB,EAA2BN,KAA3B,CANJ;AAOA,QAAMO,SAAS,GAAG,qBAAS,QAAT,EAAmBJ,MAAM,IAAI,EAA7B,CAAlB;AACA,QAAMK,QAAQ,GAAG,qBAAS,QAAT,EAAmBJ,KAAK,IAAI,EAA5B,CAAjB,CATgE,CAUhE;;AACA,MAAI,kDAAsBJ,KAAtB,CAAJ,EAAkC;AAChC,WAAO,IAAP;AACD;;AACD,sBACE,6BAAC,GAAD,eACMM,aADN;AAEE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAA,IAAI,EAAED,IAZR;AAaE,IAAA,KAAK,EAAEG,QAbT;AAcE,IAAA,MAAM,EAAED,SAdV;AAeE,IAAA,SAAS,EAAEL,SAfb;AAgBE,IAAA,iBAAiB,EAAC,OAhBpB,CAiBE;AAjBF;AAkBE,IAAA,GAAG,EAAED;AAlBP,MAoBGQ,eAAMC,QAAN,CAAeC,KAAf,CAAqBZ,QAArB,IAAiC,CAAjC,gBACC,6BAAC,QAAD,QACGU,eAAMC,QAAN,CAAeE,GAAf,CAAmBb,QAAnB,EAA6B,CAACc,KAAD,EAAQC,CAAR;AAAA;;AAAA,wBAC5B,6BAAC,SAAD;AACE,MAAA,GAAG,gBAAED,KAAF,aAAEA,KAAF,uBAAEA,KAAK,CAAEE,GAAT,mDAAgBD,CADrB;AAEE,MAAA,OAAO,EAAED;AAFX,OAGMA,KAHN,aAGMA,KAHN,uBAGMA,KAAK,CAAEb,KAHb,EAD4B;AAAA,GAA7B,CADH,CADD,GAWCgB,yCA/BJ,CADF;AAoCD,CAlDD;;AAmDA,MAAMC,SAAS,GAAG,CAAC;AAAEC,EAAAA,OAAF;AAAWC,EAAAA,IAAX;AAAiBhB,EAAAA,MAAM,EAAEiB;AAAzB,CAAD,KAAgD;AAChE,QAAMC,eAAe,GAAG,qBAAS,QAAT,EAAmBD,UAAU,IAAI,EAAjC,CAAxB;AACA,QAAME,SAAS,GAAG,qBAAS,QAAT,EAAmBH,IAAI,IAAI,EAA3B,CAAlB;;AAEA,MAAI,CAACD,OAAL,EAAc;AACZ,WAAO,IAAP;AACD;;AAED,sBAAOT,eAAMc,YAAN,CAAmBL,OAAnB,EAA4B;AACjCC,IAAAA,IAAI,EAAEG,SAAS,GAAGA,SAAH,GAAe,cADG;AAEjCnB,IAAAA,MAAM,EAAEkB;AAFyB,GAA5B,CAAP;AAID,CAZD;;4BAae,+BAAK,uBAAWvB,OAAX,CAAL,C","sourcesContent":["import React, { memo, forwardRef } from 'react';\nimport { useToken, usePropsResolution } from '../../../hooks';\nimport { makeStyledComponent } from '../../../utils/styled';\nimport { Svg, G } from './nbSvg';\nimport type { IIconProps } from './types';\nimport { questionOutlineIconPath } from './Icons/questionIconPath';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\n\nconst SVG = makeStyledComponent(Svg);\n\nconst SVGIcon = ({ children, ...props }: IIconProps, ref: any) => {\n  const {\n    focusable,\n    stroke,\n    color,\n    size,\n    ...resolvedProps\n  } = usePropsResolution('Icon', props);\n  const strokeHex = useToken('colors', stroke || '');\n  const colorHex = useToken('colors', color || '');\n  //TODO: refactor for responsive prop\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n  return (\n    <SVG\n      {...resolvedProps}\n      // height={\n      //   newProps.size\n      //     ? parseInt(newProps.size, 10)\n      //     : parseInt(newProps.height, 10)\n      // }\n      // width={\n      //   newProps.size\n      //     ? parseInt(newProps.size, 10)\n      //     : parseInt(newProps.width, 10)\n      // }\n      size={size}\n      color={colorHex}\n      stroke={strokeHex}\n      focusable={focusable}\n      accessibilityRole=\"image\"\n      // style={style}\n      ref={ref}\n    >\n      {React.Children.count(children) > 0 ? (\n        <G>\n          {React.Children.map(children, (child, i) => (\n            <ChildPath\n              key={child?.key ?? i}\n              element={child}\n              {...child?.props}\n            />\n          ))}\n        </G>\n      ) : (\n        questionOutlineIconPath\n      )}\n    </SVG>\n  );\n};\nconst ChildPath = ({ element, fill, stroke: pathStroke }: any) => {\n  const pathStrokeColor = useToken('colors', pathStroke || '');\n  const fillColor = useToken('colors', fill || '');\n\n  if (!element) {\n    return null;\n  }\n\n  return React.cloneElement(element, {\n    fill: fillColor ? fillColor : 'currentColor',\n    stroke: pathStrokeColor,\n  });\n};\nexport default memo(forwardRef(SVGIcon));\n"]}