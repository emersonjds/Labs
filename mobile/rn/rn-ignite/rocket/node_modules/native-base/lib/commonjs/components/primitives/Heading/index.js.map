{"version":3,"sources":["index.tsx"],"names":["Heading","props","ref","resolvedProps"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AAEA;;;;;;;;;;AAEA,MAAMA,OAAO,GAAG,CAACC,KAAD,EAAuBC,GAAvB,KAAoC;AAClD,QAAMC,aAAa,GAAG,uCAAmB,SAAnB,EAA8BF,KAA9B,CAAtB,CADkD,CAElD;;AACA,MAAI,kDAAsBA,KAAtB,CAAJ,EAAkC;AAChC,WAAO,IAAP;AACD;;AACD,sBAAO,6BAAC,aAAD,eAAUE,aAAV;AAAyB,IAAA,GAAG,EAAED;AAA9B,KAAP;AACD,CAPD;;4BASe,+BAAK,uBAAWF,OAAX,CAAL,C","sourcesContent":["import React, { memo, forwardRef } from 'react';\nimport Text from '../Text';\nimport { usePropsResolution } from '../../../hooks/useThemeProps';\nimport type { IHeadingProps } from './types';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\n\nconst Heading = (props: IHeadingProps, ref: any) => {\n  const resolvedProps = usePropsResolution('Heading', props);\n  //TODO: refactor for responsive prop\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n  return <Text {...resolvedProps} ref={ref} />;\n};\n\nexport default memo(forwardRef(Heading));\nexport type { IHeadingProps };\n"]}