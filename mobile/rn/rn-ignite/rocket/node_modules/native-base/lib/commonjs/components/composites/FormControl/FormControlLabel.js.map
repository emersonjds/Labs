{"version":3,"sources":["FormControlLabel.tsx"],"names":["FormControlLabel","children","props","ref","formControlContext","combinedProps","_ref","React","useRef","_astrick","resolvedProps","isDisabled","isReadOnly","isInvalid","requiredAsterisk","accessibilityHidden","accessibilityRole","mergedRef","useEffect","current","htmlFor","nativeID","labelId","isRequired"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AAEA;;;;;;;;;;AAGA,MAAMA,gBAAgB,GAAG,CACvB;AAAEC,EAAAA,QAAF;AAAY,KAAGC;AAAf,CADuB,EAEvBC,GAFuB,KAGpB;AACH,QAAMC,kBAAkB,GAAG,4CAA3B;AACA,QAAMC,aAAa,GAAG,mCAAuBD,kBAAvB,EAA2CF,KAA3C,CAAtB;;AACA,QAAMI,IAAI,GAAGC,eAAMC,MAAN,CAA+B,IAA/B,CAAb;;AACA,QAAM;AAAEC,IAAAA,QAAF;AAAY,OAAGC;AAAf,MAAiC,uCACrC,kBADqC,EAErCL,aAFqC,EAGrC;AACEM,IAAAA,UAAU,EAAEN,aAAa,CAACM,UAD5B;AAEEC,IAAAA,UAAU,EAAEP,aAAa,CAACO,UAF5B;AAGEC,IAAAA,SAAS,EAAER,aAAa,CAACQ,SAH3B,CAIE;;AAJF,GAHqC,CAAvC;;AAWA,QAAMC,gBAAgB,GAAG,mBACvB,6BAAC,aAAD;AACE,IAAA,IAAI,EAAE;AACJC,MAAAA,mBAAmB,EAAE,IADjB;AAEJ;AACAC,MAAAA,iBAAiB,EAAE;AAHf;AADR,KAMMP,QANN,OADF;;AAYA,QAAMQ,SAAS,GAAG,sBAAU,CAACX,IAAD,EAAOH,GAAP,CAAV,CAAlB;;AACAI,iBAAMW,SAAN,CAAgB,MAAM;AACpB,QAAIZ,IAAI,CAACa,OAAT,EAAkB;AAChB;AACA,UAAIjB,KAAK,CAACkB,OAAV,EAAmB;AACjBd,QAAAA,IAAI,CAACa,OAAL,CAAaC,OAAb,GAAuBlB,KAAK,CAACkB,OAA7B;AACD,OAFD,MAEO,IAAIV,aAAJ,aAAIA,aAAJ,eAAIA,aAAa,CAAEW,QAAnB,EAA6B;AAClCf,QAAAA,IAAI,CAACa,OAAL,CAAaC,OAAb,GAAuBV,aAAa,CAACW,QAArC;AACD;AACF;AACF,GATD,EASG,CAACX,aAAD,aAACA,aAAD,uBAACA,aAAa,CAAEW,QAAhB,EAA0BnB,KAAK,CAACkB,OAAhC,CATH;;AAWA,sBACE,6BAAC,YAAD;AACE,IAAA,IAAI,EAAE;AACJ;AACAJ,MAAAA,iBAAiB,EAAE;AAFf;AADR,KAKMN,aALN;AAME,IAAA,QAAQ,EAAEA,aAAF,aAAEA,aAAF,uBAAEA,aAAa,CAAEY,OAN3B;AAOE,IAAA,GAAG,EAAEL;AAPP,MASGhB,QATH,EAUG,CAAAS,aAAa,SAAb,IAAAA,aAAa,WAAb,YAAAA,aAAa,CAAEa,UAAf,KAA6BT,gBAAgB,EAVhD,CADF;AAcD,CAxDD;;4BAyDe,+BAAK,uBAAWd,gBAAX,CAAL,C","sourcesContent":["import React, { memo, forwardRef } from 'react';\nimport Box from '../../primitives/Box';\nimport Text from '../../primitives/Text';\nimport { useFormControlContext } from './useFormControl';\nimport { usePropsResolution } from '../../../hooks/useThemeProps';\nimport type { IFormControlLabelProps } from './types';\nimport { mergeRefs } from '../../../utils';\nimport { combineContextAndProps } from '../../../utils';\n\nconst FormControlLabel = (\n  { children, ...props }: IFormControlLabelProps,\n  ref: any\n) => {\n  const formControlContext = useFormControlContext();\n  const combinedProps = combineContextAndProps(formControlContext, props);\n  const _ref = React.useRef<HTMLLabelElement>(null);\n  const { _astrick, ...resolvedProps } = usePropsResolution(\n    'FormControlLabel',\n    combinedProps,\n    {\n      isDisabled: combinedProps.isDisabled,\n      isReadOnly: combinedProps.isReadOnly,\n      isInvalid: combinedProps.isInvalid,\n      // isRequired: combinedProps.isRequired,\n    }\n  );\n\n  const requiredAsterisk = () => (\n    <Text\n      _web={{\n        accessibilityHidden: true,\n        //@ts-ignore\n        accessibilityRole: 'presentation',\n      }}\n      {..._astrick}\n    >\n      *\n    </Text>\n  );\n  const mergedRef = mergeRefs([_ref, ref]);\n  React.useEffect(() => {\n    if (_ref.current) {\n      // RN web doesn't support htmlFor for Label element yet\n      if (props.htmlFor) {\n        _ref.current.htmlFor = props.htmlFor;\n      } else if (resolvedProps?.nativeID) {\n        _ref.current.htmlFor = resolvedProps.nativeID;\n      }\n    }\n  }, [resolvedProps?.nativeID, props.htmlFor]);\n\n  return (\n    <Box\n      _web={{\n        //@ts-ignore\n        accessibilityRole: 'label',\n      }}\n      {...resolvedProps}\n      nativeID={resolvedProps?.labelId}\n      ref={mergedRef}\n    >\n      {children}\n      {resolvedProps?.isRequired && requiredAsterisk()}\n    </Box>\n  );\n};\nexport default memo(forwardRef(FormControlLabel));\n"]}