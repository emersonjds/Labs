{"version":3,"sources":["InputBase.tsx"],"names":["StyledInput","TextInput","InputBase","onKeyPress","onFocus","onBlur","disableFocusHandling","inputProps","wrapperRef","InputLeftElement","InputRightElement","leftElement","rightElement","isHovered","isHoveredProp","isFocused","isFocusedProp","props","ref","passUnresolvedProps","setIsFocused","React","useState","handleFocus","focusState","callback","inputThemeProps","isDisabled","disabled","isInvalid","accessibilityInvalid","isReadOnly","accessibilityReadOnly","isRequired","required","_ref","useRef","isFullWidth","ariaLabel","accessibilityLabel","placeholderTextColor","selectionColor","underlineColorAndroid","type","fontFamily","fontWeight","fontStyle","_webInputBase","resolvedProps","resolvedFontFamily","resolvedPlaceholderTextColor","resolvedSelectionColor","resolvedUnderlineColorAndroid","undefined","e","persist","Platform","OS","cursor"],"mappings":";;;;;;;AAAA;;AACA;;AAEA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;;;;;;;AAEA,MAAMA,WAAW,GAAG,iCAAoBC,sBAApB,CAApB;;AAEA,MAAMC,SAAS,GAAG,CAChB;AACEC,EAAAA,UADF;AAEEC,EAAAA,OAFF;AAGEC,EAAAA,MAHF;AAIEC,EAAAA,oBAJF;AAKEC,EAAAA,UALF;AAMEC,EAAAA,UANF;AAOEC,EAAAA,gBAPF;AAQEC,EAAAA,iBARF;AASEC,EAAAA,WATF;AAUEC,EAAAA,YAVF;AAWEC,EAAAA,SAAS,EAAEC,aAXb;AAYEC,EAAAA,SAAS,EAAEC,aAZb;AAaE,KAAGC;AAbL,CADgB,EAmBhBC,GAnBgB,KAoBb;AACH,MAAIC,mBAAJ;;AACA,MAAIV,gBAAgB,IAAIC,iBAApB,IAAyCC,WAAzC,IAAwDC,YAA5D,EAA0E;AACxEO,IAAAA,mBAAmB,GAAG,IAAtB;AACD;;AAED,QAAM,CAACJ,SAAD,EAAYK,YAAZ,IAA4BC,eAAMC,QAAN,CAAe,KAAf,CAAlC;;AACA,QAAMC,WAAW,GAAG,CAACC,UAAD,EAAsBC,QAAtB,KAAwC;AAC1D,KAACnB,oBAAD,IAAyBc,YAAY,CAACI,UAAD,CAArC;AACAC,IAAAA,QAAQ;AACT,GAHD;;AAKA,QAAMC,eAAe,GAAG;AACtBC,IAAAA,UAAU,EAAEpB,UAAU,CAACqB,QADD;AAEtBC,IAAAA,SAAS,EAAEtB,UAAU,CAACuB,oBAFA;AAGtBC,IAAAA,UAAU,EAAExB,UAAU,CAACyB,qBAHD;AAItBC,IAAAA,UAAU,EAAE1B,UAAU,CAAC2B;AAJD,GAAxB;;AAOA,QAAMC,IAAI,GAAGd,eAAMe,MAAN,CAAa,IAAb,CAAb;;AACA,QAAM;AAAEvB,IAAAA;AAAF,MAAgB,4BAAS,EAAT,EAAasB,IAAb,CAAtB;AAEA,QAAM;AACJE,IAAAA,WADI;AAEJV,IAAAA,UAFI;AAGJI,IAAAA,UAHI;AAIJO,IAAAA,SAJI;AAKJC,IAAAA,kBALI;AAMJC,IAAAA,oBANI;AAOJC,IAAAA,cAPI;AAQJC,IAAAA,qBARI;AASJC,IAAAA,IATI;AAUJC,IAAAA,UAVI;AAWJC,IAAAA,UAXI;AAYJC,IAAAA,SAZI;AAaJC,IAAAA,aAbI;AAcJ,OAAGC;AAdC,MAeF,uCACF,OADE,EAEF,EACE,GAAGtB,eADL;AAEE,OAAGT;AAFL,GAFE,EAMF;AACEU,IAAAA,UAAU,EAAED,eAAe,CAACC,UAD9B;AAEEd,IAAAA,SAAS,EAAEC,aAAa,IAAID,SAF9B;AAGEE,IAAAA,SAAS,EAAEC,aAAa,IAAID,SAH9B;AAIEc,IAAAA,SAAS,EAAEH,eAAe,CAACG,SAJ7B;AAKEE,IAAAA,UAAU,EAAEL,eAAe,CAACK;AAL9B,GANE,CAfJ;AA8BA,QAAMkB,kBAAkB,GAAG,kDAAsB;AAC/CL,IAAAA,UAD+C;AAE/CC,IAAAA,UAAU,EAAEA,UAAF,aAAEA,UAAF,cAAEA,UAAF,GAAgB,GAFqB;AAG/CC,IAAAA,SAAS,EAAEA,SAAF,aAAEA,SAAF,cAAEA,SAAF,GAAe;AAHuB,GAAtB,CAA3B;AAKA,QAAMI,4BAA4B,GAAG,qBAAS,QAAT,EAAmBV,oBAAnB,CAArC;AACA,QAAMW,sBAAsB,GAAG,qBAAS,QAAT,EAAmBV,cAAnB,CAA/B;AACA,QAAMW,6BAA6B,GAAG,qBACpC,QADoC,EAEpCV,qBAFoC,CAAtC,CA3DG,CA+DH;;AACA,MACE,kDAAsB,EACpB,GAAGzB,KADiB;AAEpBd,IAAAA,UAFoB;AAGpBC,IAAAA,OAHoB;AAIpBC,IAAAA,MAJoB;AAKpBC,IAAAA,oBALoB;AAMpBC,IAAAA;AANoB,GAAtB,CADF,EASE;AACA,WAAO,IAAP;AACD;;AAED,sBACE,6BAAC,WAAD,eACMA,UADN;AAEE,IAAA,eAAe,EAAEoC,IAAI,KAAK,UAF5B;AAGE,IAAA,UAAU,MAHZ;AAIE,IAAA,kBAAkB,EAAEL,SAAS,IAAIC,kBAJnC;AAKE,IAAA,QAAQ,EAAEZ,UAAU,IAAII,UAAd,GAA2B,KAA3B,GAAmC,IAL/C;AAME,IAAA,CAAC,EAAEM,WAAW,GAAG,MAAH,GAAYgB;AAN5B,KAOOlC,mBAAmB,GAAGF,KAAH,GAAW+B,aAPrC,EAQMC,kBARN;AASE,IAAA,oBAAoB,EAAEC,4BATxB;AAUE,IAAA,cAAc,EAAEC,sBAVlB;AAWE,IAAA,qBAAqB,EAAEC,6BAXzB;AAYE,IAAA,UAAU,EAAGE,CAAD,IAAY;AACtBA,MAAAA,CAAC,CAACC,OAAF;AACApD,MAAAA,UAAU,IAAIA,UAAU,CAACmD,CAAD,CAAxB;AACD,KAfH;AAgBE,IAAA,OAAO,EAAGA,CAAD,IAAY;AACnB/B,MAAAA,WAAW,CAAC,IAAD,EAAOnB,OAAO,GAAG,MAAMA,OAAO,CAACkD,CAAD,CAAhB,GAAsB,MAAM,CAAE,CAA5C,CAAX;AACD,KAlBH;AAmBE,IAAA,MAAM,EAAGA,CAAD,IAAY;AAClB/B,MAAAA,WAAW,CAAC,KAAD,EAAQlB,MAAM,GAAG,MAAMA,MAAM,CAACiD,CAAD,CAAf,GAAqB,MAAM,CAAE,CAA3C,CAAX;AACD,KArBH,CAsBE;;AAtBF,KAuBOE,sBAASC,EAAT,KAAgB,KAAhB,GACD;AACE7B,IAAAA,QAAQ,EAAED,UADZ;AAEE+B,IAAAA,MAAM,EAAE/B,UAAU,GAAG,aAAH,GAAmB;AAFvC,GADC,GAKD,EA5BN;AA6BE,IAAA,GAAG,EAAE,sBAAU,CAACT,GAAD,EAAMiB,IAAN,EAAY3B,UAAZ,CAAV,CA7BP;AA8BE,IAAA,KAAK,EAAEgD,sBAASC,EAAT,KAAgB,KAAhB,GAAwBV,aAAxB,GAAwC;AA9BjD,KADF;AAkCD,CAnID;;4BAqIe,+BAAK,uBAAW7C,SAAX,CAAL,C","sourcesContent":["import React, { memo, forwardRef } from 'react';\nimport { TextInput, Platform } from 'react-native';\nimport type { IInputProps } from './types';\nimport { useToken } from '../../../hooks';\nimport { usePropsResolution } from '../../../hooks/useThemeProps';\nimport { useHover } from '@react-native-aria/interactions';\nimport { mergeRefs } from '../../../utils';\nimport { makeStyledComponent } from '../../../utils/styled';\nimport { useResolvedFontFamily } from '../../../hooks/useResolvedFontFamily';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\n\nconst StyledInput = makeStyledComponent(TextInput);\n\nconst InputBase = (\n  {\n    onKeyPress,\n    onFocus,\n    onBlur,\n    disableFocusHandling,\n    inputProps,\n    wrapperRef,\n    InputLeftElement,\n    InputRightElement,\n    leftElement,\n    rightElement,\n    isHovered: isHoveredProp,\n    isFocused: isFocusedProp,\n    ...props\n  }: IInputProps & {\n    disableFocusHandling?: boolean;\n    inputProps: any;\n  },\n  ref: any\n) => {\n  let passUnresolvedProps;\n  if (InputLeftElement || InputRightElement || leftElement || rightElement) {\n    passUnresolvedProps = true;\n  }\n\n  const [isFocused, setIsFocused] = React.useState(false);\n  const handleFocus = (focusState: boolean, callback: any) => {\n    !disableFocusHandling && setIsFocused(focusState);\n    callback();\n  };\n\n  const inputThemeProps = {\n    isDisabled: inputProps.disabled,\n    isInvalid: inputProps.accessibilityInvalid,\n    isReadOnly: inputProps.accessibilityReadOnly,\n    isRequired: inputProps.required,\n  };\n\n  const _ref = React.useRef(null);\n  const { isHovered } = useHover({}, _ref);\n\n  const {\n    isFullWidth,\n    isDisabled,\n    isReadOnly,\n    ariaLabel,\n    accessibilityLabel,\n    placeholderTextColor,\n    selectionColor,\n    underlineColorAndroid,\n    type,\n    fontFamily,\n    fontWeight,\n    fontStyle,\n    _webInputBase,\n    ...resolvedProps\n  } = usePropsResolution(\n    'Input',\n    {\n      ...inputThemeProps,\n      ...props,\n    },\n    {\n      isDisabled: inputThemeProps.isDisabled,\n      isHovered: isHoveredProp || isHovered,\n      isFocused: isFocusedProp || isFocused,\n      isInvalid: inputThemeProps.isInvalid,\n      isReadOnly: inputThemeProps.isReadOnly,\n    }\n  );\n\n  const resolvedFontFamily = useResolvedFontFamily({\n    fontFamily,\n    fontWeight: fontWeight ?? 400,\n    fontStyle: fontStyle ?? 'normal',\n  });\n  const resolvedPlaceholderTextColor = useToken('colors', placeholderTextColor);\n  const resolvedSelectionColor = useToken('colors', selectionColor);\n  const resolvedUnderlineColorAndroid = useToken(\n    'colors',\n    underlineColorAndroid\n  );\n  //TODO: refactor for responsive prop\n  if (\n    useHasResponsiveProps({\n      ...props,\n      onKeyPress,\n      onFocus,\n      onBlur,\n      disableFocusHandling,\n      inputProps,\n    })\n  ) {\n    return null;\n  }\n\n  return (\n    <StyledInput\n      {...inputProps}\n      secureTextEntry={type === 'password'}\n      accessible\n      accessibilityLabel={ariaLabel || accessibilityLabel}\n      editable={isDisabled || isReadOnly ? false : true}\n      w={isFullWidth ? '100%' : undefined}\n      {...(passUnresolvedProps ? props : resolvedProps)}\n      {...resolvedFontFamily}\n      placeholderTextColor={resolvedPlaceholderTextColor}\n      selectionColor={resolvedSelectionColor}\n      underlineColorAndroid={resolvedUnderlineColorAndroid}\n      onKeyPress={(e: any) => {\n        e.persist();\n        onKeyPress && onKeyPress(e);\n      }}\n      onFocus={(e: any) => {\n        handleFocus(true, onFocus ? () => onFocus(e) : () => {});\n      }}\n      onBlur={(e: any) => {\n        handleFocus(false, onBlur ? () => onBlur(e) : () => {});\n      }}\n      // TODO: this can be moved to baseStyle using _web\n      {...(Platform.OS === 'web'\n        ? {\n            disabled: isDisabled,\n            cursor: isDisabled ? 'not-allowed' : 'auto',\n          }\n        : {})}\n      ref={mergeRefs([ref, _ref, wrapperRef])}\n      style={Platform.OS === 'web' ? _webInputBase : {}}\n    />\n  );\n};\n\nexport default memo(forwardRef(InputBase));\n"]}