{"version":3,"sources":["Modal.tsx"],"names":["Modal","children","isOpen","onClose","defaultIsOpen","initialFocusRef","finalFocusRef","avoidKeyboard","closeOnOverlayClick","isKeyboardDismissable","overlayVisible","backdropVisible","animationPreset","rest","ref","bottomInset","contentSize","_backdrop","_backdropFade","_fade","_slide","_overlay","resolvedProps","visible","setVisible","value","defaultValue","onChange","val","handleClose","React","useCallback","child","undefined","contextValue","useMemo","StyleSheet","absoluteFill"],"mappings":"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","sourcesContent":["import React, { forwardRef, memo } from 'react';\nimport { StyleSheet } from 'react-native';\nimport Backdrop from '../Backdrop';\nimport { Slide } from '../Transitions';\nimport { FocusScope } from '@react-native-aria/focus';\nimport { useControllableState, usePropsResolution } from '../../../hooks';\nimport { ModalContext } from './Context';\nimport Box from '../../primitives/Box';\nimport type { IModalProps } from './types';\nimport { Fade } from '../../composites/Transitions';\nimport { useKeyboardBottomInset } from '../../../utils';\nimport { Overlay } from '../../primitives/Overlay';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\n\nconst Modal = (\n  {\n    children,\n    isOpen,\n    onClose,\n    defaultIsOpen,\n    initialFocusRef,\n    finalFocusRef,\n    avoidKeyboard,\n    closeOnOverlayClick = true,\n    isKeyboardDismissable = true,\n    overlayVisible = true,\n    backdropVisible = true,\n    animationPreset,\n    ...rest\n  }: IModalProps,\n  ref: any\n) => {\n  const bottomInset = useKeyboardBottomInset();\n  const {\n    contentSize,\n    _backdrop,\n    _backdropFade,\n    _fade,\n    _slide,\n    _overlay,\n    ...resolvedProps\n  } = usePropsResolution('Modal', rest);\n\n  const [visible, setVisible] = useControllableState({\n    value: isOpen,\n    defaultValue: defaultIsOpen,\n    onChange: (val) => {\n      if (!val) onClose && onClose();\n    },\n  });\n\n  const handleClose = React.useCallback(() => setVisible(false), [setVisible]);\n\n  const child = (\n    <Box\n      bottom={avoidKeyboard ? bottomInset + 'px' : undefined}\n      {...resolvedProps}\n      ref={ref}\n      pointerEvents=\"box-none\"\n    >\n      {children}\n    </Box>\n  );\n\n  const contextValue = React.useMemo(() => {\n    return {\n      handleClose,\n      contentSize,\n      initialFocusRef,\n      finalFocusRef,\n      visible,\n    };\n  }, [handleClose, contentSize, initialFocusRef, finalFocusRef, visible]);\n\n  //TODO: refactor for responsive prop\n  if (useHasResponsiveProps(rest)) {\n    return null;\n  }\n  // console.log('visible here', visible);\n  return (\n    <Overlay\n      isOpen={visible}\n      onRequestClose={handleClose}\n      isKeyboardDismissable={isKeyboardDismissable}\n      animationPreset={animationPreset}\n      useRNModalOnAndroid\n      {..._overlay}\n    >\n      <ModalContext.Provider value={contextValue}>\n        <Fade in={visible} style={StyleSheet.absoluteFill} {..._backdropFade}>\n          {overlayVisible && backdropVisible && (\n            <Backdrop\n              onPress={() => {\n                closeOnOverlayClick && handleClose();\n              }}\n              {..._backdrop}\n            />\n          )}\n        </Fade>\n        {animationPreset === 'slide' ? (\n          <Slide in={visible} {..._slide}>\n            <FocusScope\n              contain={visible}\n              autoFocus={visible && !initialFocusRef}\n              restoreFocus={visible && !finalFocusRef}\n            >\n              {child}\n            </FocusScope>\n          </Slide>\n        ) : (\n          <Fade in={visible} style={StyleSheet.absoluteFill} {..._fade}>\n            <FocusScope\n              contain={visible}\n              autoFocus={visible && !initialFocusRef}\n              restoreFocus={visible && !finalFocusRef}\n            >\n              {child}\n            </FocusScope>\n          </Fade>\n        )}\n      </ModalContext.Provider>\n    </Overlay>\n  );\n};\n\nexport default memo(forwardRef(Modal));\n"]}