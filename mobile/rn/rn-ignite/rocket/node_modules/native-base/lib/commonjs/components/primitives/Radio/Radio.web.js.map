{"version":3,"sources":["Radio.web.tsx"],"names":["RadioComponent","icon","inputProps","combinedProps","children","wrapperRef","isHovered","isHoveredProp","isFocusVisible","isFocusVisibleProp","props","ref","isInvalid","isReadOnly","isIndeterminate","disabled","isDisabled","checked","isChecked","_ref","React","useRef","mergedRefs","focusProps","_interactionBox","_icon","_stack","_text","resolvedProps","sizedIcon","cloneElement","component","Radio","formControlContext","contextState","useContext","RadioContext","inputRef","radioState","accessibilityLabel","state","useMemo","contextCombinedProps","useState","console","error"],"mappings":"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","sourcesContent":["import React, { memo, forwardRef } from 'react';\nimport Box from '../Box';\nimport { Stack } from '../Stack';\nimport { Center } from '../../composites/Center';\nimport { usePropsResolution } from '../../../hooks/useThemeProps';\nimport { wrapStringChild } from '../../../utils/wrapStringChild';\nimport type { IRadioProps } from './types';\nimport { mergeRefs } from './../../../utils';\nimport { useHover } from '@react-native-aria/interactions';\nimport { useRadio } from '@react-native-aria/radio';\nimport { VisuallyHidden } from '@react-aria/visually-hidden';\nimport { RadioContext } from './RadioGroup';\nimport { useFocusRing } from '@react-native-aria/focus';\nimport { CircleIcon } from '../Icon/Icons';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\nimport { combineContextAndProps, isEmptyObj } from '../../../utils';\nimport { useFormControlContext } from '../../composites/FormControl';\n\nconst RadioComponent = memo(\n  forwardRef(\n    (\n      {\n        icon,\n        inputProps,\n        combinedProps,\n        children,\n        wrapperRef,\n        isHovered: isHoveredProp,\n        isFocusVisible: isFocusVisibleProp,\n        ...props\n      }: any,\n      ref: any\n    ) => {\n      const { isInvalid, isReadOnly, isIndeterminate } = combinedProps;\n      const { disabled: isDisabled, checked: isChecked } = inputProps;\n      const _ref = React.useRef(null);\n      const { isHovered } = useHover({}, _ref);\n      const mergedRefs = mergeRefs([_ref, wrapperRef]);\n      const { focusProps, isFocusVisible } = useFocusRing();\n\n      const {\n        _interactionBox,\n        _icon,\n        _stack,\n        _text,\n        ...resolvedProps\n      } = usePropsResolution('Radio', combinedProps, {\n        isInvalid,\n        isReadOnly,\n        isFocusVisible: isFocusVisibleProp || isFocusVisible,\n        isDisabled,\n        isIndeterminate,\n        isChecked,\n        isHovered: isHoveredProp || isHovered,\n      });\n\n      // only calling below function when icon exist.\n      const sizedIcon = () =>\n        //@ts-ignore\n        React.cloneElement(icon, {\n          ..._icon,\n        });\n\n      const component = (\n        <Stack {..._stack}>\n          <Center>\n            {/* Interaction Box */}\n            <Box {..._interactionBox} />\n            {/* Radio */}\n            <Center {...resolvedProps}>\n              {icon && sizedIcon && isChecked ? (\n                sizedIcon()\n              ) : (\n                <CircleIcon {..._icon} opacity={isChecked ? 1 : 0} />\n              )}\n            </Center>\n          </Center>\n          {wrapStringChild(children, _text)}\n        </Stack>\n      );\n      //TODO: refactor for responsive prop\n      if (useHasResponsiveProps(props)) {\n        return null;\n      }\n\n      return (\n        <Box\n          // @ts-ignore - RN web supports accessibilityRole=\"label\"\n          accessibilityRole=\"label\"\n          ref={mergedRefs}\n        >\n          <VisuallyHidden>\n            <input {...inputProps} {...focusProps} ref={ref} />\n          </VisuallyHidden>\n          {component}\n        </Box>\n      );\n    }\n  )\n);\n\nconst Radio = (\n  {\n    icon,\n    children,\n    wrapperRef,\n    isHovered: isHoveredProp,\n    isFocusVisible: isFocusVisibleProp,\n    ...props\n  }: IRadioProps,\n  ref: any\n) => {\n  const formControlContext = useFormControlContext();\n  const contextState = React.useContext(RadioContext);\n\n  const combinedProps = combineContextAndProps(\n    { ...formControlContext, ...contextState },\n    props\n  );\n\n  const inputRef = React.useRef(null);\n  const radioState = useRadio(\n    { ...combinedProps, 'aria-label': props.accessibilityLabel, children },\n    contextState.state ?? {},\n    inputRef\n  );\n\n  //@ts-ignore\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  const inputProps = React.useMemo(() => radioState.inputProps, [\n    radioState.inputProps.checked,\n    radioState.inputProps.disabled,\n  ]);\n\n  const [contextCombinedProps] = React.useState({\n    ...combinedProps,\n  });\n\n  //TODO: refactor for responsive prop\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n  if (isEmptyObj(contextState)) {\n    console.error('Error: Radio must be wrapped inside a Radio.Group');\n    return <></>;\n  }\n\n  return (\n    <RadioComponent\n      inputProps={inputProps}\n      combinedProps={contextCombinedProps}\n      children={children}\n      ref={ref}\n      icon={icon}\n      wrapperRef={wrapperRef}\n      isHovered={isHoveredProp}\n      isFocusVisible={isFocusVisibleProp}\n    />\n  );\n};\n\nexport default memo(forwardRef(Radio));\n"]}