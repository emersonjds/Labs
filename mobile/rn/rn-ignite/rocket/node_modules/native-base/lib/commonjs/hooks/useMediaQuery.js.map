{"version":3,"sources":["useMediaQuery.ts"],"names":["useMediaQuery","query","dims","height","width","iterateQuery","queryResolver","queryKey","calculateQuery","queryResults","Array","isArray","forEach","subQuery","push","key","val","retval","undefined"],"mappings":";;;;;;;AAAA;;AACA;;;;AAcO,SAASA,aAAT,CAAuBC,KAAvB,EAAgD;AACrD,QAAMC,IAAI,GAAG,uCAAb;AACA,QAAMC,MAAM,GAAGD,IAAH,aAAGA,IAAH,uBAAGA,IAAI,CAAEC,MAArB;AACA,QAAMC,KAAK,GAAGF,IAAH,aAAGA,IAAH,uBAAGA,IAAI,CAAEE,KAApB;AAEA,SAAOC,YAAY,CAACJ,KAAD,EAAQE,MAAR,EAAgBC,KAAhB,CAAnB;AACD;;AAED,SAASE,aAAT,CAAuBL,KAAvB,EAAmCG,KAAnC,EAAmDD,MAAnD,EAAoE;AAClE,OAAK,MAAMI,QAAX,IAAuBN,KAAvB,EAA8B;AAC5B,QAAI,CAACO,cAAc,CAACD,QAAD,EAAWN,KAAK,CAACM,QAAD,CAAhB,EAA4BJ,MAA5B,EAAoCC,KAApC,CAAnB,EAA+D;AAC7D,aAAO,KAAP;AACD;AACF;;AACD,SAAO,IAAP;AACD;;AAED,SAASC,YAAT,CACEJ,KADF,EAEEE,MAFF,EAGEC,KAHF,EAIE;AACA,QAAMK,YAAY,GAAG,EAArB;;AACA,MAAIC,KAAK,CAACC,OAAN,CAAcV,KAAd,CAAJ,EAA0B;AACxBA,IAAAA,KAAK,CAACW,OAAN,CAAeC,QAAD,IAAwB;AACpCJ,MAAAA,YAAY,CAACK,IAAb,CAAkBR,aAAa,CAACO,QAAD,EAAWT,KAAX,EAAkBD,MAAlB,CAA/B;AACD,KAFD;AAGD,GAJD,MAIO;AACLM,IAAAA,YAAY,CAACK,IAAb,CAAkBR,aAAa,CAACL,KAAD,EAAQG,KAAR,EAAeD,MAAf,CAA/B;AACD;;AACD,SAAOM,YAAP;AACD;;AAED,SAASD,cAAT,CACEO,GADF,EAEEC,GAFF,EAGEb,MAHF,EAIEC,KAJF,EAKE;AACA,MAAIa,MAAJ;;AACA,MAAI,qBAAMb,KAAN,KAAgB,qBAAMD,MAAN,CAAhB,IAAiC,qBAAMa,GAAN,CAArC,EAAiD;AAC/C;AACD;;AACD,UAAQD,GAAR;AACE,SAAK,UAAL;AACEE,MAAAA,MAAM,GAAG,CAAC,qBAAMD,GAAN,CAAD,GAAcZ,KAAK,IAAIY,GAAvB,GAA6BE,SAAtC;AACA;;AACF,SAAK,UAAL;AACED,MAAAA,MAAM,GAAG,CAAC,qBAAMD,GAAN,CAAD,GAAcZ,KAAK,IAAIY,GAAvB,GAA6BE,SAAtC;AACA;;AACF,SAAK,WAAL;AACED,MAAAA,MAAM,GAAG,CAAC,qBAAMD,GAAN,CAAD,GAAcb,MAAM,IAAIa,GAAxB,GAA8BE,SAAvC;AACA;;AACF,SAAK,WAAL;AACED,MAAAA,MAAM,GAAG,CAAC,qBAAMD,GAAN,CAAD,GAAcb,MAAM,IAAIa,GAAxB,GAA8BE,SAAvC;AACA;;AACF,SAAK,aAAL;AACE,UAAI,CAAC,qBAAMF,GAAN,CAAL,EAAiB;AACf,YAAIZ,KAAK,GAAGD,MAAZ,EAAoB;AAClBc,UAAAA,MAAM,GAAGD,GAAG,KAAK,WAAjB;AACD,SAFD,MAEO;AACLC,UAAAA,MAAM,GAAGD,GAAG,KAAK,UAAjB;AACD;AACF;;AACD;;AACF;AACE;AAvBJ;;AAyBA,SAAOC,MAAP;AACD","sourcesContent":["import { useWindowDimensions } from 'react-native';\nimport isNil from 'lodash.isnil';\n\ntype QueryKeys =\n  | 'maxWidth'\n  | 'minWidth'\n  | 'maxHeight'\n  | 'minHeight'\n  | 'orientation';\n\ntype SubQuery = {\n  [queryKey in QueryKeys]?: number | string;\n};\ntype Query = Array<SubQuery>;\n\nexport function useMediaQuery(query: SubQuery | Query) {\n  const dims = useWindowDimensions();\n  const height = dims?.height;\n  const width = dims?.width;\n\n  return iterateQuery(query, height, width);\n}\n\nfunction queryResolver(query: any, width?: number, height?: number) {\n  for (const queryKey in query) {\n    if (!calculateQuery(queryKey, query[queryKey], height, width)) {\n      return false;\n    }\n  }\n  return true;\n}\n\nfunction iterateQuery(\n  query: SubQuery | Query,\n  height?: number,\n  width?: number\n) {\n  const queryResults = [];\n  if (Array.isArray(query)) {\n    query.forEach((subQuery: SubQuery) => {\n      queryResults.push(queryResolver(subQuery, width, height));\n    });\n  } else {\n    queryResults.push(queryResolver(query, width, height));\n  }\n  return queryResults;\n}\n\nfunction calculateQuery(\n  key: string,\n  val?: number | string,\n  height?: number,\n  width?: number\n) {\n  let retval;\n  if (isNil(width) || isNil(height) || isNil(val)) {\n    return;\n  }\n  switch (key) {\n    case 'maxWidth':\n      retval = !isNil(val) ? width <= val : undefined;\n      break;\n    case 'minWidth':\n      retval = !isNil(val) ? width >= val : undefined;\n      break;\n    case 'maxHeight':\n      retval = !isNil(val) ? height <= val : undefined;\n      break;\n    case 'minHeight':\n      retval = !isNil(val) ? height >= val : undefined;\n      break;\n    case 'orientation':\n      if (!isNil(val)) {\n        if (width > height) {\n          retval = val === 'landscape';\n        } else {\n          retval = val === 'portrait';\n        }\n      }\n      break;\n    default:\n      break;\n  }\n  return retval;\n}\n"]}