{"version":3,"sources":["Tooltip.tsx"],"names":["Tooltip","label","children","onClose","onOpen","defaultIsOpen","placement","openDelay","closeDelay","closeOnClick","offset","isDisabled","hasArrow","arrowSize","isOpen","isOpenProp","props","undefined","resolvedProps","setIsOpen","value","defaultValue","onChange","arrowBg","backgroundColor","bgColor","bg","targetRef","React","useRef","enterTimeout","exitTimeout","tooltipID","openWithDelay","useCallback","current","setTimeout","closeWithDelay","clearTimeout","useEffect","newChildren","cloneElement","onPress","onFocus","onBlur","onMouseEnter","onMouseLeave","ref","enabled","callback","opacity","transition","duration","StyleSheet","absoluteFill","Platform","OS"],"mappings":"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","sourcesContent":["import { OverlayContainer } from '@react-native-aria/overlays';\nimport React from 'react';\nimport { useControllableState, useKeyboardDismissable } from '../../../hooks';\nimport { Popper } from '../Popper';\nimport { composeEventHandlers, mergeRefs } from '../../../utils';\nimport { PresenceTransition } from '../Transitions';\nimport { Platform, StyleSheet } from 'react-native';\nimport { usePropsResolution } from '../../../hooks';\nimport Box from '../../primitives/Box';\nimport type { ITooltipProps } from './types';\nimport { useId } from '@react-aria/utils';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\n\nexport const Tooltip = ({\n  label,\n  children,\n  onClose,\n  onOpen,\n  defaultIsOpen,\n  placement,\n  openDelay = 0,\n  closeDelay = 0,\n  closeOnClick = true,\n  offset,\n  isDisabled,\n  hasArrow,\n  arrowSize = 12,\n  isOpen: isOpenProp,\n  ...props\n}: ITooltipProps) => {\n  if (hasArrow && offset === undefined) {\n    offset = 0;\n  } else {\n    offset = 6;\n  }\n\n  const resolvedProps = usePropsResolution('Tooltip', props);\n  const [isOpen, setIsOpen] = useControllableState({\n    value: isOpenProp,\n    defaultValue: defaultIsOpen,\n    onChange: (value) => {\n      value ? onOpen && onOpen() : onClose && onClose();\n    },\n  });\n\n  const arrowBg =\n    props.backgroundColor ?? props.bgColor ?? props.bg ?? resolvedProps.bg;\n\n  const targetRef = React.useRef(null);\n\n  const enterTimeout = React.useRef<any>();\n  const exitTimeout = React.useRef<any>();\n  const tooltipID = useId();\n\n  const openWithDelay = React.useCallback(() => {\n    if (!isDisabled) {\n      enterTimeout.current = setTimeout(() => setIsOpen(true), openDelay);\n    }\n  }, [isDisabled, setIsOpen, openDelay]);\n\n  const closeWithDelay = React.useCallback(() => {\n    if (enterTimeout.current) {\n      clearTimeout(enterTimeout.current);\n    }\n    exitTimeout.current = setTimeout(() => setIsOpen(false), closeDelay);\n  }, [closeDelay, setIsOpen]);\n\n  React.useEffect(\n    () => () => {\n      clearTimeout(enterTimeout.current);\n      clearTimeout(exitTimeout.current);\n    },\n    []\n  );\n\n  let newChildren = children;\n\n  if (typeof children === 'string') {\n    newChildren = <Box>{children}</Box>;\n  }\n\n  newChildren = React.cloneElement(newChildren, {\n    'onPress': composeEventHandlers<any>(newChildren.props.onPress, () => {\n      if (closeOnClick) {\n        closeWithDelay();\n      }\n    }),\n    'onFocus': composeEventHandlers<any>(\n      newChildren.props.onFocus,\n      openWithDelay\n    ),\n    'onBlur': composeEventHandlers<any>(\n      newChildren.props.onBlur,\n      closeWithDelay\n    ),\n    'onMouseEnter': composeEventHandlers<any>(\n      newChildren.props.onMouseEnter,\n      openWithDelay\n    ),\n    'onMouseLeave': composeEventHandlers<any>(\n      newChildren.props.onMouseLeave,\n      closeWithDelay\n    ),\n    'ref': mergeRefs([newChildren.ref, targetRef]),\n\n    'aria-describedby': isOpen ? tooltipID : undefined,\n  });\n\n  useKeyboardDismissable({\n    enabled: isOpen,\n    callback: () => setIsOpen(false),\n  });\n  //TODO: refactor for responsive prop\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n  return (\n    <>\n      {newChildren}\n      {isOpen && (\n        <OverlayContainer>\n          <PresenceTransition\n            initial={{ opacity: 0 }}\n            animate={{ opacity: 1, transition: { duration: 150 } }}\n            exit={{ opacity: 0, transition: { duration: 100 } }}\n            visible={isOpen}\n            style={StyleSheet.absoluteFill}\n          >\n            <Popper\n              triggerRef={targetRef}\n              onClose={() => setIsOpen(false)}\n              placement={placement}\n              offset={offset}\n            >\n              <Popper.Content isOpen={isOpen}>\n                {hasArrow && (\n                  <Popper.Arrow\n                    borderColor=\"transparent\"\n                    backgroundColor={arrowBg}\n                    height={arrowSize}\n                    width={arrowSize}\n                  />\n                )}\n                <Box\n                  {...resolvedProps}\n                  //@ts-ignore\n                  accessibilityRole={\n                    Platform.OS === 'web' ? 'tooltip' : undefined\n                  }\n                  nativeID={tooltipID}\n                >\n                  {label}\n                </Box>\n              </Popper.Content>\n            </Popper>\n          </PresenceTransition>\n        </OverlayContainer>\n      )}\n    </>\n  );\n};\n"]}