{"version":3,"sources":["Popover.tsx"],"names":["Popover","onOpen","trigger","onClose","isOpen","isOpenProp","children","defaultIsOpen","initialFocusRef","finalFocusRef","trapFocus","props","ref","triggerRef","React","useRef","mergedRef","setIsOpen","value","defaultValue","onChange","bodyMounted","setBodyMounted","useState","headerMounted","setHeaderMounted","popoverContentId","headerId","bodyId","handleOpen","useCallback","updatedTrigger","undefined","open","handleClose","opacity","transition","duration","scale","StyleSheet","absoluteFill"],"mappings":"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","sourcesContent":["import React, { forwardRef, memo } from 'react';\nimport { Popper } from '../Popper';\nimport type { IPopoverProps } from './types';\nimport { mergeRefs } from '../../../utils';\nimport { useControllableState } from '../../../hooks';\nimport { PopoverContext } from './PopoverContext';\nimport Box from '../../primitives/Box';\nimport Backdrop from '../Backdrop';\nimport { FocusScope } from '@react-native-aria/focus';\nimport { PresenceTransition } from '../Transitions';\nimport { StyleSheet } from 'react-native';\nimport { useId } from '@react-aria/utils';\nimport { Overlay } from '../../primitives/Overlay';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\n\nconst Popover = (\n  {\n    onOpen,\n    trigger,\n    onClose,\n    isOpen: isOpenProp,\n    children,\n    defaultIsOpen,\n    initialFocusRef,\n    finalFocusRef,\n    trapFocus = true,\n    ...props\n  }: IPopoverProps,\n  ref: any\n) => {\n  const triggerRef = React.useRef(null);\n  const mergedRef = mergeRefs([triggerRef]);\n  const [isOpen, setIsOpen] = useControllableState({\n    value: isOpenProp,\n    defaultValue: defaultIsOpen,\n    onChange: (value) => {\n      value ? onOpen && onOpen() : onClose && onClose();\n    },\n  });\n\n  const [bodyMounted, setBodyMounted] = React.useState(false);\n  const [headerMounted, setHeaderMounted] = React.useState(false);\n\n  const popoverContentId = `${useId()}-content`;\n  const headerId = `${popoverContentId}-header`;\n  const bodyId = `${popoverContentId}-body`;\n\n  const handleOpen = React.useCallback(() => {\n    setIsOpen(true);\n  }, [setIsOpen]);\n\n  const updatedTrigger = () => {\n    return trigger(\n      {\n        'ref': mergedRef,\n        'onPress': handleOpen,\n        'aria-expanded': isOpen ? true : false,\n        'aria-controls': isOpen ? popoverContentId : undefined,\n        'aria-haspopup': true,\n      },\n      { open: isOpen }\n    );\n  };\n\n  const handleClose = () => {\n    setIsOpen(false);\n  };\n  //TODO: refactor for responsive prop\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n\n  return (\n    <Box ref={ref}>\n      {updatedTrigger()}\n      <Overlay\n        isOpen={isOpen}\n        onRequestClose={handleClose}\n        useRNModalOnAndroid\n        unmountOnExit\n      >\n        <PresenceTransition\n          initial={{ opacity: 0 }}\n          animate={{ opacity: 1, transition: { duration: 150 } }}\n          exit={{ opacity: 0, scale: 0.95, transition: { duration: 100 } }}\n          visible={isOpen}\n          style={StyleSheet.absoluteFill}\n        >\n          <Popper onClose={handleClose} triggerRef={triggerRef} {...props}>\n            <Backdrop onPress={handleClose} bg=\"transparent\" />\n            <PopoverContext.Provider\n              value={{\n                onClose: handleClose,\n                initialFocusRef,\n                finalFocusRef,\n                popoverContentId,\n                bodyId,\n                headerId,\n                headerMounted,\n                bodyMounted,\n                setBodyMounted,\n                setHeaderMounted,\n                isOpen,\n              }}\n            >\n              <FocusScope contain={trapFocus} restoreFocus autoFocus>\n                {children}\n              </FocusScope>\n            </PopoverContext.Provider>\n          </Popper>\n        </PresenceTransition>\n      </Overlay>\n    </Box>\n  );\n};\n\nexport default memo(forwardRef(Popover));\n"]}