{"version":3,"sources":["index.tsx"],"names":["Tag","style","props","ref","resolvedProps","React","memo","forwardRef"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AAEA;;;;;;AAEA,MAAMA,GAAG,GAAG,CAAC;AAAEC,EAAAA,KAAF;AAAS,KAAGC;AAAZ,CAAD,EAAiCC,GAAjC,KAA8C;AACxD,MAAIC,aAAa,GAAG,0BAAc,KAAd,EAAqBF,KAArB,CAApB,CADwD,CAExD;;AACA,MAAI,kDAAsBA,KAAtB,CAAJ,EAAkC;AAChC,WAAO,IAAP;AACD;;AACD,sBAAO,6BAAC,YAAD;AAAK,IAAA,KAAK,EAAED;AAAZ,KAAuBG,aAAvB;AAAsC,IAAA,GAAG,EAAED;AAA3C,KAAP;AACD,CAPD;;4BASeE,eAAMC,IAAN,eAAWD,eAAME,UAAN,CAAiBP,GAAjB,CAAX,C","sourcesContent":["import React from 'react';\nimport Box from '../../primitives/Box';\nimport { useThemeProps } from '../../../hooks';\nimport type { IInputComponentType, ITagProps } from './types';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\n\nconst Tag = ({ style, ...props }: ITagProps, ref: any) => {\n  let resolvedProps = useThemeProps('Tag', props);\n  //TODO: refactor for responsive prop\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n  return <Box style={style} {...resolvedProps} ref={ref} />;\n};\n\nexport default React.memo(React.forwardRef(Tag)) as IInputComponentType;\nexport type { ITagProps };\n"]}