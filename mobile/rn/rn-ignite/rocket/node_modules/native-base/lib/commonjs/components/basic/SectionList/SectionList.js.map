{"version":3,"sources":["SectionList.tsx"],"names":["StyledSectionList","RNSectionList","SectionListComponent","props","ref","resolvedProps","SectionList"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AACA;;AAEA;;;;;;;;AAEA,MAAMA,iBAAsB,GAAG,iCAAoBC,wBAApB,CAA/B;;AAEA,MAAMC,oBAAoB,GAAG,CAC3BC,KAD2B,EAE3BC,GAF2B,KAGxB;AACH,QAAM,EAAE,GAAGC;AAAL,MAAuB,+BAAmB,aAAnB,EAAkCF,KAAlC,CAA7B,CADG,CAEH;;AACA,MAAI,kDAAsBA,KAAtB,CAAJ,EAAkC;AAChC,WAAO,IAAP;AACD;;AAED,sBAAO,6BAAC,iBAAD,eAAuBE,aAAvB;AAAsC,IAAA,GAAG,EAAED;AAA3C,KAAP;AACD,CAXD;;AAaO,MAAME,WAAW,gBAAG,uBAAWJ,oBAAX,CAApB","sourcesContent":["import React, { forwardRef } from 'react';\nimport { SectionList as RNSectionList } from 'react-native';\nimport { usePropsResolution } from '../../../hooks';\nimport { makeStyledComponent } from '../../../utils/styled';\nimport type { ISectionListProps } from './types';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\n\nconst StyledSectionList: any = makeStyledComponent(RNSectionList);\n\nconst SectionListComponent = <ItemT extends any, sectionT extends any>(\n  props: ISectionListProps<ItemT, sectionT>,\n  ref: any\n) => {\n  const { ...resolvedProps } = usePropsResolution('SectionList', props);\n  //TODO: refactor for responsive prop\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n\n  return <StyledSectionList {...resolvedProps} ref={ref} />;\n};\n\nexport const SectionList = forwardRef(SectionListComponent) as <\n  ItemT,\n  sectionT\n>(\n  props: ISectionListProps<ItemT, sectionT>,\n  ref: any\n) => any;\n"]}