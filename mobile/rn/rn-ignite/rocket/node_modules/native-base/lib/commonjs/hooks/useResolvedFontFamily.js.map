{"version":3,"sources":["useResolvedFontFamily.ts"],"names":["useResolvedFontFamily","props","fontFamily","fontStyle","fontWeight","newFontFamily","newFontStyle","newFontWeight","fontConfig","fontWeights","fonts","fontToken","undefined","fontWeightNumber","fontVariant"],"mappings":";;;;;;;AAAA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,SAASA,qBAAT,CAA+BC,KAA/B,EAIJ;AACD,QAAM;AAAEC,IAAAA,UAAF;AAAcC,IAAAA,SAAd;AAAyBC,IAAAA;AAAzB,MAAwCH,KAA9C;AACA,MAAII,aAAa,GAAGH,UAApB;AACA,MAAII,YAAY,GAAGH,SAAnB;AACA,MAAII,aAAa,GAAGH,UAApB;AAEA,QAAM;AAAEI,IAAAA,UAAF;AAAcC,IAAAA,WAAd;AAA2BC,IAAAA;AAA3B,MAAqC,yBAA3C;;AACA,MAAIN,UAAU,IAAID,SAAd,IAA2BD,UAA3B,IAAyCA,UAAU,IAAIQ,KAA3D,EAAkE;AAChE;AACA,UAAMC,SAAc,GAAGD,KAAK,CAACR,UAAD,CAA5B;;AACA,QAAIM,UAAU,IAAIA,UAAU,CAACG,SAAD,CAA5B,EAAyC;AACvC;AACA;AACA;AACA;AACAJ,MAAAA,aAAa,GAAGK,SAAhB,CALuC,CAMvC;;AACAN,MAAAA,YAAY,GAAGM,SAAf;AAEA,UAAIC,gBAAgB,GAClBT,UAAU,IAAIK,WAAd,GAA4BA,WAAW,CAACL,UAAD,CAAvC,GAAsDA,UADxD;AAEA,UAAIU,WAAW,GAAGN,UAAU,CAACG,SAAD,CAAV,CAAsBE,gBAAtB,CAAlB;;AAEA,UAAI,OAAOC,WAAP,KAAuB,QAA3B,EAAqC;AACnC,YAAIA,WAAW,CAACX,SAAD,CAAf,EAA4BE,aAAa,GAAGS,WAAW,CAACX,SAAD,CAA3B;AAC7B,OAFD,MAEO;AACLE,QAAAA,aAAa,GAAGS,WAAhB;AACD;AACF,KAlBD,MAkBO;AACLT,MAAAA,aAAa,GAAGK,KAAK,CAACR,UAAD,CAArB;AACD;AACF;;AAED,SAAO;AACLA,IAAAA,UAAU,EAAEG,aADP;AAELD,IAAAA,UAAU,EAAEG,aAFP;AAGLJ,IAAAA,SAAS,EAAEG;AAHN,GAAP;AAKD","sourcesContent":["import { useTheme } from './useTheme';\nimport type { ITheme } from '../theme';\n/**\n *\n * @param props\n * @returns resolved fontFamily\n * @description Combination of fontWeight, fontStyle and font family is fully supported on web but on Android we need to pass the exact font family.\n * for e.g. If we load Roboto-Light-Italic.ttf using css, we can use fontFamily: Roboto, fontWeight: 300, fontStyle: italic on web, but same may not work on all the platforms. Other platform needs to set fontFamily: Roboto-Light-Italic in order to work.\n * So this function's purpose is to intake styles like fontFamily: Roboto, fontWeight: 300, fontStyle: Italic and return fontFamily: Roboto-Light-Italic depending upon the fontConfig token in typography theme.\n * This function depends upon fontConfig token in typography for mapping.\n */\nexport function useResolvedFontFamily(props: {\n  fontFamily?: keyof ITheme['fonts'];\n  fontStyle?: string;\n  fontWeight?: keyof ITheme['fontWeights'];\n}) {\n  const { fontFamily, fontStyle, fontWeight } = props;\n  let newFontFamily = fontFamily;\n  let newFontStyle = fontStyle;\n  let newFontWeight = fontWeight;\n\n  const { fontConfig, fontWeights, fonts } = useTheme();\n  if (fontWeight && fontStyle && fontFamily && fontFamily in fonts) {\n    // TODO: Fix typing remove any.\n    const fontToken: any = fonts[fontFamily];\n    if (fontConfig && fontConfig[fontToken]) {\n      // If a custom font family is resolved, set fontWeight and fontStyle to undefined.\n      // https://github.com/GeekyAnts/NativeBase/issues/3811\n      // On Android, If a fontFamily and fontWeight both are passed, it behaves in a weird way and applies system fonts with passed fontWeight. This happens only for some fontWeights e.g. '700' or 'bold'. So, if we find a custom fontFamily, we remove fontWeight and fontStyle\n      //@ts-ignore\n      newFontWeight = undefined;\n      //@ts-ignore\n      newFontStyle = undefined;\n\n      let fontWeightNumber =\n        fontWeight in fontWeights ? fontWeights[fontWeight] : fontWeight;\n      let fontVariant = fontConfig[fontToken][fontWeightNumber];\n\n      if (typeof fontVariant === 'object') {\n        if (fontVariant[fontStyle]) newFontFamily = fontVariant[fontStyle];\n      } else {\n        newFontFamily = fontVariant;\n      }\n    } else {\n      newFontFamily = fonts[fontFamily];\n    }\n  }\n\n  return {\n    fontFamily: newFontFamily,\n    fontWeight: newFontWeight,\n    fontStyle: newFontStyle,\n  };\n}\n"]}