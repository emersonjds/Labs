{"version":3,"sources":["findLastValidBreakpoint.test.tsx"],"names":["describe","test","expect","theme","breakpoints","toBe","base","sm","lg"],"mappings":";;AAAA;;AACA;;AAEAA,QAAQ,CAAC,MAAD,EAAS,MAAM;AACrB;AACAC,EAAAA,IAAI,CAAC,mBAAD,EAAsB,MAAM;AAC9BC,IAAAA,MAAM,CAAC,oCAAwB,CAAC,CAAD,EAAI,CAAJ,CAAxB,EAAgCC,aAAMC,WAAtC,EAAmD,CAAnD,CAAD,CAAN,CAA8DC,IAA9D,CAAmE,CAAnE;AACD,GAFG,CAAJ;AAGAJ,EAAAA,IAAI,CAAC,oBAAD,EAAuB,MAAM;AAC/BC,IAAAA,MAAM,CAAC,oCAAwB,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAAxB,EAAmCC,aAAMC,WAAzC,EAAsD,CAAtD,CAAD,CAAN,CAAiEC,IAAjE,CAAsE,CAAtE;AACD,GAFG,CAAJ;AAGAJ,EAAAA,IAAI,CAAC,kBAAD,EAAqB,MAAM;AAC7BC,IAAAA,MAAM,CAAC,oCAAwB,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAAxB,EAAmCC,aAAMC,WAAzC,EAAsD,CAAtD,CAAD,CAAN,CAAiEC,IAAjE,CAAsE,CAAtE;AACD,GAFG,CAAJ;AAGAJ,EAAAA,IAAI,CAAC,oBAAD,EAAuB,MAAM;AAC/BC,IAAAA,MAAM,CACJ,oCAAwB;AAAEI,MAAAA,IAAI,EAAE,CAAR;AAAWC,MAAAA,EAAE,EAAE,CAAf;AAAkBC,MAAAA,EAAE,EAAE;AAAtB,KAAxB,EAAmDL,aAAMC,WAAzD,EAAsE,CAAtE,CADI,CAAN,CAEEC,IAFF,CAEO,CAFP;AAGD,GAJG,CAAJ;AAKAJ,EAAAA,IAAI,CAAC,uBAAD,EAA0B,MAAM;AAClCC,IAAAA,MAAM,CACJ,oCAAwB;AAAEI,MAAAA,IAAI,EAAE,CAAR;AAAWC,MAAAA,EAAE,EAAE,CAAf;AAAkBC,MAAAA,EAAE,EAAE;AAAtB,KAAxB,EAAmDL,aAAMC,WAAzD,EAAsE,CAAtE,CADI,CAAN,CAEEC,IAFF,CAEO,CAFP;AAGD,GAJG,CAAJ;AAKAJ,EAAAA,IAAI,CAAC,uBAAD,EAA0B,MAAM;AAClCC,IAAAA,MAAM,CACJ,oCAAwB;AAAEI,MAAAA,IAAI,EAAE,CAAR;AAAWC,MAAAA,EAAE,EAAE,CAAf;AAAkBC,MAAAA,EAAE,EAAE;AAAtB,KAAxB,EAAmDL,aAAMC,WAAzD,EAAsE,CAAtE,CADI,CAAN,CAEEC,IAFF,CAEO,CAFP;AAGD,GAJG,CAAJ;AAKAJ,EAAAA,IAAI,CAAC,mBAAD,EAAsB,MAAM;AAC9BC,IAAAA,MAAM,CACJ,oCAAwB;AAAEI,MAAAA,IAAI,EAAE,CAAR;AAAWC,MAAAA,EAAE,EAAE,CAAf;AAAkBC,MAAAA,EAAE,EAAE;AAAtB,KAAxB,EAAmDL,aAAMC,WAAzD,EAAsE,CAAtE,CADI,CAAN,CAEEC,IAFF,CAEO,CAFP;AAGD,GAJG,CAAJ;AAKD,CA/BO,CAAR","sourcesContent":["import { findLastValidBreakpoint } from './../../theme/tools/utils';\nimport { theme } from '../../theme';\n\ndescribe('mode', () => {\n  // const theme = useTheme();\n  test('First array value', () => {\n    expect(findLastValidBreakpoint([1, 2], theme.breakpoints, 0)).toBe(1);\n  });\n  test('Middle array value', () => {\n    expect(findLastValidBreakpoint([1, 2, 3], theme.breakpoints, 1)).toBe(2);\n  });\n  test('Last array value', () => {\n    expect(findLastValidBreakpoint([1, 2, 3], theme.breakpoints, 2)).toBe(3);\n  });\n  test('First Object value', () => {\n    expect(\n      findLastValidBreakpoint({ base: 1, sm: 2, lg: 3 }, theme.breakpoints, 0)\n    ).toBe(1);\n  });\n  test('Middle object value 1', () => {\n    expect(\n      findLastValidBreakpoint({ base: 1, sm: 2, lg: 3 }, theme.breakpoints, 1)\n    ).toBe(2);\n  });\n  test('Middle object value 2', () => {\n    expect(\n      findLastValidBreakpoint({ base: 1, sm: 2, lg: 3 }, theme.breakpoints, 2)\n    ).toBe(2);\n  });\n  test('Last object value', () => {\n    expect(\n      findLastValidBreakpoint({ base: 1, sm: 2, lg: 3 }, theme.breakpoints, 3)\n    ).toBe(3);\n  });\n});\n"]}