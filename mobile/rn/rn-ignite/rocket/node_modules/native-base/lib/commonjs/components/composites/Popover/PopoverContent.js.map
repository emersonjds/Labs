{"version":3,"sources":["PopoverContent.tsx"],"names":["PopoverContent","React","forwardRef","props","ref","onClose","initialFocusRef","finalFocusRef","popoverContentId","headerMounted","bodyMounted","bodyId","headerId","isOpen","useContext","PopoverContext","resolvedProps","arrowDefaultColor","bgColor","bg","backgroundColor","color","useEffect","finalFocusRefCurrentVal","current","focus","enabled","callback","arrowElement","restChildren","Children","forEach","children","child","type","displayName","cloneElement","push","accessibilityProps","Platform","OS","undefined"],"mappings":";;;;;;;AAAA;;AAKA;;AACA;;AAEA;;AACA;;AACA;;;;;;AAEO,MAAMA,cAAc,gBAAGC,eAAMC,UAAN,CAC5B,CAACC,KAAD,EAA8BC,GAA9B,KAA2C;AAAA;;AACzC,QAAM;AACJC,IAAAA,OADI;AAEJC,IAAAA,eAFI;AAGJC,IAAAA,aAHI;AAIJC,IAAAA,gBAJI;AAKJC,IAAAA,aALI;AAMJC,IAAAA,WANI;AAOJC,IAAAA,MAPI;AAQJC,IAAAA,QARI;AASJC,IAAAA;AATI,MAUFZ,eAAMa,UAAN,CAAiBC,8BAAjB,CAVJ;;AAWA,QAAMC,aAAa,GAAG,+BAAmB,gBAAnB,EAAqCb,KAArC,CAAtB;AAEA,QAAMc,iBAAiB,sCACrBd,KAAK,CAACe,OADe,2DAErBf,KAAK,CAACgB,EAFe,yCAGrBhB,KAAK,CAACiB,eAHe,uCAIrBJ,aAAa,CAACI,eAJhB;AAKA,QAAMC,KAAK,GAAG,qBAAS,QAAT,EAAmBJ,iBAAnB,CAAd;;AAEAhB,iBAAMqB,SAAN,CAAgB,MAAM;AACpB,UAAMC,uBAAuB,GAAGhB,aAAH,aAAGA,aAAH,uBAAGA,aAAa,CAAEiB,OAA/C;;AACA,QAAIlB,eAAe,IAAIA,eAAe,CAACkB,OAAvC,EAAgD;AAC9ClB,MAAAA,eAAe,CAACkB,OAAhB,CAAwBC,KAAxB;AACD;;AAED,WAAO,MAAM;AACX,UAAIF,uBAAJ,EAA6B;AAC3BA,QAAAA,uBAAuB,CAACE,KAAxB;AACD;AACF,KAJD;AAKD,GAXD,EAWG,CAAClB,aAAD,EAAgBD,eAAhB,CAXH;;AAaA,qCAAuB;AACrBoB,IAAAA,OAAO,EAAE,IADY;AAErBC,IAAAA,QAAQ,EAAEtB;AAFW,GAAvB;AAKA,MAAIuB,YAAY,GAAG,IAAnB;AACA,QAAMC,YAAiB,GAAG,EAA1B;;AACA5B,iBAAM6B,QAAN,CAAeC,OAAf,CAAuB5B,KAAK,CAAC6B,QAA7B,EAAwCC,KAAD,IAAW;AAChD,QAAIA,KAAK,CAACC,IAAN,CAAWC,WAAX,KAA2B,aAA/B,EAA8C;AAAA;;AAC5CP,MAAAA,YAAY,gBAAG3B,eAAMmC,YAAN,CAAmBH,KAAnB,EAA0B;AACvCb,QAAAA,eAAe,wBAAEa,KAAK,CAAC9B,KAAN,CAAYkB,KAAd,mEAAuBA;AADC,OAA1B,CAAf;AAGD,KAJD,MAIO;AACLQ,MAAAA,YAAY,CAACQ,IAAb,CAAkBJ,KAAlB;AACD;AACF,GARD;;AAUA,QAAMK,kBAAkB,GACtBC,sBAASC,EAAT,KAAgB,KAAhB,GACK;AACC,yBAAqB,QADtB;AAEC,uBAAmB/B,aAAa,GAAGG,QAAH,GAAc6B,SAF/C;AAGC,wBAAoB/B,WAAW,GAAGC,MAAH,GAAY8B;AAH5C,GADL,GAMI,EAPN,CAnDyC,CA4DzC;;AACA,MAAI,kDAAsBtC,KAAtB,CAAJ,EAAkC;AAChC,WAAO,IAAP;AACD;;AAED,sBACE,6BAAC,cAAD,CAAQ,OAAR;AACE,IAAA,QAAQ,EAAEK;AADZ,KAEM8B,kBAFN,EAGMtB,aAHN;AAIE,IAAA,GAAG,EAAEZ,GAJP;AAKE,IAAA,MAAM,EAAES;AALV,MAOGe,YAPH,EAQGC,YARH,CADF;AAYD,CA9E2B,CAAvB;;;AAiFP7B,cAAc,CAACmC,WAAf,GAA6B,gBAA7B","sourcesContent":["import {\n  useKeyboardDismissable,\n  usePropsResolution,\n  useToken,\n} from '../../../hooks';\nimport React from 'react';\nimport { Platform } from 'react-native';\nimport type { IPopoverContentProps } from './types';\nimport { Popper } from '../Popper';\nimport { PopoverContext } from './PopoverContext';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\n\nexport const PopoverContent = React.forwardRef(\n  (props: IPopoverContentProps, ref: any) => {\n    const {\n      onClose,\n      initialFocusRef,\n      finalFocusRef,\n      popoverContentId,\n      headerMounted,\n      bodyMounted,\n      bodyId,\n      headerId,\n      isOpen,\n    } = React.useContext(PopoverContext);\n    const resolvedProps = usePropsResolution('PopoverContent', props);\n\n    const arrowDefaultColor =\n      props.bgColor ??\n      props.bg ??\n      props.backgroundColor ??\n      resolvedProps.backgroundColor;\n    const color = useToken('colors', arrowDefaultColor);\n\n    React.useEffect(() => {\n      const finalFocusRefCurrentVal = finalFocusRef?.current;\n      if (initialFocusRef && initialFocusRef.current) {\n        initialFocusRef.current.focus();\n      }\n\n      return () => {\n        if (finalFocusRefCurrentVal) {\n          finalFocusRefCurrentVal.focus();\n        }\n      };\n    }, [finalFocusRef, initialFocusRef]);\n\n    useKeyboardDismissable({\n      enabled: true,\n      callback: onClose,\n    });\n\n    let arrowElement = null;\n    const restChildren: any = [];\n    React.Children.forEach(props.children, (child) => {\n      if (child.type.displayName === 'PopperArrow') {\n        arrowElement = React.cloneElement(child, {\n          backgroundColor: child.props.color ?? color,\n        });\n      } else {\n        restChildren.push(child);\n      }\n    });\n\n    const accessibilityProps =\n      Platform.OS === 'web'\n        ? ({\n            'accessibilityRole': 'dialog',\n            'aria-labelledby': headerMounted ? headerId : undefined,\n            'aria-describedby': bodyMounted ? bodyId : undefined,\n          } as any)\n        : {};\n\n    //TODO: refactor for responsive prop\n    if (useHasResponsiveProps(props)) {\n      return null;\n    }\n\n    return (\n      <Popper.Content\n        nativeID={popoverContentId}\n        {...accessibilityProps}\n        {...resolvedProps}\n        ref={ref}\n        isOpen={isOpen}\n      >\n        {arrowElement}\n        {restChildren}\n      </Popper.Content>\n    );\n  }\n);\n\nPopoverContent.displayName = 'PopoverContent';\n"]}