{"version":3,"sources":["Skeleton.tsx"],"names":["Skeleton","props","ref","isDomUsable","children","startColor","endColor","resolvedProps","blinkAnim","React","useRef","Animated","Value","current","tokenisedStartColor","useEffect","blink","sequence","timing","toValue","duration","fadeDuration","speed","useNativeDriver","Platform","OS","loop","start","skeletonStyle","skeleton","height","width","backgroundColor","opacity","isLoaded"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AAEA;;AACA;;;;;;;;;;AAEA,MAAMA,QAAQ,GAAG,CAACC,KAAD,EAAwBC,GAAxB,KAAqC;AACpD,QAAMC,WAAW,GAAG,uBAApB;AACA,QAAM;AACJC,IAAAA,QADI;AAEJC,IAAAA,UAFI;AAGJC,IAAAA,QAHI;AAIJ,OAAGC;AAJC,MAKF,+BAAmB,UAAnB,EAA+BN,KAA/B,CALJ,CAFoD,CAQpD;;AACA,QAAMO,SAAS,GAAGC,eAAMC,MAAN,CAAa,IAAIC,sBAASC,KAAb,CAAmB,CAAnB,CAAb,EAAoCC,OAAtD;;AACA,QAAMC,mBAAmB,GAAG,wBAAS,QAAT,EAAmBT,UAAnB,CAA5B,CAVoD,CAYpD;;AACAI,iBAAMM,SAAN,CAAgB,MAAM;AACpB;AACA,QAAIZ,WAAJ,EAAiB;AACf,YAAMa,KAAK,GAAGL,sBAASM,QAAT,CAAkB,CAC9BN,sBAASO,MAAT,CAAgBV,SAAhB,EAA2B;AACzBW,QAAAA,OAAO,EAAE,CADgB;AAEzBC,QAAAA,QAAQ,EACNb,aAAa,CAACc,YAAd,GAA6B,KAA7B,IAAsC,IAAId,aAAa,CAACe,KAAxD,CAHuB;AAIzBC,QAAAA,eAAe,EAAEC,sBAASC,EAAT,KAAgB;AAJR,OAA3B,CAD8B,EAO9Bd,sBAASO,MAAT,CAAgBV,SAAhB,EAA2B;AACzBW,QAAAA,OAAO,EAAE,CADgB;AAEzBC,QAAAA,QAAQ,EACNb,aAAa,CAACc,YAAd,GAA6B,KAA7B,IAAsC,IAAId,aAAa,CAACe,KAAxD,CAHuB;AAIzBC,QAAAA,eAAe,EAAEC,sBAASC,EAAT,KAAgB;AAJR,OAA3B,CAP8B,CAAlB,CAAd;;AAcAd,4BAASe,IAAT,CAAcV,KAAd,EAAqBW,KAArB;AACD;AACF,GAnBD,EAmBG,CAACnB,SAAD,EAAYL,WAAZ,EAAyBI,aAAzB,CAnBH;;AAqBA,QAAMqB,aAAkB,GAAG;AACzBC,IAAAA,QAAQ,EAAE;AACRC,MAAAA,MAAM,EAAE,MADA;AAERC,MAAAA,KAAK,EAAE,MAFC;AAGRC,MAAAA,eAAe,EAAElB,mBAHT;AAIRmB,MAAAA,OAAO,EAAEzB,SAJD,CAIY;;AAJZ;AADe,GAA3B,CAlCoD,CA2CpD;;AACA,MAAI,kDAAsBP,KAAtB,CAAJ,EAAkC;AAChC,WAAO,IAAP;AACD;;AAED,SAAOM,aAAa,CAAC2B,QAAd,GACL9B,QADK,gBAGL,6BAAC,YAAD;AAAK,IAAA,EAAE,EAAEE;AAAT,KAAuBC,aAAvB;AAAsC,IAAA,GAAG,EAAEL;AAA3C,mBACE,6BAAC,qBAAD,CAAU,IAAV;AAAe,IAAA,KAAK,EAAE0B,aAAa,CAACC;AAApC,IADF,CAHF;AAOD,CAvDD;;4BAyDe,+BAAK,uBAAW7B,QAAX,CAAL,C","sourcesContent":["import React, { memo, forwardRef } from 'react';\nimport { Animated, Platform } from 'react-native';\nimport { usePropsResolution } from '../../../hooks';\nimport { canUseDom } from '../../../utils';\nimport Box from '../../primitives/Box';\nimport type { ISkeletonProps } from './types';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\nimport { useToken } from '../../../hooks/useToken';\n\nconst Skeleton = (props: ISkeletonProps, ref: any) => {\n  const isDomUsable = canUseDom();\n  const {\n    children,\n    startColor,\n    endColor,\n    ...resolvedProps\n  } = usePropsResolution('Skeleton', props);\n  // Setting blink Animation\n  const blinkAnim = React.useRef(new Animated.Value(0)).current;\n  const tokenisedStartColor = useToken('colors', startColor);\n\n  // Generating blink animation in a sequence\n  React.useEffect(() => {\n    //Check if window is loaded\n    if (isDomUsable) {\n      const blink = Animated.sequence([\n        Animated.timing(blinkAnim, {\n          toValue: 1,\n          duration:\n            resolvedProps.fadeDuration * 10000 * (1 / resolvedProps.speed),\n          useNativeDriver: Platform.OS !== 'web',\n        }),\n        Animated.timing(blinkAnim, {\n          toValue: 0,\n          duration:\n            resolvedProps.fadeDuration * 10000 * (1 / resolvedProps.speed),\n          useNativeDriver: Platform.OS !== 'web',\n        }),\n      ]);\n      Animated.loop(blink).start();\n    }\n  }, [blinkAnim, isDomUsable, resolvedProps]);\n\n  const skeletonStyle: any = {\n    skeleton: {\n      height: '100%',\n      width: '100%',\n      backgroundColor: tokenisedStartColor,\n      opacity: blinkAnim, // Bind opacity to animated value\n    },\n  };\n\n  //TODO: refactor for responsive prop\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n\n  return resolvedProps.isLoaded ? (\n    children\n  ) : (\n    <Box bg={endColor} {...resolvedProps} ref={ref}>\n      <Animated.View style={skeletonStyle.skeleton} />\n    </Box>\n  );\n};\n\nexport default memo(forwardRef(Skeleton));\n"]}