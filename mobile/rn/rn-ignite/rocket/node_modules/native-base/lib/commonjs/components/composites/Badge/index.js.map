{"version":3,"sources":["index.tsx"],"names":["Badge","children","startIcon","rightIcon","leftIcon","endIcon","props","ref","_icon","_text","newProps","React","isValidElement","Children","map","child","index","cloneElement","key"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AAEA;;AACA;;;;;;;;;;AAEA,MAAMA,KAAK,GAAG,CACZ;AACEC,EAAAA,QADF;AAEEC,EAAAA,SAFF;AAGEC,EAAAA,SAHF;AAIEC,EAAAA,QAJF;AAKEC,EAAAA,OALF;AAOE,KAAGC;AAPL,CADY,EAUZC,GAVY,KAWT;AACH,QAAM;AAAEC,IAAAA,KAAF;AAASC,IAAAA,KAAT;AAAgB,OAAGC;AAAnB,MAAgC,uCAAmB,OAAnB,EAA4BJ,KAA5B,CAAtC,CADG,CAGH;;AACA,MAAI,kDAAsBA,KAAtB,CAAJ,EAAkC;AAChC,WAAO,IAAP;AACD;;AAED,MAAIF,QAAJ,EAAc;AACZF,IAAAA,SAAS,GAAGE,QAAZ;AACD;;AACD,MAAID,SAAJ,EAAe;AACbE,IAAAA,OAAO,GAAGF,SAAV;AACD;;AAED,MAAIE,OAAO,iBAAIM,eAAMC,cAAN,CAAqBP,OAArB,CAAf,EAA8C;AAC5CA,IAAAA,OAAO,GAAGM,eAAME,QAAN,CAAeC,GAAf,CACRT,OADQ,EAER,CAACU,KAAD,EAAqBC,KAArB,KAAuC;AACrC,0BAAOL,eAAMM,YAAN,CAAmBF,KAAnB,EAA0B;AAC/BG,QAAAA,GAAG,2BAAoBF,KAApB,CAD4B;AAE/B,WAAGR,KAF4B;AAG/B,WAAGO,KAAK,CAACT;AAHsB,OAA1B,CAAP;AAKD,KARO,CAAV;AAUD;;AACD,MAAIJ,SAAS,iBAAIS,eAAMC,cAAN,CAAqBV,SAArB,CAAjB,EAAkD;AAChDA,IAAAA,SAAS,GAAGS,eAAME,QAAN,CAAeC,GAAf,CACVZ,SADU,EAEV,CAACa,KAAD,EAAqBC,KAArB,KAAuC;AACrC,0BAAOL,eAAMM,YAAN,CAAmBF,KAAnB,EAA0B;AAC/BG,QAAAA,GAAG,6BAAsBF,KAAtB,CAD4B;AAE/B,WAAGR,KAF4B;AAG/B,WAAGO,KAAK,CAACT;AAHsB,OAA1B,CAAP;AAKD,KARS,CAAZ;AAUD;;AAED,sBACE,6BAAC,eAAD,eAAYI,QAAZ;AAAsB,IAAA,GAAG,EAAEH;AAA3B,MACGL,SAAS,GAAGA,SAAH,GAAe,IAD3B,eAEE,6BAAC,YAAD;AAAK,IAAA,KAAK,EAAEO;AAAZ,KAAoBR,QAApB,CAFF,EAGGI,OAAO,GAAGA,OAAH,GAAa,IAHvB,CADF;AAOD,CA1DD;;4BA8De,+BAAK,uBAAWL,KAAX,CAAL,C","sourcesContent":["import React, { memo, forwardRef } from 'react';\nimport HStack from '../../primitives/Stack/HStack';\nimport Box from '../../primitives/Box';\nimport type { IBadgeProps } from './types';\nimport { usePropsResolution } from '../../../hooks/useThemeProps';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\n\nconst Badge = (\n  {\n    children,\n    startIcon,\n    rightIcon,\n    leftIcon,\n    endIcon,\n\n    ...props\n  }: IBadgeProps,\n  ref: any\n) => {\n  const { _icon, _text, ...newProps } = usePropsResolution('Badge', props);\n\n  //TODO: refactor for responsive prop\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n\n  if (leftIcon) {\n    startIcon = leftIcon;\n  }\n  if (rightIcon) {\n    endIcon = rightIcon;\n  }\n\n  if (endIcon && React.isValidElement(endIcon)) {\n    endIcon = React.Children.map(\n      endIcon,\n      (child: JSX.Element, index: number) => {\n        return React.cloneElement(child, {\n          key: `badge-end-icon-${index}`,\n          ..._icon,\n          ...child.props,\n        });\n      }\n    );\n  }\n  if (startIcon && React.isValidElement(startIcon)) {\n    startIcon = React.Children.map(\n      startIcon,\n      (child: JSX.Element, index: number) => {\n        return React.cloneElement(child, {\n          key: `badge-start-icon-${index}`,\n          ..._icon,\n          ...child.props,\n        });\n      }\n    );\n  }\n\n  return (\n    <HStack {...newProps} ref={ref}>\n      {startIcon ? startIcon : null}\n      <Box _text={_text}>{children}</Box>\n      {endIcon ? endIcon : null}\n    </HStack>\n  );\n};\n\nexport type IBadgeComponentType = (props: IBadgeProps) => JSX.Element;\n\nexport default memo(forwardRef(Badge)) as IBadgeComponentType;\nexport type { IBadgeProps };\n"]}