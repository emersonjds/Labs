{"version":3,"sources":["index.ts"],"names":["config","useSystemColorMode","initialColorMode","accessibleColors","theme","base","components"],"mappings":";;;;;;;;;;;;;;;;;;AAAA;;AACA;;AACA;;;;AA8BA;;AACA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;AArBA,MAAMA,MAAwB,GAAG;AAC/BC,EAAAA,kBAAkB,EAAE,KADW;AACJ;AAC3BC,EAAAA,gBAAgB,EAAE,OAFa;AAG/BC,EAAAA,gBAAgB,EAAE;AAHa,CAAjC;AAMA,MAAMC,KAAK,GAAG,EACZ,GAAGC,aADS;AAEZC,EAAAA,UAAU,EAAVA,mBAFY;AAGZN,EAAAA;AAHY,CAAd","sourcesContent":["import base from './base';\nimport components from './components';\nimport * as tools from './tools';\nimport type { StyledProps } from '../theme/types';\n//@ts-ignore\nimport type { ColorModeOptions } from './../core/color-mode/types';\nexport interface ComponentTheme {\n  baseStyle?: ((props: any) => StyledProps) | StyledProps;\n  sizes?: Record<string, ((props: any) => StyledProps) | StyledProps>;\n  variants?: Record<string, ((props: any) => StyledProps) | StyledProps>;\n  defaultProps?: Record<string, any>;\n}\nconst config: ColorModeOptions = {\n  useSystemColorMode: false, // TODO: implement this\n  initialColorMode: 'light',\n  accessibleColors: false,\n};\n\nconst theme = {\n  ...base,\n  components,\n  config,\n};\n\nexport type Theme = typeof theme & { fontConfig: any };\n\nexport interface ICustomTheme {}\n\nexport interface ITheme extends ICustomTheme, Omit<Theme, keyof ICustomTheme> {}\n\nexport { theme, tools as themeTools };\n\nexport { getColor } from './styled-system';\nexport * from './v33x-theme';\n"]}