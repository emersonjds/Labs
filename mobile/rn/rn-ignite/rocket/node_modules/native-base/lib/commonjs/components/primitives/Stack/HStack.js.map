{"version":3,"sources":["HStack.tsx"],"names":["HStack","props","ref","resolvedProps"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AAEA;;;;;;;;;;AAYA,MAAMA,MAAM,GAAG,CAACC,KAAD,EAAsBC,GAAtB,KAAoC;AACjD,QAAMC,aAAa,GAAG,uCAAmB,QAAnB,EAA6BF,KAA7B,CAAtB,CADiD,CAEjD;;AACA,MAAI,kDAAsBA,KAAtB,CAAJ,EAAkC;AAChC,WAAO,IAAP;AACD;;AACD,sBAAO,6BAAC,cAAD;AAAW,IAAA,GAAG,EAAEC,GAAhB;AAAqB,IAAA,SAAS,EAAC;AAA/B,KAAyCC,aAAzC,EAAP;AACD,CAPD;;4BASe,+BAAK,uBAAWH,MAAX,CAAL,C","sourcesContent":["import React, { memo, forwardRef } from 'react';\nimport StackMain, { InterfaceStackProps } from './Stack';\nimport { usePropsResolution } from '../../../hooks/useThemeProps';\nimport type { CustomProps, ResponsiveValue } from '../../types';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\nexport interface InterfaceHStackProps extends InterfaceStackProps {\n  /**\n   * The direction of the Stack Items.\n   * @default row\n   */\n  direction?: ResponsiveValue<\n    'column' | 'row' | 'column-reverse' | 'row-reverse'\n  >;\n}\n\nexport type IHStackProps = InterfaceHStackProps & CustomProps<'HStack'>;\nconst HStack = (props: IHStackProps, ref?: any) => {\n  const resolvedProps = usePropsResolution('HStack', props);\n  //TODO: refactor for responsive prop\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n  return <StackMain ref={ref} direction=\"row\" {...resolvedProps} />;\n};\n\nexport default memo(forwardRef(HStack));\n"]}