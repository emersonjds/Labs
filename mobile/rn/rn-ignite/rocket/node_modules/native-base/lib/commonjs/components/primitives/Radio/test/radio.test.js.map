{"version":3,"sources":["radio.test.tsx"],"names":["RadiosGroup","setValue","React","useState","nextValue","describe","it","getAllByRole","getByText","frame","x","y","width","height","insets","top","left","right","bottom","radios","expect","length","toBe","props","accessibilityState","checked","second","fireEvent","press","disabled"],"mappings":";;AAAA;;AACA;;AACA;;AACA;;AACA;;;;AACA,SAASA,WAAT,GAAuB;AACrB,QAAM,GAAGC,QAAH,IAAeC,eAAMC,QAAN,CAAoB,KAApB,CAArB;;AACA,sBACE,6BAAC,OAAD,CAAO,KAAP;AACE,IAAA,YAAY,EAAC,GADf;AAEE,IAAA,IAAI,EAAC,cAFP;AAGE,IAAA,QAAQ,EAAGC,SAAD,IAAoB;AAC5BH,MAAAA,QAAQ,CAACG,SAAD,CAAR;AACD;AALH,kBAOE,6BAAC,OAAD;AAAO,IAAA,KAAK,EAAC;AAAb,kBACE,6BAAC,OAAD;AAAM,IAAA,EAAE,EAAE;AAAV,aADF,CAPF,eAUE,6BAAC,OAAD;AAAO,IAAA,KAAK,EAAC;AAAb,kBACE,6BAAC,OAAD;AAAM,IAAA,EAAE,EAAE;AAAV,cADF,CAVF,eAaE,6BAAC,OAAD;AAAO,IAAA,KAAK,EAAC;AAAb,kBACE,6BAAC,OAAD;AAAM,IAAA,EAAE,EAAE;AAAV,aADF,CAbF,CADF;AAmBD;;AACDC,QAAQ,CAAC,YAAD,EAAe,MAAM;AAC3BC,EAAAA,EAAE,CAAC,oCAAD,EAAuC,MAAM;AAC7C,QAAI;AAAEC,MAAAA,YAAF;AAAgBC,MAAAA;AAAhB,QAA8B,uCAChC,6BAAC,sCAAD;AACE,MAAA,oBAAoB,EAAE;AACpBC,QAAAA,KAAK,EAAE;AAAEC,UAAAA,CAAC,EAAE,CAAL;AAAQC,UAAAA,CAAC,EAAE,CAAX;AAAcC,UAAAA,KAAK,EAAE,CAArB;AAAwBC,UAAAA,MAAM,EAAE;AAAhC,SADa;AAEpBC,QAAAA,MAAM,EAAE;AAAEC,UAAAA,GAAG,EAAE,CAAP;AAAUC,UAAAA,IAAI,EAAE,CAAhB;AAAmBC,UAAAA,KAAK,EAAE,CAA1B;AAA6BC,UAAAA,MAAM,EAAE;AAArC;AAFY;AADxB,oBAME,6BAAC,WAAD,OANF,CADgC,CAAlC;AAUA,QAAIC,MAAM,GAAGZ,YAAY,CAAC,OAAD,CAAzB;AACAa,IAAAA,MAAM,CAACD,MAAM,CAACE,MAAR,CAAN,CAAsBC,IAAtB,CAA2B,CAA3B;AACAF,IAAAA,MAAM,CAACD,MAAM,CAAC,CAAD,CAAN,CAAUI,KAAV,CAAgBC,kBAAhB,CAAmCC,OAApC,CAAN,CAAmDH,IAAnD,CAAwD,IAAxD;AACAF,IAAAA,MAAM,CAACD,MAAM,CAAC,CAAD,CAAN,CAAUI,KAAV,CAAgBC,kBAAhB,CAAmCC,OAApC,CAAN,CAAmDH,IAAnD,CAAwD,KAAxD;AACAF,IAAAA,MAAM,CAACD,MAAM,CAAC,CAAD,CAAN,CAAUI,KAAV,CAAgBC,kBAAhB,CAAmCC,OAApC,CAAN,CAAmDH,IAAnD,CAAwD,KAAxD;AACA,QAAII,MAAM,GAAGlB,SAAS,CAAC,QAAD,CAAtB;;AACAmB,2BAAUC,KAAV,CAAgBF,MAAhB;;AACAN,IAAAA,MAAM,CAACD,MAAM,CAAC,CAAD,CAAN,CAAUI,KAAV,CAAgBC,kBAAhB,CAAmCC,OAApC,CAAN,CAAmDH,IAAnD,CAAwD,KAAxD;AACD,GAnBC,CAAF;AAqBAhB,EAAAA,EAAE,CAAC,iBAAD,EAAoB,MAAM;AAC1B,QAAI;AAAEC,MAAAA;AAAF,QAAmB,uCACrB,6BAAC,sCAAD;AACE,MAAA,oBAAoB,EAAE;AACpBE,QAAAA,KAAK,EAAE;AAAEC,UAAAA,CAAC,EAAE,CAAL;AAAQC,UAAAA,CAAC,EAAE,CAAX;AAAcC,UAAAA,KAAK,EAAE,CAArB;AAAwBC,UAAAA,MAAM,EAAE;AAAhC,SADa;AAEpBC,QAAAA,MAAM,EAAE;AAAEC,UAAAA,GAAG,EAAE,CAAP;AAAUC,UAAAA,IAAI,EAAE,CAAhB;AAAmBC,UAAAA,KAAK,EAAE,CAA1B;AAA6BC,UAAAA,MAAM,EAAE;AAArC;AAFY;AADxB,oBAME,6BAAC,OAAD,CAAO,KAAP;AAAa,MAAA,YAAY,EAAC,GAA1B;AAA8B,MAAA,IAAI,EAAC;AAAnC,oBACE,6BAAC,OAAD;AAAO,MAAA,KAAK,EAAC;AAAb,oBACE,6BAAC,OAAD;AAAM,MAAA,EAAE,EAAE;AAAV,eADF,CADF,eAIE,6BAAC,OAAD;AAAO,MAAA,KAAK,EAAC,GAAb;AAAiB,MAAA,UAAU;AAA3B,oBACE,6BAAC,OAAD;AAAM,MAAA,EAAE,EAAE;AAAV,gBADF,CAJF,eAOE,6BAAC,OAAD;AAAO,MAAA,KAAK,EAAC;AAAb,oBACE,6BAAC,OAAD;AAAM,MAAA,EAAE,EAAE;AAAV,eADF,CAPF,CANF,CADqB,CAAvB;AAoBA,QAAIQ,MAAM,GAAGnB,YAAY,CAAC,OAAD,CAAzB;AACAa,IAAAA,MAAM,CAACM,MAAM,CAAC,CAAD,CAAN,CAAUH,KAAV,CAAgBC,kBAAhB,CAAmCK,QAApC,CAAN,CAAoDP,IAApD,CAAyD,IAAzD;AACD,GAvBC,CAAF;AAwBD,CA9CO,CAAR","sourcesContent":["import React from 'react';\nimport { fireEvent, render } from '@testing-library/react-native';\nimport { Radio } from '..';\nimport { Text } from '../..';\nimport { NativeBaseProvider } from '../../../../core/NativeBaseProvider';\nfunction RadiosGroup() {\n  const [, setValue] = React.useState<any>('one');\n  return (\n    <Radio.Group\n      defaultValue=\"1\"\n      name=\"myRadioGroup\"\n      onChange={(nextValue: any) => {\n        setValue(nextValue);\n      }}\n    >\n      <Radio value=\"1\">\n        <Text mx={2}>First</Text>\n      </Radio>\n      <Radio value=\"2\">\n        <Text mx={2}>Second</Text>\n      </Radio>\n      <Radio value=\"3\">\n        <Text mx={2}>Third</Text>\n      </Radio>\n    </Radio.Group>\n  );\n}\ndescribe('RadioGroup', () => {\n  it('onChange and default on RadioGroup', () => {\n    let { getAllByRole, getByText } = render(\n      <NativeBaseProvider\n        initialWindowMetrics={{\n          frame: { x: 0, y: 0, width: 0, height: 0 },\n          insets: { top: 0, left: 0, right: 0, bottom: 0 },\n        }}\n      >\n        <RadiosGroup />\n      </NativeBaseProvider>\n    );\n    let radios = getAllByRole('radio');\n    expect(radios.length).toBe(3);\n    expect(radios[0].props.accessibilityState.checked).toBe(true);\n    expect(radios[1].props.accessibilityState.checked).toBe(false);\n    expect(radios[2].props.accessibilityState.checked).toBe(false);\n    let second = getByText('Second');\n    fireEvent.press(second);\n    expect(radios[0].props.accessibilityState.checked).toBe(false);\n  });\n\n  it('can be disabled', () => {\n    let { getAllByRole } = render(\n      <NativeBaseProvider\n        initialWindowMetrics={{\n          frame: { x: 0, y: 0, width: 0, height: 0 },\n          insets: { top: 0, left: 0, right: 0, bottom: 0 },\n        }}\n      >\n        <Radio.Group defaultValue=\"1\" name=\"myRadioGroup\">\n          <Radio value=\"1\">\n            <Text mx={2}>First</Text>\n          </Radio>\n          <Radio value=\"2\" isDisabled>\n            <Text mx={2}>Second</Text>\n          </Radio>\n          <Radio value=\"3\">\n            <Text mx={2}>Third</Text>\n          </Radio>\n        </Radio.Group>\n      </NativeBaseProvider>\n    );\n    let second = getAllByRole('radio');\n    expect(second[1].props.accessibilityState.disabled).toBe(true);\n  });\n});\n"]}