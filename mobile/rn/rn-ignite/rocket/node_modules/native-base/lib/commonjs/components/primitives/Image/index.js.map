{"version":3,"sources":["index.tsx"],"names":["StyledImage","RNImage","Image","props","ref","source","src","fallbackElement","alt","fallbackSource","ignoreFallback","_alt","resolvedProps","finalSource","getSource","current","uri","renderedSource","setSource","alternate","setAlternate","fallbackSourceFlag","setfallbackSourceFlag","React","useEffect","onImageLoadError","event","onError","console","warn","nativeEvent","error","isValidElement","ImageWithStatics","getSize","prefetch","queryCache"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AACA;;AAEA;;AACA;;;;;;;;;;AAEA,MAAMA,WAAW,GAAG,iCAAoBC,kBAApB,CAApB;AAEA,MAAMC,KAAK,gBAAG,+BACZ,uBAAW,CAACC,KAAD,EAAqBC,GAArB,KAAkC;AAC3C,QAAM;AACJC,IAAAA,MADI;AAEJC,IAAAA,GAFI;AAGJC,IAAAA,eAHI;AAIJC,IAAAA,GAJI;AAKJC,IAAAA,cALI;AAMJC,IAAAA,cANI;AAOJC,IAAAA,IAPI;AAQJ,OAAGC;AARC,MASF,uCAAmB,OAAnB,EAA4BT,KAA5B,CATJ;AAWA,QAAMU,WAAgB,GAAG,mBAAO,IAAP,CAAzB;AACA,QAAMC,SAAS,GAAG,wBAAY,MAAM;AAClC,QAAIT,MAAJ,EAAY;AACVQ,MAAAA,WAAW,CAACE,OAAZ,GAAsBV,MAAtB;AACD,KAFD,MAEO,IAAIC,GAAJ,EAAS;AACdO,MAAAA,WAAW,CAACE,OAAZ,GAAsB;AAAEC,QAAAA,GAAG,EAAEV;AAAP,OAAtB;AACD;;AACD,WAAOO,WAAW,CAACE,OAAnB,CANkC,CAOlC;AACD,GARiB,EAQf,CAACV,MAAD,aAACA,MAAD,uBAACA,MAAM,CAAEW,GAAT,EAAcV,GAAd,CARe,CAAlB;AAUA,QAAM,CAACW,cAAD,EAAiBC,SAAjB,IAA8B,qBAASJ,SAAS,EAAlB,CAApC;AACA,QAAM,CAACK,SAAD,EAAYC,YAAZ,IAA4B,qBAAS,KAAT,CAAlC;AACA,QAAM,CAACC,kBAAD,EAAqBC,qBAArB,IAA8C,qBAAS,IAAT,CAApD;;AAEAC,iBAAMC,SAAN,CAAgB,MAAM;AACpBN,IAAAA,SAAS,CAACJ,SAAS,EAAV,CAAT;AACA,WAAO,MAAM;AACXD,MAAAA,WAAW,CAACE,OAAZ,GAAsB,IAAtB;AACD,KAFD;AAGD,GALD,EAKG,CAACV,MAAD,aAACA,MAAD,uBAACA,MAAM,CAAEW,GAAT,EAAcV,GAAd,EAAmBQ,SAAnB,CALH;;AAOA,QAAMW,gBAAgB,GAAG,wBACtBC,KAAD,IAAgB;AACdvB,IAAAA,KAAK,CAACwB,OAAN,IAAiBxB,KAAK,CAACwB,OAAN,CAAcD,KAAd,CAAjB;AACAE,IAAAA,OAAO,CAACC,IAAR,CAAaH,KAAK,CAACI,WAAN,CAAkBC,KAA/B;;AACA,QACE,CAACrB,cAAD,IACAD,cADA,IAEAA,cAAc,KAAKQ,cAFnB,IAGAI,kBAJF,EAKE;AACAC,MAAAA,qBAAqB,CAAC,KAAD,CAArB;AACAJ,MAAAA,SAAS,CAACT,cAAD,CAAT;AACD,KARD,MAQO;AACLW,MAAAA,YAAY,CAAC,IAAD,CAAZ;AACD;AACF,GAfsB,EAgBvB,CACEX,cADF,EAEEY,kBAFF,EAGEX,cAHF,EAIEP,KAJF,EAKEc,cALF,CAhBuB,CAAzB,CAlC2C,CA0D3C;;AACA,MAAI,kDAAsBd,KAAtB,CAAJ,EAAkC;AAChC,WAAO,IAAP;AACD;;AACD,MAAI,CAACK,GAAL,EAAU;AACRoB,IAAAA,OAAO,CAACC,IAAR,CAAa,yCAAb;AACD;;AAED,MAAIV,SAAJ,EAAe;AACb,QAAIZ,eAAJ,EAAqB;AACnB,wBAAIgB,eAAMS,cAAN,CAAqBzB,eAArB,CAAJ,EAA2C;AACzC,eAAOA,eAAP;AACD;AACF,KAJD,MAIO,oBAAO,6BAAC,aAAD,EAAUI,IAAV,EAAiBH,GAAjB,CAAP;AACR;;AACD,sBACE,6BAAC,WAAD;AACE,IAAA,MAAM,EAAES,cADV;AAEE,IAAA,kBAAkB,EAAET,GAFtB;AAGE,IAAA,GAAG,EAAEA;AAHP,KAIMI,aAJN;AAKE,IAAA,OAAO,EAAEa,gBALX;AAME,IAAA,GAAG,EAAErB;AANP,KADF;AAUD,CAnFD,CADY,CAAd;AA4FA,MAAM6B,gBAA6C,GAAG,EACpD,GAAG/B,KADiD;AAEpD;AACAgC,EAAAA,OAAO,EAAEjC,mBAAQiC,OAHmC;AAIpDC,EAAAA,QAAQ,EAAElC,mBAAQkC,QAJkC;AAKpDC,EAAAA,UAAU,EAAEnC,mBAAQmC;AALgC,CAAtD;eAQeH,gB","sourcesContent":["import React, { useState, memo, forwardRef, useCallback, useRef } from 'react';\nimport { Image as RNImage } from 'react-native';\nimport Text from '../Text';\nimport { usePropsResolution } from '../../../hooks/useThemeProps';\nimport type { IImageProps } from './types';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\nimport { makeStyledComponent } from '../../../utils/styled';\n\nconst StyledImage = makeStyledComponent(RNImage);\n\nconst Image = memo(\n  forwardRef((props: IImageProps, ref: any) => {\n    const {\n      source,\n      src,\n      fallbackElement,\n      alt,\n      fallbackSource,\n      ignoreFallback,\n      _alt,\n      ...resolvedProps\n    } = usePropsResolution('Image', props);\n\n    const finalSource: any = useRef(null);\n    const getSource = useCallback(() => {\n      if (source) {\n        finalSource.current = source;\n      } else if (src) {\n        finalSource.current = { uri: src };\n      }\n      return finalSource.current;\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [source?.uri, src]);\n\n    const [renderedSource, setSource] = useState(getSource());\n    const [alternate, setAlternate] = useState(false);\n    const [fallbackSourceFlag, setfallbackSourceFlag] = useState(true);\n\n    React.useEffect(() => {\n      setSource(getSource());\n      return () => {\n        finalSource.current = null;\n      };\n    }, [source?.uri, src, getSource]);\n\n    const onImageLoadError = useCallback(\n      (event: any) => {\n        props.onError && props.onError(event);\n        console.warn(event.nativeEvent.error);\n        if (\n          !ignoreFallback &&\n          fallbackSource &&\n          fallbackSource !== renderedSource &&\n          fallbackSourceFlag\n        ) {\n          setfallbackSourceFlag(false);\n          setSource(fallbackSource);\n        } else {\n          setAlternate(true);\n        }\n      },\n      [\n        fallbackSource,\n        fallbackSourceFlag,\n        ignoreFallback,\n        props,\n        renderedSource,\n      ]\n    );\n    //TODO: refactor for responsive prop\n    if (useHasResponsiveProps(props)) {\n      return null;\n    }\n    if (!alt) {\n      console.warn('Please pass alt prop to Image component');\n    }\n\n    if (alternate) {\n      if (fallbackElement) {\n        if (React.isValidElement(fallbackElement)) {\n          return fallbackElement;\n        }\n      } else return <Text {..._alt}>{alt}</Text>;\n    }\n    return (\n      <StyledImage\n        source={renderedSource}\n        accessibilityLabel={alt}\n        alt={alt}\n        {...resolvedProps}\n        onError={onImageLoadError}\n        ref={ref}\n      />\n    );\n  })\n);\n\ninterface ImageStatics {\n  getSize: typeof RNImage.prefetch;\n  prefetch: typeof RNImage.prefetch;\n  queryCache: typeof RNImage.queryCache;\n}\nconst ImageWithStatics: typeof Image & ImageStatics = {\n  ...Image,\n  //@ts-ignore\n  getSize: RNImage.getSize,\n  prefetch: RNImage.prefetch,\n  queryCache: RNImage.queryCache,\n};\n\nexport default ImageWithStatics;\nexport type { IImageProps };\n"]}