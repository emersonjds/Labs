{"version":3,"sources":["index.tsx"],"names":["ZStack","children","reversed","props","ref","resolvedProps"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;;;;;;;;;AAWA,MAAMA,MAAM,GAAG,CAAC;AAAEC,EAAAA,QAAF;AAAYC,EAAAA,QAAZ;AAAsB,KAAGC;AAAzB,CAAD,EAAiDC,GAAjD,KAA+D;AAC5E,QAAMC,aAAa,GAAG,uCAAmB,QAAnB,EAA6BF,KAA7B,CAAtB,CAD4E,CAE5E;;AACA,MAAI,kDAAsBA,KAAtB,CAAJ,EAAkC;AAChC,WAAO,IAAP;AACD;;AACD,sBACE,6BAAC,YAAD,eAASE,aAAT;AAAwB,IAAA,GAAG,EAAED;AAA7B,MACG,gCAAoBH,QAApB,EAA8BC,QAA9B,CADH,CADF;AAKD,CAXD;;4BAae,+BAAK,uBAAWF,MAAX,CAAL,C","sourcesContent":["import React, { memo, forwardRef } from 'react';\nimport { default as Box, InterfaceBoxProps } from '../Box';\nimport { getAbsoluteChildren } from '../../../utils';\nimport { usePropsResolution } from '../../../hooks/useThemeProps';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\nimport type { CustomProps } from '../../../components/types';\n\nexport interface InterfaceZStackProps extends InterfaceBoxProps<IZStackProps> {\n  /**\n   * The direction to stack the elements.\n   */\n  reversed?: boolean;\n}\n\nexport type IZStackProps = InterfaceZStackProps & CustomProps<'ZStack'>;\nconst ZStack = ({ children, reversed, ...props }: IZStackProps, ref?: any) => {\n  const resolvedProps = usePropsResolution('ZStack', props);\n  //TODO: refactor for responsive prop\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n  return (\n    <Box {...resolvedProps} ref={ref}>\n      {getAbsoluteChildren(children, reversed)}\n    </Box>\n  );\n};\n\nexport default memo(forwardRef(ZStack));\n"]}