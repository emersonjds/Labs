{"version":3,"sources":["useTypeahead.ts"],"names":["isControlledProp","props","key","undefined","useTypeahead","defaultValues","dropdownDefaultStateValues","isOpen","state","dispatch","React","useReducer","useTypeaheadReducer","dispatchWithProps","object","inputValue","items","onInputValueChange","onSelectedItemChange","selectedItem","itemToString","isControlled","type","stateChangeTypes","ControlledPropUpdatedSelectedItem","onChangeText","text","InputChange","handleItemSelect","item","index","ItemClick","Keyboard","dismiss","getMenuItemProps","onPress","accessible","accessiblityRole","getMenuProps","accessibilityRole","accessibilityHint","length","getToggleButtonProps","ToggleButtonClick","getInputProps","propInputVal","propOnchangeText","value","accessibilityLabel","accessibilityState","expanded"],"mappings":"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","sourcesContent":["import { useTypeaheadReducer } from './reducer';\nimport React, { useEffect } from 'react';\nimport * as stateChangeTypes from './types';\nimport type { AccessibilityRole } from 'react-native';\nimport { Keyboard } from 'react-native';\nimport { dropdownDefaultStateValues, getDefaultValue } from './utils';\n\nfunction isControlledProp(props: any, key: string) {\n  return props[key] !== undefined;\n}\n\nimport type { IUseTypeaheadProps } from './types';\n\nexport function useTypeahead(props: IUseTypeaheadProps) {\n  let defaultValues = { ...dropdownDefaultStateValues };\n  defaultValues.isOpen = getDefaultValue(props, 'isOpen');\n\n  const [state, dispatch] = React.useReducer(\n    useTypeaheadReducer,\n    defaultValues\n  );\n\n  const dispatchWithProps = (object: any) => {\n    dispatch({ ...object, props });\n  };\n\n  const { inputValue, isOpen } = state;\n\n  const {\n    items,\n    onInputValueChange,\n    onSelectedItemChange,\n    selectedItem,\n    itemToString,\n  } = props;\n\n  const isControlled = isControlledProp(props, 'selectedItem');\n\n  useEffect(() => {\n    if (isControlled) {\n      dispatch({\n        type: stateChangeTypes.ControlledPropUpdatedSelectedItem,\n        inputValue: itemToString(selectedItem),\n      });\n    }\n  }, [selectedItem, isControlled, itemToString]);\n\n  const onChangeText = (text: string) => {\n    onInputValueChange?.({ inputValue: text });\n    dispatchWithProps({ type: stateChangeTypes.InputChange, inputValue: text });\n  };\n\n  const handleItemSelect = (item: any, index: number) => {\n    onSelectedItemChange?.(item);\n    dispatchWithProps({ type: stateChangeTypes.ItemClick, index });\n    Keyboard.dismiss();\n  };\n\n  const getMenuItemProps = (item: any, index: number) => {\n    return {\n      onPress: () => handleItemSelect(item, index),\n      accessible: true,\n      accessiblityRole: 'menuitem' as AccessibilityRole,\n    };\n  };\n\n  const getMenuProps = () => {\n    return {\n      accessible: true,\n      accessibilityRole: 'menu' as AccessibilityRole,\n      accessibilityHint: `Showing ${items.length} records`,\n    };\n  };\n\n  const getToggleButtonProps = () => {\n    return {\n      onPress: () => {\n        dispatchWithProps({ type: stateChangeTypes.ToggleButtonClick });\n      },\n    };\n  };\n\n  const getInputProps = (propInputVal?: any, propOnchangeText?: any) => {\n    return {\n      onChangeText: propInputVal ? propOnchangeText : onChangeText,\n      value: propInputVal ? propInputVal : inputValue,\n      accessibilityRole: 'combobox' as AccessibilityRole,\n      accessibilityLabel: 'Typeahead input',\n      accessibilityState: {\n        expanded: isOpen,\n      },\n    };\n  };\n\n  return {\n    getInputProps,\n    getMenuItemProps,\n    getMenuProps,\n    getToggleButtonProps,\n    isOpen,\n  };\n}\n"]}