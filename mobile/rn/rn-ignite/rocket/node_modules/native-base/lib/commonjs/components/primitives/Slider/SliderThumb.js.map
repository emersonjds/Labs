{"version":3,"sources":["SliderThumb.tsx"],"names":["SliderThumb","props","ref","isPressed","setIsPressed","React","useState","isFocused","setIsFocused","handleFocus","focusState","callback","_ref","useRef","isHovered","state","trackLayout","orientation","colorScheme","thumbSize","isReadOnly","isDisabled","_interactionBox","interactionBoxContext","useContext","SliderContext","onFocus","onBlur","_stack","resolvedProps","size","inputRef","thumbProps","inputProps","index","useEffect","isThumbDragging","thumbAbsoluteSize","thumbStyles","bottom","getThumbPercent","undefined","left","transform","translateY","parseInt","translateX","push","scale","scaleOnPressed","layoutProps","nonLayoutProps","stylingProps","margin","layout","flexbox","position","outline","accessibilityProps","nonAccessibilityProps","style","e","children","Platform","OS","displayName"],"mappings":"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","sourcesContent":["import React, { forwardRef } from 'react';\nimport { Platform } from 'react-native';\nimport { useSliderThumb } from '@react-native-aria/slider';\nimport { VisuallyHidden } from '@react-aria/visually-hidden';\nimport { useToken } from '../../../hooks';\nimport { usePropsResolution } from '../../../hooks/useThemeProps';\nimport type { ISliderThumbProps } from './types';\nimport Box from '../Box';\nimport { SliderContext } from './Context';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\nimport { useHover } from '@react-native-aria/interactions';\nimport { mergeRefs } from '../../../utils';\nimport { extractInObject, stylingProps } from '../../../theme/tools/utils';\nimport { Stack } from '../Stack';\nimport { Center } from '../../composites/Center';\n\nfunction SliderThumb(props: ISliderThumbProps, ref: any) {\n  const [isPressed, setIsPressed] = React.useState(false);\n\n  const [isFocused, setIsFocused] = React.useState(false);\n  const handleFocus = (focusState: boolean, callback: any) => {\n    setIsFocused(focusState);\n    callback();\n  };\n\n  const _ref = React.useRef(null);\n  const { isHovered } = useHover({}, _ref);\n\n  const {\n    state,\n    trackLayout,\n    orientation,\n    colorScheme,\n    thumbSize,\n    isReadOnly,\n    isDisabled,\n    _interactionBox: interactionBoxContext,\n  } = React.useContext(SliderContext);\n  const {\n    onFocus,\n    onBlur,\n    _stack,\n    _interactionBox,\n    ...resolvedProps\n  } = usePropsResolution(\n    'SliderThumb',\n    {\n      size: thumbSize,\n      _interactionBox: interactionBoxContext,\n      colorScheme,\n      ...props,\n    },\n    {\n      isDisabled,\n      isReadOnly,\n      isPressed,\n      isFocused,\n      isHovered,\n    }\n  );\n\n  const inputRef = React.useRef(null);\n  const { thumbProps, inputProps } = useSliderThumb(\n    {\n      index: 0,\n      trackLayout,\n      inputRef,\n      orientation,\n    },\n    state\n  );\n\n  React.useEffect(() => {\n    setIsPressed(state.isThumbDragging(0));\n  }, [state]);\n\n  const thumbAbsoluteSize = useToken('sizes', resolvedProps.size);\n\n  const thumbStyles: any = {\n    bottom:\n      orientation === 'vertical'\n        ? `${state.getThumbPercent(0) * 100}%`\n        : undefined,\n    left:\n      orientation !== 'vertical'\n        ? `${state.getThumbPercent(0) * 100}%`\n        : undefined,\n    transform:\n      orientation === 'vertical'\n        ? [{ translateY: parseInt(thumbAbsoluteSize) / 2 }]\n        : [{ translateX: -parseInt(thumbAbsoluteSize) / 2 }],\n  };\n\n  thumbStyles.transform.push({\n    scale: state.isThumbDragging(0) ? resolvedProps.scaleOnPressed : 1,\n  });\n\n  const [layoutProps, nonLayoutProps] = extractInObject(resolvedProps, [\n    ...stylingProps.margin,\n    ...stylingProps.layout,\n    ...stylingProps.flexbox,\n    ...stylingProps.position,\n    ...stylingProps.outline,\n  ]);\n\n  const [\n    accessibilityProps,\n    nonAccessibilityProps,\n  ] = extractInObject(nonLayoutProps, [\n    'accessibilityRole',\n    'accessibilityState',\n  ]);\n\n  //TODO: refactor for responsive prop\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n\n  return (\n    <Box\n      position=\"absolute\"\n      {...thumbProps}\n      {...resolvedProps}\n      {...accessibilityProps}\n      {...layoutProps}\n      style={[thumbStyles, resolvedProps.style]}\n      onFocus={(e: any) => {\n        handleFocus(true, onFocus ? () => onFocus(e) : () => {});\n      }}\n      onBlur={(e: any) => {\n        handleFocus(false, onBlur ? () => onBlur(e) : () => {});\n      }}\n      // {...(isReadOnly && _readOnly)}\n      // {...(isDisabled && _disabled)}\n      ref={mergeRefs([_ref, ref])}\n    >\n      <Stack {..._stack}>\n        <Box {..._interactionBox} />\n        <Center {...nonAccessibilityProps}>\n          {props.children}\n          {Platform.OS === 'web' && (\n            <VisuallyHidden>\n              <input ref={inputRef} {...inputProps} />\n            </VisuallyHidden>\n          )}\n        </Center>\n      </Stack>\n    </Box>\n  );\n}\n\nSliderThumb.displayName = 'SliderThumb';\n\nexport default forwardRef(SliderThumb);\n"]}