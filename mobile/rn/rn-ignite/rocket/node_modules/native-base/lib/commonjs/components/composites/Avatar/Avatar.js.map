{"version":3,"sources":["Avatar.tsx"],"names":["Avatar","children","props","ref","error","setError","React","useState","_image","_badgeSize","source","resolvedProps","Badge","remainingChildren","Children","map","child","type","displayName","cloneElement","size","undefined","push","getSource","uri","imageSource","length"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AAEA;;AACA;;AACA;;;;;;;;;;AAEA,MAAMA,MAAM,GAAG,CAAC;AAAEC,EAAAA,QAAF;AAAY,KAAGC;AAAf,CAAD,EAAuCC,GAAvC,KAAoD;AACjE,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBC,eAAMC,QAAN,CAAe,KAAf,CAA1B;;AACA,QAAM;AAAEC,IAAAA,MAAF;AAAUC,IAAAA,UAAV;AAAsBC,IAAAA,MAAtB;AAA8B,OAAGC;AAAjC,MAAmD,uCACvD,QADuD,EAEvDT,KAFuD,CAAzD;;AAKA,MAAIU,KAAK,gBAAG,2DAAZ;;AACA,QAAMC,iBAAgC,GAAG,EAAzC,CARiE,CASjE;;AACAP,iBAAMQ,QAAN,CAAeC,GAAf,CAAmBd,QAAnB,EAA8Be,KAAD,IAAW;AACtC,QACE,QAAOA,KAAP,aAAOA,KAAP,uBAAOA,KAAK,CAAEC,IAAd,MAAuB,QAAvB,IACA,CAAAD,KAAK,SAAL,IAAAA,KAAK,WAAL,YAAAA,KAAK,CAAEC,IAAP,CAAYC,WAAZ,MAA4B,aAF9B,EAGE;AAAA;;AACAN,MAAAA,KAAK,gBAAGN,eAAMa,YAAN,CAAmBH,KAAnB,EAA0B;AAChCI,QAAAA,IAAI,EAAEJ,KAAK,SAAL,IAAAA,KAAK,WAAL,oBAAAA,KAAK,CAAEd,KAAP,sDAAckB,IAAd,GACFJ,KADE,aACFA,KADE,wCACFA,KAAK,CAAEd,KADL,kDACF,cAAckB,IADZ,GAEFX,UAAU,GACVA,UAAU,CAAC,CAAD,CADA,GAEVY;AAL4B,OAA1B,CAAR;AAOD,KAXD,MAWO;AACLR,MAAAA,iBAAiB,CAACS,IAAlB,CAAuBN,KAAvB;AACD;AACF,GAfD,EAViE,CA2BjE;;;AACA,MAAI,kDAAsBd,KAAtB,CAAJ,EAAkC;AAChC,WAAO,IAAP;AACD;;AAED,QAAMqB,SAAS,GAAG,MAAM;AACtB,QAAIb,MAAJ,EAAY;AACV,UAAI,sBAAIA,MAAJ,EAAY,KAAZ,KAAsB,CAAC,qBAAMA,MAAM,CAACc,GAAb,CAA3B,EAA8C;AAC5C,eAAOd,MAAP;AACD,OAFD,MAEO,IAAI,CAAC,sBAAIA,MAAJ,EAAY,KAAZ,CAAL,EAAyB;AAC9B,eAAOA,MAAP;AACD;AACF;;AACD,WAAO,IAAP;AACD,GATD;;AAUA,QAAMe,WAAW,GAAGF,SAAS,EAA7B;AAEA,sBACE,6BAAC,eAAD,EAASZ,aAAT,EACGc,WAAW,IAAI,CAACrB,KAAhB,gBACC,6BAAC,iBAAD;AACE,IAAA,MAAM,EAAEM,MADV;AAEE,IAAA,OAAO,EAAE,MAAM;AACbL,MAAAA,QAAQ,CAAC,IAAD,CAAR;AACD;AAJH,KAKMG,MALN;AAME,IAAA,GAAG,EAAEL;AANP,KADD,GAUCU,iBAAiB,CAACa,MAAlB,KAA6B,CAA7B,IAAkCb,iBAXtC,EAaGD,KAbH,CADF;AAiBD,CA7DD;;4BA+De,+BAAK,uBAAWZ,MAAX,CAAL,C","sourcesContent":["import React, { memo, forwardRef } from 'react';\nimport { Box, Image } from '../../primitives';\nimport { usePropsResolution } from '../../../hooks/useThemeProps';\nimport type { IAvatarProps } from './types';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\nimport isNil from 'lodash.isnil';\nimport has from 'lodash.has';\n\nconst Avatar = ({ children, ...props }: IAvatarProps, ref: any) => {\n  const [error, setError] = React.useState(false);\n  const { _image, _badgeSize, source, ...resolvedProps } = usePropsResolution(\n    'Avatar',\n    props\n  );\n\n  let Badge = <></>;\n  const remainingChildren: JSX.Element[] = [];\n  //  Pop Badge from children\n  React.Children.map(children, (child) => {\n    if (\n      typeof child?.type === 'object' &&\n      child?.type.displayName === 'AvatarBadge'\n    ) {\n      Badge = React.cloneElement(child, {\n        size: child?.props?.size\n          ? child?.props?.size\n          : _badgeSize\n          ? _badgeSize[0]\n          : undefined,\n      });\n    } else {\n      remainingChildren.push(child);\n    }\n  });\n\n  //TODO: refactor for responsive prop\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n\n  const getSource = () => {\n    if (source) {\n      if (has(source, 'uri') && !isNil(source.uri)) {\n        return source;\n      } else if (!has(source, 'uri')) {\n        return source;\n      }\n    }\n    return null;\n  };\n  const imageSource = getSource();\n\n  return (\n    <Box {...resolvedProps}>\n      {imageSource && !error ? (\n        <Image\n          source={source}\n          onError={() => {\n            setError(true);\n          }}\n          {..._image}\n          ref={ref}\n        />\n      ) : (\n        remainingChildren.length !== 0 && remainingChildren\n      )}\n      {Badge}\n    </Box>\n  );\n};\n\nexport default memo(forwardRef(Avatar));\n"]}