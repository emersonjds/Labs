{"version":3,"sources":["NumberInput.tsx"],"names":["NumberInput","children","props","ref","defaultValue","keepWithinRange","value","min","max","onChange","newProps","formControlContext","numberInputValue","setNumberInputValue","React","useState","parseInt","numberInputStepper","setNumberInputStepper","handleChange","newValue","temp","handleChangeWithoutCheck","useEffect","undefined","isControlled","memo","forwardRef"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AAEA;;AACA;;AACA;;;;AAEA,MAAMA,WAAW,GAAG,CAAC;AAAEC,EAAAA,QAAF;AAAY,KAAGC;AAAf,CAAD,EAA4CC,GAA5C,KAA0D;AAC5E,QAAM;AACJC,IAAAA,YADI;AAEJC,IAAAA,eAFI;AAGJC,IAAAA,KAHI;AAIJC,IAAAA,GAJI;AAKJC,IAAAA,GALI;AAMJC,IAAAA,QANI;AAOJ,OAAGC;AAPC,MAQF,0BAAc,aAAd,EAA6BR,KAA7B,CARJ;AASA,QAAMS,kBAAkB,GAAG,yCAA3B;;AAEA,QAAM,CAACC,gBAAD,EAAmBC,mBAAnB,IAA0CC,eAAMC,QAAN,CAC9CC,QAAQ,CAACV,KAAK,IAAIF,YAAV,EAAwB,EAAxB,CADsC,CAAhD;;AAGA,QAAM,CAACa,kBAAD,EAAqBC,qBAArB,IAA8CJ,eAAMC,QAAN,CAAe,IAAf,CAApD;;AACA,QAAMI,YAAY,GAAIC,QAAD,IAAsB;AACzC,UAAMC,IAAI,GAAGD,QAAb;AACAP,IAAAA,mBAAmB,CAACQ,IAAD,CAAnB;;AACA,QAAIhB,eAAJ,EAAqB;AACnB,UAAIe,QAAQ,GAAGb,GAAf,EAAoBM,mBAAmB,CAACN,GAAD,CAAnB,CAApB,KACK,IAAIa,QAAQ,GAAGZ,GAAf,EAAoBK,mBAAmB,CAACL,GAAD,CAAnB;AAC1B,KANwC,CAOzC;;;AACAC,IAAAA,QAAQ,IAAIA,QAAQ,CAACY,IAAD,CAApB;AACD,GATD;;AAUA,QAAMC,wBAAwB,GAAIF,QAAD,IAAsB;AACrD,UAAMC,IAAI,GAAGD,QAAb;AACAP,IAAAA,mBAAmB,CAACQ,IAAD,CAAnB;AACD,GAHD;;AAKAP,iBAAMS,SAAN,CAAgB,MAAM;AACpB,QAAIjB,KAAK,KAAKkB,SAAV,IAAuBlB,KAAK,IAAIM,gBAApC,EACEC,mBAAmB,CAACP,KAAD,CAAnB;AACH,GAHD,EAGG,CAACA,KAAD,EAAQM,gBAAR,EAA0BC,mBAA1B,CAHH,EA/B4E,CAmC5E;;;AACA,MAAI,kDAAsBX,KAAtB,CAAJ,EAAkC;AAChC,WAAO,IAAP;AACD;;AACD,sBACE,6BAAC,YAAD;AAAK,IAAA,GAAG,EAAEC;AAAV,kBACE,6BAAC,2BAAD,CAAoB,QAApB;AACE,IAAA,KAAK,EAAE,EACL,GAAGQ,kBADE;AAEL,SAAGD,QAFE;AAGLH,MAAAA,GAHK;AAILC,MAAAA,GAJK;AAKLW,MAAAA,YALK;AAMLG,MAAAA,wBANK;AAOLV,MAAAA,gBAPK;AAQLK,MAAAA,kBARK;AASLC,MAAAA,qBATK;AAULO,MAAAA,YAAY,EAAEnB,KAAK,KAAKkB;AAVnB;AADT,KAcGvB,QAdH,CADF,CADF;AAoBD,CA3DD;;4BA6Dea,eAAMY,IAAN,eAAWZ,eAAMa,UAAN,CAAiB3B,WAAjB,CAAX,C","sourcesContent":["import React from 'react';\nimport { useThemeProps } from '../../../hooks';\nimport { useFormControlContext } from '../FormControl';\nimport type { INumberInputProps } from './types';\nimport { NumberInputContext } from './Context';\nimport Box from '../../primitives/Box';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\n\nconst NumberInput = ({ children, ...props }: INumberInputProps, ref?: any) => {\n  const {\n    defaultValue,\n    keepWithinRange,\n    value,\n    min,\n    max,\n    onChange,\n    ...newProps\n  } = useThemeProps('NumberInput', props);\n  const formControlContext = useFormControlContext();\n\n  const [numberInputValue, setNumberInputValue] = React.useState(\n    parseInt(value || defaultValue, 10)\n  );\n  const [numberInputStepper, setNumberInputStepper] = React.useState(null);\n  const handleChange = (newValue: number) => {\n    const temp = newValue;\n    setNumberInputValue(temp);\n    if (keepWithinRange) {\n      if (newValue < min) setNumberInputValue(min);\n      else if (newValue > max) setNumberInputValue(max);\n    }\n    //NOTE: only calling onChange on stepper click or blur event of input.\n    onChange && onChange(temp);\n  };\n  const handleChangeWithoutCheck = (newValue: number) => {\n    const temp = newValue;\n    setNumberInputValue(temp);\n  };\n\n  React.useEffect(() => {\n    if (value !== undefined && value != numberInputValue)\n      setNumberInputValue(value);\n  }, [value, numberInputValue, setNumberInputValue]);\n  //TODO: refactor for responsive prop\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n  return (\n    <Box ref={ref}>\n      <NumberInputContext.Provider\n        value={{\n          ...formControlContext,\n          ...newProps,\n          min,\n          max,\n          handleChange,\n          handleChangeWithoutCheck,\n          numberInputValue,\n          numberInputStepper,\n          setNumberInputStepper,\n          isControlled: value !== undefined,\n        }}\n      >\n        {children}\n      </NumberInputContext.Provider>\n    </Box>\n  );\n};\n\nexport default React.memo(React.forwardRef(NumberInput));\n"]}