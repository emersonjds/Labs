{"version":3,"sources":["input.ts"],"names":["getSelectionColor","props","Platform","OS","baseStyle","selectionColor","fontFamily","p","borderRadius","overflow","color","placeholderTextColor","borderColor","_disabled","opacity","bg","_web","disabled","cursor","_invalid","_focus","outlineWidth","lineHeight","outline","_stack","flexDirection","alignItems","_input","flex","roundedStyle","borderWidth","_hover","outlineStyle","filledStyle","unstyledStyle","underlinedStyle","borderTopWidth","borderLeftWidth","borderRightWidth","borderBottomWidth","variants","underlined","rounded","filled","unstyled","sizes","fontSize","defaultProps","size","variant","Input"],"mappings":"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","sourcesContent":["import { mode } from '../tools';\nimport { Platform } from 'react-native';\n\nfunction getSelectionColor(props: Record<string, any>) {\n  if (Platform.OS === 'ios') {\n    return mode('coolGray.800', 'warmGray.50')(props);\n  } else if (Platform.OS === 'android') {\n    return mode('coolGray.800', 'warmGray.50')(props);\n  }\n}\n\nconst baseStyle = (props: Record<string, any>) => {\n  // const { primary } = props.theme.colors;\n  // Todo: Resolve boxShadow Color or Provide some alternatiove prop for user to change focusRing color\n  // // Todo: Update to support similar focusRing on iOS , Android and Web\n  // const focusRing =\n  //   Platform.OS === 'web'\n  //     ? {\n  //         boxShadow:\n  //           props.variant !== 'underlined'\n  //             ? `${primary[400]} 0px 0px 0px 1px`\n  //             : `${primary[400]} 0px 1px 0px 0px`,\n  //         zIndex: 1,\n  //       }\n  //     : {\n  //         // boxShadow: `${useToken('colors', ['primary.400'])} 0px 0px 0px 1px`,\n  //       };\n\n  return {\n    selectionColor: getSelectionColor(props),\n    fontFamily: 'body',\n    p: '2',\n    borderRadius: 'sm',\n    overflow: 'hidden',\n    color: mode('coolGray.800', 'warmGray.50')(props),\n    placeholderTextColor: 'muted.400',\n    borderColor: mode('muted.200', 'gray.500')(props),\n    _disabled: {\n      opacity: '80',\n      bg: mode('muted.100', 'muted.700')(props),\n      _web: {\n        disabled: true,\n        cursor: 'not-allowed',\n      },\n    },\n    _invalid: {\n      borderColor: mode('danger.600', 'danger.300')(props),\n    },\n    _focus: {\n      borderColor: mode('primary.400', 'primary.500')(props),\n    },\n    _web: {\n      outlineWidth: '0',\n      overflow: 'auto',\n      lineHeight: 'lg', // Todo: Move to _web inside size so that sm and xs don't have this much height\n      outline: 'none',\n      cursor: 'auto',\n    },\n    _stack: {\n      flexDirection: 'row',\n      alignItems: 'center',\n      // justifyContent: 'space-between',\n      overflow: 'hidden',\n    },\n    _input: {\n      bg: 'transparent',\n      flex: 1,\n    },\n  };\n};\n\nfunction roundedStyle(props: Record<string, any>) {\n  return {\n    borderRadius: '25',\n    borderWidth: '1',\n    _hover: {\n      bg: mode('gray.100', 'gray.700')(props),\n    },\n  };\n}\nfunction outlineStyle(props: Record<string, any>) {\n  return {\n    borderWidth: '1',\n    _hover: {\n      bg: mode('gray.100', 'gray.700')(props),\n    },\n  };\n}\nfunction filledStyle(props: Record<string, any>) {\n  return {\n    bg: props.bg || mode('muted.200', 'muted.600')(props),\n    borderWidth: '1',\n    borderColor: 'transparent',\n    _hover: {\n      bg: mode('muted.300', 'muted.700')(props),\n    },\n  };\n}\nfunction unstyledStyle() {\n  return {\n    borderWidth: '0',\n  };\n}\nfunction underlinedStyle() {\n  return {\n    borderRadius: '0',\n    borderTopWidth: '0',\n    borderLeftWidth: '0',\n    borderRightWidth: '0',\n    borderBottomWidth: '1',\n  };\n}\n\nconst variants = {\n  outline: outlineStyle,\n  underlined: underlinedStyle,\n  rounded: roundedStyle,\n  filled: filledStyle,\n  unstyled: unstyledStyle,\n};\n\nconst sizes = {\n  '2xl': { fontSize: 'xl' },\n  'xl': { fontSize: 'lg' },\n  'lg': { fontSize: 'md' },\n  'md': { fontSize: 'sm' },\n  'sm': { fontSize: 'xs' },\n  'xs': { fontSize: '2xs' },\n};\n\nconst defaultProps = {\n  size: 'sm',\n  variant: 'outline',\n};\n\n// Input\nexport const Input = {\n  baseStyle,\n  defaultProps,\n  variants,\n  sizes,\n};\n\nexport default {};\n"]}