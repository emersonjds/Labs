{"version":3,"sources":["MenuItemOption.tsx"],"names":["MenuItemOption","value","props","ref","values","onChange","type","MenuOptionContext","isChecked","includes","menuOptionProps","children","onPress","_icon","_stack","_text","resolvedProps","modifiedOnPress","e"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AAEA;;AACA;;AACA;;AACA;;;;;;;;;;AAEA,MAAMA,cAAc,GAAG,CACrB;AAAEC,EAAAA,KAAF;AAAS,KAAGC;AAAZ,CADqB,EAErBC,GAFqB,KAGlB;AACH,QAAM;AAAEC,IAAAA,MAAF;AAAUC,IAAAA,QAAV;AAAoBC,IAAAA;AAApB,MAAsD,uBAC1DC,kCAD0D,CAA5D;AAGA,QAAMC,SAAS,GAAGJ,MAAM,CAACK,QAAP,CAAgBR,KAAhB,CAAlB;AACA,QAAMS,eAAe,GAAG,gCAAkB;AAAEF,IAAAA,SAAF;AAAaF,IAAAA;AAAb,GAAlB,CAAxB;AACA,QAAM;AACJK,IAAAA,QADI;AAEJC,IAAAA,OAFI;AAGJC,IAAAA,KAHI;AAIJC,IAAAA,MAJI;AAKJC,IAAAA,KALI;AAMJ,OAAGC;AANC,MAOF,uCAAmB,UAAnB,EAA+Bd,KAA/B,EAAsC;AAAEM,IAAAA;AAAF,GAAtC,CAPJ;;AASA,QAAMS,eAAe,GAAIC,CAAD,IAAY;AAClCb,IAAAA,QAAQ,CAACJ,KAAD,CAAR;AACAW,IAAAA,OAAO,IAAIA,OAAO,CAACM,CAAD,CAAlB;AACD,GAHD,CAfG,CAoBH;;;AACA,MAAI,kDAAsBhB,KAAtB,CAAJ,EAAkC;AAChC,WAAO,IAAP;AACD;;AACD,sBACE,6BAAC,iBAAD,eACMc,aADN,EAEMN,eAFN;AAGE,IAAA,iBAAiB,EAAC,QAHpB;AAIE,IAAA,OAAO,EAAEO,eAJX;AAKE,IAAA,GAAG,EAAEd;AALP,mBAOE,6BAAC,aAAD,EAAYW,MAAZ,eACE,6BAAC,gBAAD,EAAeD,KAAf,CADF,eAEE,6BAAC,YAAD;AAAK,IAAA,KAAK,EAAEE;AAAZ,KAAoBJ,QAApB,CAFF,CAPF,CADF;AAcD,CAzCD;;4BA2Ce,+BAAK,uBAAWX,cAAX,CAAL,C","sourcesContent":["import React, { forwardRef, memo, useContext } from 'react';\nimport { CheckIcon } from '../../primitives/Icon/Icons';\nimport Box from '../../primitives/Box';\nimport { usePropsResolution } from '../../../hooks/useThemeProps';\nimport MenuItem from './MenuItem';\nimport type { IMenuItemOptionProps, IMenuOptionContextProps } from './types';\nimport { MenuOptionContext } from './MenuOptionGroup';\nimport { useMenuOptionItem } from './useMenu';\nimport { HStack } from '../../primitives/Stack';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\n\nconst MenuItemOption = (\n  { value, ...props }: IMenuItemOptionProps,\n  ref: any\n) => {\n  const { values, onChange, type }: IMenuOptionContextProps = useContext(\n    MenuOptionContext\n  );\n  const isChecked = values.includes(value);\n  const menuOptionProps = useMenuOptionItem({ isChecked, type });\n  const {\n    children,\n    onPress,\n    _icon,\n    _stack,\n    _text,\n    ...resolvedProps\n  } = usePropsResolution('MenuItem', props, { isChecked });\n\n  const modifiedOnPress = (e: any) => {\n    onChange(value);\n    onPress && onPress(e);\n  };\n\n  //TODO: refactor for responsive prop\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n  return (\n    <MenuItem\n      {...resolvedProps}\n      {...menuOptionProps}\n      accessibilityRole=\"button\"\n      onPress={modifiedOnPress}\n      ref={ref}\n    >\n      <HStack {..._stack}>\n        <CheckIcon {..._icon} />\n        <Box _text={_text}>{children}</Box>\n      </HStack>\n    </MenuItem>\n  );\n};\n\nexport default memo(forwardRef(MenuItemOption));\n"]}