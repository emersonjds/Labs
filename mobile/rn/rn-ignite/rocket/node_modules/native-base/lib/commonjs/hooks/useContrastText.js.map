{"version":3,"sources":["useContrastText.ts"],"names":["useContrastText","bg","color","contrastThreshold","trueDarkText","trueLightText","trueBg","trueColor","suppressColorAccessibilityWarning","config","accessibleColors","disableContrastText","bgThemeColorVariant","bgShade","split","textColor","themeColorsThresholdShades","getContrastThemeColor","getAccessibleContrastColor","shadeThreshold","trueContrastColor","contrastColorToken","darkTextConstrast","getContrastRatio","lightTextConstrast","process","env","NODE_ENV","contrast","console","warn","join","foreground","background","lumA","getLuminance","lumB","Math","max","min","rose","pink","fuchsia","purple","violet","indigo","blue","lightBlue","cyan","teal","emerald","tertiary","green","lime","yellow","amber","orange","red","warmGray","trueGray","gray","coolGray","blueGray","dark","danger","error","success","warning","muted","primary","info","secondary","light"],"mappings":"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","sourcesContent":["import Color from 'tinycolor2';\nimport { useToken } from './useToken';\nimport { useAccessibleColors } from '../core/color-mode/hooks';\nimport { useNativeBaseConfig } from '../core/NativeBaseContext';\n\nexport function useContrastText(bg: string, color?: string) {\n  const [\n    contrastThreshold,\n    trueDarkText,\n    trueLightText,\n    trueBg,\n    trueColor,\n  ] = useToken('colors', [\n    'contrastThreshold',\n    'darkText',\n    'lightText',\n    bg,\n    color ?? '',\n  ]);\n\n  const suppressColorAccessibilityWarning = useNativeBaseConfig(\n    'NativeBaseConfigProvider'\n  ).config.suppressColorAccessibilityWarning;\n\n  const [accessibleColors] = useAccessibleColors();\n\n  if (useNativeBaseConfig('NativeBaseConfigProvider').disableContrastText) {\n    return trueColor;\n  }\n  if (typeof bg !== 'string') {\n    return;\n  }\n\n  const [bgThemeColorVariant, bgShade] = bg.split('.');\n\n  const textColor =\n    !accessibleColors &&\n    bgThemeColorVariant &&\n    themeColorsThresholdShades[bgThemeColorVariant]\n      ? getContrastThemeColor(bgThemeColorVariant, bgShade)\n      : getAccessibleContrastColor(\n          contrastThreshold,\n          trueDarkText,\n          trueLightText,\n          trueBg,\n          trueColor,\n          bg,\n          color,\n          suppressColorAccessibilityWarning\n        );\n\n  return textColor;\n}\n\nfunction getContrastThemeColor(bgThemeColorVariant: string, bgShade: string) {\n  const shadeThreshold = themeColorsThresholdShades[bgThemeColorVariant];\n  if (\n    bgShade &&\n    shadeThreshold &&\n    ((bgShade >= shadeThreshold && bgThemeColorVariant !== 'dark') ||\n      (bgThemeColorVariant === 'dark' && bgShade < shadeThreshold))\n  ) {\n    return 'lightText';\n  }\n  return 'darkText';\n}\nfunction getAccessibleContrastColor(\n  contrastThreshold: number,\n  trueDarkText: string,\n  trueLightText: string,\n  trueBg: string,\n  trueColor: string,\n  bg: string,\n  color?: string,\n  suppressColorAccessibilityWarning?: boolean\n) {\n  if (typeof trueBg !== 'string') {\n    trueBg = bg;\n  }\n  let trueContrastColor;\n  let contrastColorToken;\n  const darkTextConstrast = getContrastRatio(trueBg, trueDarkText);\n  const lightTextConstrast = getContrastRatio(trueBg, trueLightText);\n\n  if (\n    darkTextConstrast >= contrastThreshold ||\n    darkTextConstrast > lightTextConstrast\n  ) {\n    trueContrastColor = trueDarkText;\n    contrastColorToken = 'darkText';\n  } else {\n    trueContrastColor = trueLightText;\n    contrastColorToken = 'lightText';\n  }\n\n  if (process.env.NODE_ENV !== 'production') {\n    const contrast = getContrastRatio(\n      trueBg,\n      trueColor ? trueColor : trueContrastColor\n    );\n    if (contrast < 3 && !suppressColorAccessibilityWarning) {\n      console.warn(\n        [\n          `NativeBase: The contrast ratio of ${contrast}:1 for ${\n            color ? color : contrastColorToken\n          } on ${bg}`,\n          'falls below the WCAG recommended absolute minimum contrast ratio of 3:1.',\n          'https://www.w3.org/TR/2008/REC-WCAG20-20081211/#visual-audio-contrast-contrast',\n        ].join('\\n')\n      );\n    }\n  }\n  return contrastColorToken;\n}\nfunction getContrastRatio(foreground: string, background: string) {\n  const lumA = Color(foreground).getLuminance();\n  const lumB = Color(background).getLuminance();\n  return (Math.max(lumA, lumB) + 0.05) / (Math.min(lumA, lumB) + 0.05);\n}\n\nconst themeColorsThresholdShades: any = {\n  rose: 500,\n  pink: 500,\n  fuchsia: 800,\n  purple: 700,\n  violet: 600,\n  indigo: 500,\n  blue: 400,\n  lightBlue: 400,\n  cyan: 300,\n  teal: 300,\n  emerald: 300,\n  tertiary: 300,\n  green: 400,\n  lime: 600,\n  yellow: 800,\n  amber: 500,\n  orange: 500,\n  red: 500,\n  warmGray: 500,\n  trueGray: 500,\n  gray: 500,\n  coolGray: 500,\n  blueGray: 500,\n  dark: 500,\n  danger: 500,\n  error: 500,\n  success: 400,\n  warning: 500,\n  muted: 500,\n  primary: 500,\n  info: 400,\n  secondary: 500,\n  light: 500,\n};\n"]}