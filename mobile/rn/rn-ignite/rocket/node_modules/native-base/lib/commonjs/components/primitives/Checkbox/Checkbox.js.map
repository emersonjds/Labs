{"version":3,"sources":["Checkbox.tsx"],"names":["Checkbox","wrapperRef","isHovered","isHoveredProp","isPressed","isPressedProp","isFocused","isFocusedProp","props","ref","formControlContext","isInvalid","isReadOnly","isIndeterminate","combinedProps","checkboxGroupContext","CheckboxGroupContext","state","defaultSelected","defaultIsChecked","isSelected","isChecked","_ref","React","useRef","mergedRef","inputProps","groupItemInputProps","useMemo","checked","disabled","contextCombinedProps","useState","CheckboxComponent","memo","hoverProps","pressableProps","focusProps","isDisabled","icon","_interactionBox","_icon","_stack","_text","onPress","onPressIn","onPressOut","onHoverIn","onHoverOut","onFocus","onBlur","resolvedProps","layoutProps","nonLayoutProps","stylingProps","margin","layout","flexbox","position","accessibilityProps","nonAccessibilityProps","children"],"mappings":"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","sourcesContent":["import React, { useContext, memo, forwardRef } from 'react';\nimport { Pressable, IPressableProps } from '../Pressable';\nimport { usePropsResolution } from '../../../hooks/useThemeProps';\nimport { Center } from '../../composites/Center';\nimport { useFormControlContext } from '../../composites/FormControl';\nimport Box from '../Box';\nimport { mergeRefs } from './../../../utils';\nimport type { ICheckboxProps } from './types';\nimport { useToggleState } from '@react-stately/toggle';\nimport { CheckboxGroupContext } from './CheckboxGroup';\nimport { useCheckbox, useCheckboxGroupItem } from '@react-native-aria/checkbox';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\nimport { composeEventHandlers, combineContextAndProps } from '../../../utils';\nimport { extractInObject, stylingProps } from '../../../theme/tools/utils';\nimport {\n  useHover,\n  useFocus,\n  useIsPressed,\n} from '../../primitives/Pressable/Pressable';\nimport SizedIcon from './SizedIcon';\nimport { Stack } from '../Stack';\nimport { wrapStringChild } from '../../../utils/wrapStringChild';\n\nconst Checkbox = (\n  {\n    wrapperRef,\n    isHovered: isHoveredProp,\n    isPressed: isPressedProp,\n    isFocused: isFocusedProp,\n    ...props\n  }: ICheckboxProps,\n  ref: any\n) => {\n  const formControlContext = useFormControlContext();\n\n  const {\n    isInvalid,\n    isReadOnly,\n    isIndeterminate,\n    ...combinedProps\n  } = combineContextAndProps(formControlContext, props);\n\n  const checkboxGroupContext = useContext(CheckboxGroupContext);\n  const state = useToggleState({\n    ...combinedProps,\n    defaultSelected: combinedProps.defaultIsChecked,\n    isSelected: combinedProps.isChecked,\n  });\n  const _ref = React.useRef();\n  const mergedRef = mergeRefs([ref, _ref]);\n\n  // Swap hooks depending on whether this checkbox is inside a CheckboxGroup.\n  // This is a bit unorthodox. Typically, hooks cannot be called in a conditional,\n  // but since the checkbox won't move in and out of a group, it should be safe.\n  const { inputProps: groupItemInputProps } = checkboxGroupContext\n    ? // eslint-disable-next-line react-hooks/rules-of-hooks\n      useCheckboxGroupItem(\n        combinedProps,\n        checkboxGroupContext.state,\n        //@ts-ignore\n        mergedRef\n      )\n    : // eslint-disable-next-line react-hooks/rules-of-hooks\n      useCheckbox(\n        combinedProps,\n        state,\n        //@ts-ignore\n        mergedRef\n      );\n\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  const inputProps = React.useMemo(() => groupItemInputProps, [\n    groupItemInputProps.checked,\n    groupItemInputProps.disabled,\n  ]);\n\n  const [contextCombinedProps] = React.useState({\n    ...checkboxGroupContext,\n    ...combinedProps,\n  });\n  return (\n    <CheckboxComponent\n      inputProps={inputProps}\n      combinedProps={contextCombinedProps}\n      isInvalid={isInvalid}\n      isReadOnly={isReadOnly}\n      isIndeterminate={isIndeterminate}\n      isHovered={isHoveredProp}\n      isPressed={isPressedProp}\n      isFocused={isFocusedProp}\n      wrapperRef={wrapperRef}\n    />\n  );\n};\nconst CheckboxComponent = React.memo(\n  ({\n    wrapperRef,\n    inputProps,\n    combinedProps,\n    isInvalid,\n    isReadOnly,\n    isIndeterminate,\n    isHovered: isHoveredProp,\n    isPressed: isPressedProp,\n    isFocused: isFocusedProp,\n  }: any) => {\n    const _ref = React.useRef();\n    const { hoverProps, isHovered } = useHover();\n    const { pressableProps, isPressed } = useIsPressed();\n    const { focusProps, isFocused } = useFocus();\n\n    const { checked: isChecked, disabled: isDisabled } = inputProps;\n\n    const {\n      icon,\n      _interactionBox,\n      _icon,\n      _stack,\n      _text,\n      onPress,\n      onPressIn,\n      onPressOut,\n      onHoverIn,\n      onHoverOut,\n      onFocus,\n      onBlur,\n      ...resolvedProps\n    } = usePropsResolution(\n      'Checkbox',\n      { ...combinedProps, ...inputProps },\n      {\n        isInvalid,\n        isReadOnly,\n        isIndeterminate,\n        isDisabled,\n        isChecked,\n        isHovered: isHoveredProp || isHovered,\n        isPressed: isPressedProp || isPressed,\n        isFocused: isFocusedProp || isFocused,\n      }\n    );\n\n    const [layoutProps, nonLayoutProps] = extractInObject(resolvedProps, [\n      ...stylingProps.margin,\n      ...stylingProps.layout,\n      ...stylingProps.flexbox,\n      ...stylingProps.position,\n      '_text',\n    ]);\n\n    const [\n      accessibilityProps,\n      nonAccessibilityProps,\n    ] = extractInObject(nonLayoutProps, [\n      'accessibilityRole',\n      'accessibilityState',\n    ]);\n\n    //TODO: refactor for responsive prop\n    if (useHasResponsiveProps(resolvedProps)) {\n      return null;\n    }\n\n    return (\n      <Pressable\n        disabled={isDisabled}\n        {...(pressableProps as IPressableProps)}\n        {...accessibilityProps}\n        onPress={onPress}\n        ref={mergeRefs([_ref, wrapperRef])}\n        accessibilityRole=\"checkbox\"\n        onPressIn={composeEventHandlers(onPressIn, pressableProps.onPressIn)}\n        onPressOut={composeEventHandlers(onPressOut, pressableProps.onPressOut)}\n        // @ts-ignore - web only\n        onHoverIn={composeEventHandlers(onHoverIn, hoverProps.onHoverIn)}\n        // @ts-ignore - web only\n        onHoverOut={composeEventHandlers(onHoverOut, hoverProps.onHoverOut)}\n        // @ts-ignore - web only\n        onFocus={composeEventHandlers(\n          composeEventHandlers(onFocus, focusProps.onFocus)\n          // focusRingProps.onFocu\n        )}\n        // @ts-ignore - web only\n        onBlur={composeEventHandlers(\n          composeEventHandlers(onBlur, focusProps.onBlur)\n          // focusRingProps.onBlur\n        )}\n      >\n        <Stack {...layoutProps} {..._stack}>\n          <Center>\n            {/* Interaction Wrapper */}\n            <Box {..._interactionBox} />\n            {/* Checkbox */}\n            <Center {...nonAccessibilityProps}>\n              <SizedIcon icon={icon} _icon={_icon} isChecked={isChecked} />\n            </Center>\n          </Center>\n          {/* Label */}\n          {wrapStringChild(combinedProps.children, _text)}\n        </Stack>\n      </Pressable>\n    );\n  }\n);\n\nexport default memo(forwardRef(Checkbox));\n"]}