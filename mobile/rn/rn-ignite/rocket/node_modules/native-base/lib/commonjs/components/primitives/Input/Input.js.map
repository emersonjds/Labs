{"version":3,"sources":["Input.tsx"],"names":["StyledInput","TextInput","Input","isHovered","isHoveredProp","isFocused","isFocusedProp","onKeyPress","props","ref","inputProps","isDisabled","isInvalid","isReadOnly","isRequired","nativeID","setIsFocused","React","useState","handleFocus","focusState","callback","focusOutlineColor","invalidOutlineColor","_ref","useRef","inputThemeProps","disabled","accessibilityInvalid","accessibilityReadOnly","required","ariaLabel","accessibilityLabel","type","isFullWidth","fontFamily","fontWeight","fontStyle","placeholderTextColor","selectionColor","underlineColorAndroid","InputLeftElement","InputRightElement","leftElement","rightElement","onFocus","onBlur","wrapperRef","_stack","_input","resolvedProps","layoutProps","nonLayoutProps","stylingProps","margin","border","layout","flexbox","position","background","resolvedFontFamily","resolvedPlaceholderTextColor","resolvedSelectionColor","resolvedUnderlineColorAndroid","undefined","e","persist"],"mappings":"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","sourcesContent":["import React, { memo, forwardRef } from 'react';\nimport type { IInputProps } from './types';\nimport { TextInput } from 'react-native';\nimport { useToken } from '../../../hooks';\nimport { useFormControl } from '../../composites/FormControl';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\nimport { useHover } from '@react-native-aria/interactions';\nimport { extractInObject, stylingProps } from '../../../theme/tools/utils';\nimport { usePropsResolution } from '../../../hooks/useThemeProps';\nimport { mergeRefs } from '../../../utils';\nimport { Stack } from '../Stack';\nimport { makeStyledComponent } from '../../../utils/styled';\nimport { useResolvedFontFamily } from '../../../hooks/useResolvedFontFamily';\n\nconst StyledInput = makeStyledComponent(TextInput);\n\nconst Input = (\n  {\n    isHovered: isHoveredProp,\n    isFocused: isFocusedProp,\n    onKeyPress,\n    ...props\n  }: IInputProps,\n  ref: any\n) => {\n  const inputProps = useFormControl({\n    isDisabled: props.isDisabled,\n    isInvalid: props.isInvalid,\n    isReadOnly: props.isReadOnly,\n    isRequired: props.isRequired,\n    nativeID: props.nativeID,\n  });\n  const [isFocused, setIsFocused] = React.useState(false);\n  const handleFocus = (focusState: boolean, callback: any) => {\n    setIsFocused(focusState);\n    callback();\n  };\n\n  /**Converting into Hash Color Code */\n  //@ts-ignore\n  props.focusOutlineColor = useToken('colors', props.focusOutlineColor);\n  //@ts-ignore\n  props.invalidOutlineColor = useToken('colors', props.invalidOutlineColor);\n\n  const _ref = React.useRef(null);\n  const { isHovered } = useHover({}, _ref);\n\n  const inputThemeProps = {\n    isDisabled: inputProps.disabled,\n    isInvalid: inputProps.accessibilityInvalid,\n    isReadOnly: inputProps.accessibilityReadOnly,\n    isRequired: inputProps.required,\n  };\n\n  const {\n    ariaLabel,\n    accessibilityLabel,\n    type,\n    isFullWidth,\n    isDisabled,\n    isReadOnly,\n    fontFamily,\n    fontWeight,\n    fontStyle,\n    placeholderTextColor,\n    selectionColor,\n    underlineColorAndroid,\n    InputLeftElement,\n    InputRightElement,\n    leftElement,\n    rightElement,\n    onFocus,\n    onBlur,\n    wrapperRef,\n    _stack,\n    _input,\n\n    ...resolvedProps\n  } = usePropsResolution(\n    'Input',\n    {\n      ...inputThemeProps,\n      ...props,\n    },\n    {\n      isDisabled: inputThemeProps.isDisabled,\n      isHovered: isHoveredProp || isHovered,\n      isFocused: isFocusedProp || isFocused,\n      isInvalid: inputThemeProps.isInvalid,\n      isReadOnly: inputThemeProps.isReadOnly,\n    }\n  );\n\n  const [layoutProps, nonLayoutProps] = extractInObject(resolvedProps, [\n    ...stylingProps.margin,\n    ...stylingProps.border,\n    ...stylingProps.layout,\n    ...stylingProps.flexbox,\n    ...stylingProps.position,\n    ...stylingProps.background,\n    'shadow',\n    'opacity',\n  ]);\n\n  const resolvedFontFamily = useResolvedFontFamily({\n    fontFamily,\n    fontWeight: fontWeight ?? 400,\n    fontStyle: fontStyle ?? 'normal',\n  });\n  const resolvedPlaceholderTextColor = useToken('colors', placeholderTextColor);\n  const resolvedSelectionColor = useToken('colors', selectionColor);\n  const resolvedUnderlineColorAndroid = useToken(\n    'colors',\n    underlineColorAndroid\n  );\n  //TODO: refactor for responsive prop\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n\n  return (\n    <Stack\n      {..._stack}\n      {...layoutProps}\n      ref={mergeRefs([_ref, wrapperRef])}\n      isFocused={isFocused}\n    >\n      {InputLeftElement || leftElement ? InputLeftElement || leftElement : null}\n      <StyledInput\n        {...inputProps}\n        secureTextEntry={type === 'password'}\n        accessible\n        accessibilityLabel={ariaLabel || accessibilityLabel}\n        editable={isDisabled || isReadOnly ? false : true}\n        w={isFullWidth ? '100%' : undefined}\n        {...nonLayoutProps}\n        {...resolvedFontFamily}\n        placeholderTextColor={resolvedPlaceholderTextColor}\n        selectionColor={resolvedSelectionColor}\n        underlineColorAndroid={resolvedUnderlineColorAndroid}\n        onKeyPress={(e: any) => {\n          e.persist();\n          onKeyPress && onKeyPress(e);\n        }}\n        onFocus={(e: any) => {\n          handleFocus(true, onFocus ? () => onFocus(e) : () => {});\n        }}\n        onBlur={(e: any) => {\n          handleFocus(false, onBlur ? () => onBlur(e) : () => {});\n        }}\n        {..._input}\n        ref={mergeRefs([ref, _ref, wrapperRef])}\n      />\n      {InputRightElement || rightElement\n        ? InputRightElement || rightElement\n        : null}\n    </Stack>\n  );\n};\n\nexport default memo(forwardRef(Input));\n"]}