{"version":3,"sources":["index.tsx"],"names":["IconButton","icon","children","isHovered","isHoveredProp","isPressed","isPressedProp","isFocused","isFocusedProp","isFocusVisible","isFocusVisibleProp","isDisabled","props","ref","hoverProps","pressableProps","focusProps","focusRingProps","_icon","onPressIn","onPressOut","onHoverIn","onHoverOut","onFocus","onBlur","resolvedProps","clonedIcon","React","cloneElement"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AACA;;AAEA;;AAKA;;;;;;;;AAEA,MAAMA,UAAU,GAAG,CACjB;AACEC,EAAAA,IADF;AAEEC,EAAAA,QAFF;AAGEC,EAAAA,SAAS,EAAEC,aAHb;AAIEC,EAAAA,SAAS,EAAEC,aAJb;AAKEC,EAAAA,SAAS,EAAEC,aALb;AAMEC,EAAAA,cAAc,EAAEC,kBANlB;AAOEC,EAAAA,UAPF;AAQE,KAAGC;AARL,CADiB,EAWjBC,GAXiB,KAYd;AACH,QAAM;AAAEC,IAAAA,UAAF;AAAcX,IAAAA;AAAd,MAA4B,2BAAlC;AACA,QAAM;AAAEY,IAAAA,cAAF;AAAkBV,IAAAA;AAAlB,MAAgC,+BAAtC;AACA,QAAM;AAAEW,IAAAA,UAAF;AAAcT,IAAAA;AAAd,MAA4B,2BAAlC;AACA,QAAM;AAAEE,IAAAA,cAAF;AAAkBO,IAAAA,UAAU,EAAEC;AAA9B,MAAsD,0BAA5D;AAEA,QAAM;AACJC,IAAAA,KADI;AAEJC,IAAAA,SAFI;AAGJC,IAAAA,UAHI;AAIJC,IAAAA,SAJI;AAKJC,IAAAA,UALI;AAMJC,IAAAA,OANI;AAOJC,IAAAA,MAPI;AAQJ,OAAGC;AARC,MASF,uCAAmB,YAAnB,EAAiCb,KAAjC,EAAwC;AAC1CT,IAAAA,SAAS,EAAEC,aAAa,IAAID,SADc;AAE1CE,IAAAA,SAAS,EAAEC,aAAa,IAAID,SAFc;AAG1CE,IAAAA,SAAS,EAAEC,aAAa,IAAID,SAHc;AAI1CE,IAAAA,cAAc,EAAEC,kBAAkB,IAAID,cAJI;AAK1CE,IAAAA;AAL0C,GAAxC,CATJ;AAiBA,MAAIe,UAAJ;;AACA,MAAIzB,IAAJ,EAAU;AACRyB,IAAAA,UAAU,gBAAGC,eAAMC,YAAN,CAAmB3B,IAAnB,EAAyB,EACpC,GAAGiB,KADiC;AAEpC,UAAGjB,IAAH,aAAGA,IAAH,uBAAGA,IAAI,CAAEW,KAAT,CAFoC;AAGpC,SAAGA,KAAK,CAACM;AAH2B,KAAzB,CAAb;AAKD,GA9BE,CAgCH;;;AACA,MAAI,kDAAsBN,KAAtB,CAAJ,EAAkC;AAChC,WAAO,IAAP;AACD;;AAED,sBACE,6BAAC,oBAAD;AACE,IAAA,iBAAiB,EAAC,QADpB;AAEE,IAAA,GAAG,EAAEC,GAFP;AAGE,IAAA,SAAS,EAAE,iCAAqBM,SAArB,EAAgCJ,cAAc,CAACI,SAA/C,CAHb;AAIE,IAAA,UAAU,EAAE,iCAAqBC,UAArB,EAAiCL,cAAc,CAACK,UAAhD,CAJd,CAKE;AALF;AAME,IAAA,SAAS,EAAE,iCAAqBC,SAArB,EAAgCP,UAAU,CAACO,SAA3C,CANb,CAOE;AAPF;AAQE,IAAA,UAAU,EAAE,iCAAqBC,UAArB,EAAiCR,UAAU,CAACQ,UAA5C,CARd,CASE;AATF;AAUE,IAAA,OAAO,EAAE,iCACP,iCAAqBC,OAArB,EAA8BP,UAAU,CAACO,OAAzC,CADO,EAEPN,cAAc,CAACM,OAFR,CAVX,CAcE;AAdF;AAeE,IAAA,MAAM,EAAE,iCACN,iCAAqBC,MAArB,EAA6BR,UAAU,CAACQ,MAAxC,CADM,EAENP,cAAc,CAACO,MAFT;AAfV,KAmBMC,aAnBN,GAqBGC,UAAU,iBAAI,6BAAC,UAAD,EAAUR,KAAV,EAAkBhB,QAAlB,CArBjB,CADF;AAyBD,CA1ED;;4BA4Ee,+BAAK,uBAAWF,UAAX,CAAL,C","sourcesContent":["import React, { memo, forwardRef } from 'react';\nimport { Pressable } from '../../primitives/Pressable';\nimport { Icon } from '../../primitives/Icon';\nimport { usePropsResolution } from '../../../hooks/useThemeProps';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\nimport { composeEventHandlers } from '../../../utils';\nimport type { IIconButtonProps } from './types';\nimport {\n  useHover,\n  useFocus,\n  useIsPressed,\n} from '../../primitives/Pressable/Pressable';\nimport { useFocusRing } from '@react-native-aria/focus';\n\nconst IconButton = (\n  {\n    icon,\n    children,\n    isHovered: isHoveredProp,\n    isPressed: isPressedProp,\n    isFocused: isFocusedProp,\n    isFocusVisible: isFocusVisibleProp,\n    isDisabled,\n    ...props\n  }: IIconButtonProps,\n  ref: any\n) => {\n  const { hoverProps, isHovered } = useHover();\n  const { pressableProps, isPressed } = useIsPressed();\n  const { focusProps, isFocused } = useFocus();\n  const { isFocusVisible, focusProps: focusRingProps }: any = useFocusRing();\n\n  const {\n    _icon,\n    onPressIn,\n    onPressOut,\n    onHoverIn,\n    onHoverOut,\n    onFocus,\n    onBlur,\n    ...resolvedProps\n  } = usePropsResolution('IconButton', props, {\n    isHovered: isHoveredProp || isHovered,\n    isPressed: isPressedProp || isPressed,\n    isFocused: isFocusedProp || isFocused,\n    isFocusVisible: isFocusVisibleProp || isFocusVisible,\n    isDisabled,\n  });\n\n  let clonedIcon;\n  if (icon) {\n    clonedIcon = React.cloneElement(icon, {\n      ..._icon,\n      ...icon?.props,\n      ...props._icon,\n    });\n  }\n\n  //TODO: refactor for responsive prop\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n\n  return (\n    <Pressable\n      accessibilityRole=\"button\"\n      ref={ref}\n      onPressIn={composeEventHandlers(onPressIn, pressableProps.onPressIn)}\n      onPressOut={composeEventHandlers(onPressOut, pressableProps.onPressOut)}\n      // @ts-ignore - web only\n      onHoverIn={composeEventHandlers(onHoverIn, hoverProps.onHoverIn)}\n      // @ts-ignore - web only\n      onHoverOut={composeEventHandlers(onHoverOut, hoverProps.onHoverOut)}\n      // @ts-ignore - web only\n      onFocus={composeEventHandlers(\n        composeEventHandlers(onFocus, focusProps.onFocus),\n        focusRingProps.onFocus\n      )}\n      // @ts-ignore - web only\n      onBlur={composeEventHandlers(\n        composeEventHandlers(onBlur, focusProps.onBlur),\n        focusRingProps.onBlur\n      )}\n      {...resolvedProps}\n    >\n      {clonedIcon || <Icon {..._icon}>{children}</Icon>}\n    </Pressable>\n  );\n};\n\nexport default memo(forwardRef(IconButton));\nexport type { IIconButtonProps };\n"]}