{"version":3,"sources":["NativeBaseProvider.tsx"],"names":["defaultInitialWindowMetricsBasedOnPlatform","Platform","select","web","frame","x","y","width","height","insets","top","left","right","bottom","default","defaultInitialWindowMetrics","NativeBaseProvider","props","colorModeManager","config","defaultConfig","children","theme","propsTheme","defaultTheme","initialWindowMetrics","isSSR","disableContrastText","newTheme","React","useMemo","enableRem","windowWidth","currentBreakpoint","breakpoints","InitializeToastRef","toast","ToastRef","current"],"mappings":";;;;;;;AAAA;;AACA;;AAKA;;AACA;;AAEA;;AACA;;AACA;;AACA;;AAMA;;AACA;;AAIA;;;;AAEA;AAEA;AACA,MAAMA,0CAA0D,GAAGC,sBAASC,MAAT,CACjE;AACEC,EAAAA,GAAG,EAAE;AACHC,IAAAA,KAAK,EAAE;AAAEC,MAAAA,CAAC,EAAE,CAAL;AAAQC,MAAAA,CAAC,EAAE,CAAX;AAAcC,MAAAA,KAAK,EAAE,CAArB;AAAwBC,MAAAA,MAAM,EAAE;AAAhC,KADJ;AAEHC,IAAAA,MAAM,EAAE;AAAEC,MAAAA,GAAG,EAAE,CAAP;AAAUC,MAAAA,IAAI,EAAE,CAAhB;AAAmBC,MAAAA,KAAK,EAAE,CAA1B;AAA6BC,MAAAA,MAAM,EAAE;AAArC;AAFL,GADP;AAKEC,EAAAA,OAAO,EAAEC;AALX,CADiE,CAAnE;;AAqBA,MAAMC,kBAAkB,GAAIC,KAAD,IAAoC;AAAA;;AAC7D,QAAM;AACJC,IAAAA,gBADI;AAEJC,IAAAA,MAAM,GAAGC,gCAFL;AAGJC,IAAAA,QAHI;AAIJC,IAAAA,KAAK,EAAEC,UAAU,GAAGC,YAJhB;AAKJC,IAAAA,oBALI;AAMJC,IAAAA,KANI;AAOJC,IAAAA;AAPI,MAQFV,KARJ;AASA,QAAMK,KAAK,oBAAGH,MAAM,CAACG,KAAV,yDAAmBC,UAA9B;;AAEA,QAAMK,QAAQ,GAAGC,eAAMC,OAAN,CAAc,MAAM;AACnC,QAAIX,MAAM,CAACY,SAAX,EAAsB;AACpB,aAAO,wCAA2BT,KAA3B,CAAP;AACD;;AACD,WAAOA,KAAP;AACD,GALgB,EAKd,CAACH,MAAM,CAACY,SAAR,EAAmBT,KAAnB,CALc,CAAjB;;AAOA,QAAMU,WAAW,2BAAG,uCAAH,yDAAG,qBAAuBzB,KAA3C;;AAEA,QAAM0B,iBAAiB,GAAGJ,eAAMC,OAAN,CACxB,MAAM,kCAAqBF,QAAQ,CAACM,WAA9B,EAA2CF,WAA3C,CADkB,EAExB,CAACA,WAAD,EAAcJ,QAAQ,CAACM,WAAvB,CAFwB,CAA1B;;AAKA,sBACE,6BAAC,2CAAD;AACE,IAAA,KAAK,EAAEN,QADT;AAEE,IAAA,MAAM,EAAET,MAFV;AAGE,IAAA,iBAAiB,EAAEc,iBAHrB;AAIE,IAAA,KAAK,EAAEP,KAJT;AAKE,IAAA,mBAAmB,EAAEC;AALvB,kBAOE,6BAAC,4CAAD;AACE,IAAA,cAAc,EACZF,oBADY,aACZA,oBADY,cACZA,oBADY,GACYzB;AAF5B,kBAKE,6BAAC,2CAAD;AAAyB,IAAA,sBAAsB,EAAE,CAAC0B;AAAlD,kBACE,6BAAC,uBAAD;AACE,IAAA,gBAAgB,EAAER,gBADpB;AAEE,IAAA,OAAO,EAAEI,KAAK,CAACH;AAFjB,kBAIE,6BAAC,yBAAD,qBACE,6BAAC,oBAAD,qBACE,6BAAC,kBAAD,OADF,eAEE,6BAAC,kBAAD,QAAcE,QAAd,CAFF,CADF,CAJF,CADF,CALF,CAPF,CADF;AA6BD,CAvDD;;;;AAyDA,MAAMc,kBAAkB,GAAG,MAAM;AAC/B,QAAMC,KAAK,GAAG,sBAAd;AACAC,kBAASC,OAAT,GAAmBF,KAAnB;AACA,SAAO,IAAP;AACD,CAJD","sourcesContent":["import React from 'react';\nimport {\n  SafeAreaProvider,\n  Metrics,\n  initialWindowMetrics as defaultInitialWindowMetrics,\n} from 'react-native-safe-area-context';\nimport { SSRProvider } from '@react-native-aria/utils';\nimport { theme as defaultTheme, ITheme } from './../theme';\nimport type { IColorModeProviderProps } from './color-mode';\nimport HybridProvider from './hybrid-overlay/HybridProvider';\nimport { OverlayProvider } from '@react-native-aria/overlays';\nimport { ToastProvider, ToastRef } from '../components/composites/Toast';\nimport {\n  defaultConfig,\n  INativebaseConfig,\n  NativeBaseConfigProvider,\n} from './NativeBaseContext';\nimport { useToast } from '../components/composites/Toast';\nimport { Platform, useWindowDimensions } from 'react-native';\nimport {\n  getClosestBreakpoint,\n  platformSpecificSpaceUnits,\n} from '../theme/tools/utils';\nimport { ResponsiveQueryProvider } from '../utils/useResponsiveQuery';\n\n// For SSR to work, we need to pass initial insets as 0 values on web.\n\n// https://github.com/th3rdwave/react-native-safe-area-context/issues/132\nconst defaultInitialWindowMetricsBasedOnPlatform: Metrics | null = Platform.select(\n  {\n    web: {\n      frame: { x: 0, y: 0, width: 0, height: 0 },\n      insets: { top: 0, left: 0, right: 0, bottom: 0 },\n    },\n    default: defaultInitialWindowMetrics,\n  }\n);\n\nexport interface NativeBaseProviderProps {\n  theme?: ITheme;\n  colorModeManager?: IColorModeProviderProps['colorModeManager'];\n  children?: React.ReactNode;\n  initialWindowMetrics?: any;\n  config?: INativebaseConfig;\n  isSSR?: boolean;\n  disableContrastText?: boolean;\n  // Refer https://github.com/th3rdwave/react-native-safe-area-context#testing\n}\n\nconst NativeBaseProvider = (props: NativeBaseProviderProps) => {\n  const {\n    colorModeManager,\n    config = defaultConfig,\n    children,\n    theme: propsTheme = defaultTheme,\n    initialWindowMetrics,\n    isSSR,\n    disableContrastText,\n  } = props;\n  const theme = config.theme ?? propsTheme;\n\n  const newTheme = React.useMemo(() => {\n    if (config.enableRem) {\n      return platformSpecificSpaceUnits(theme);\n    }\n    return theme;\n  }, [config.enableRem, theme]);\n\n  const windowWidth = useWindowDimensions()?.width;\n\n  const currentBreakpoint = React.useMemo(\n    () => getClosestBreakpoint(newTheme.breakpoints, windowWidth),\n    [windowWidth, newTheme.breakpoints]\n  );\n\n  return (\n    <NativeBaseConfigProvider\n      theme={newTheme}\n      config={config}\n      currentBreakpoint={currentBreakpoint}\n      isSSR={isSSR}\n      disableContrastText={disableContrastText}\n    >\n      <SafeAreaProvider\n        initialMetrics={\n          initialWindowMetrics ?? defaultInitialWindowMetricsBasedOnPlatform\n        }\n      >\n        <ResponsiveQueryProvider disableCSSMediaQueries={!isSSR}>\n          <HybridProvider\n            colorModeManager={colorModeManager}\n            options={theme.config}\n          >\n            <OverlayProvider>\n              <ToastProvider>\n                <InitializeToastRef />\n                <SSRProvider>{children}</SSRProvider>\n              </ToastProvider>\n            </OverlayProvider>\n          </HybridProvider>\n        </ResponsiveQueryProvider>\n      </SafeAreaProvider>\n    </NativeBaseConfigProvider>\n  );\n};\n\nconst InitializeToastRef = () => {\n  const toast = useToast();\n  ToastRef.current = toast;\n  return null;\n};\n\nexport { NativeBaseProvider };\n"]}