{"version":3,"sources":["getSpacedChildren.tsx"],"names":["flattenChildren","children","keys","childrenArray","React","Children","toArray","reduce","flatChildren","child","index","type","Fragment","concat","props","key","isValidElement","push","cloneElement","String","join","getSpacedChildren","space","axis","reverse","divider","orientation","responsiveQueryContext","useContext","ResponsiveQueryContext","disableCSSMediaQueries","spacingProp","mx","my","map","length","width","height"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { default as Box } from '../components/primitives/Box';\nimport type { SpaceType as ThemeSpaceType } from '../components/types';\nimport { ResponsiveQueryContext } from './useResponsiveQuery/ResponsiveQueryProvider';\n\ntype SpaceType =\n  | 'gutter'\n  | '2xs'\n  | 'xs'\n  | 'sm'\n  | 'md'\n  | 'lg'\n  | 'xl'\n  | '2xl'\n  | ThemeSpaceType;\n\n// Thanks @gregberge for code and @nandorojo for suggestion.\n// Original source: https://github.com/gregberge/react-flatten-children\ntype ReactChildArray = ReturnType<typeof React.Children.toArray>;\nfunction flattenChildren(\n  children: JSX.Element[] | JSX.Element,\n  keys: (string | number)[] = []\n): ReactChildArray {\n  const childrenArray = React.Children.toArray(children);\n  return childrenArray.reduce(\n    (flatChildren: ReactChildArray, child: any, index: number) => {\n      if ((child as React.ReactElement<any>).type === React.Fragment) {\n        return flatChildren.concat(\n          flattenChildren(\n            (child as React.ReactElement<any>).props.children,\n            keys.concat(child.key || index)\n          )\n        );\n      }\n      if (React.isValidElement(child)) {\n        flatChildren.push(\n          React.cloneElement(child, {\n            key: keys.concat(String(child.key || index)).join('.'),\n          })\n        );\n      } else {\n        flatChildren.push(child);\n      }\n      return flatChildren;\n    },\n    []\n  );\n}\n\nconst getSpacedChildren = (\n  children: JSX.Element[] | JSX.Element,\n  space: undefined | SpaceType,\n  axis: 'X' | 'Y',\n  reverse: string,\n  divider: JSX.Element | undefined\n): any => {\n  let childrenArray = React.Children.toArray(flattenChildren(children));\n  childrenArray =\n    reverse === 'reverse' ? [...childrenArray].reverse() : childrenArray;\n\n  const orientation = axis === 'X' ? 'vertical' : 'horizontal';\n\n  // eslint-disable-next-line react-hooks/rules-of-hooks\n  const responsiveQueryContext = React.useContext(ResponsiveQueryContext);\n  const disableCSSMediaQueries = responsiveQueryContext.disableCSSMediaQueries;\n\n  // If there's a divider, we wrap it with a Box and apply vertical and horizontal margins else we add a spacer Box with height or width\n  if (divider) {\n    const spacingProp: object = {\n      ...(axis === 'X' ? { mx: space } : { my: space }),\n    };\n\n    divider = React.cloneElement(divider, {\n      orientation,\n      ...spacingProp,\n    });\n\n    childrenArray = childrenArray.map((child: any, index: number) => {\n      return (\n        <React.Fragment key={child.key ?? `spaced-child-${index}`}>\n          {child}\n          {index < childrenArray.length - 1 && divider}\n        </React.Fragment>\n      );\n    });\n  } else {\n    const spacingProp: object = {\n      ...(axis === 'X' ? { width: space } : { height: space }),\n    };\n    childrenArray = childrenArray.map((child: any, index: number) => {\n      return (\n        <React.Fragment key={child.key ?? `spaced-child-${index}`}>\n          {child}\n          {disableCSSMediaQueries ? (\n            index < childrenArray.length - 1 && <Box {...spacingProp} />\n          ) : (\n            <></>\n          )}\n        </React.Fragment>\n      );\n    });\n  }\n\n  return childrenArray;\n};\n\nexport default getSpacedChildren;\n"]}