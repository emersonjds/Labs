{"version":3,"sources":["AlertDialog.tsx"],"names":["AlertDialog","children","isOpen","onClose","defaultIsOpen","initialFocusRef","finalFocusRef","avoidKeyboard","closeOnOverlayClick","isKeyboardDismissable","overlayVisible","backdropVisible","animationPreset","rest","ref","bottomInset","contentSize","_backdrop","_backdropFade","_fade","_slide","restThemeProps","visible","setVisible","value","defaultValue","onChange","val","handleClose","child","undefined","StyleSheet","absoluteFill"],"mappings":"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","sourcesContent":["import React, { forwardRef, memo } from 'react';\nimport { StyleSheet } from 'react-native';\nimport Backdrop from '../Backdrop';\nimport { Slide } from '../Transitions';\nimport { FocusScope } from '@react-native-aria/focus';\nimport { useControllableState, usePropsResolution } from '../../../hooks';\nimport { AlertDialogContext } from './Context';\nimport Box from '../../primitives/Box';\nimport type { IAlertDialogProps } from './types';\nimport { Fade } from '../Transitions';\nimport { useKeyboardBottomInset } from '../../../utils';\nimport { Overlay } from '../../primitives/Overlay';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\n\nconst AlertDialog = (\n  {\n    children,\n    isOpen,\n    onClose,\n    defaultIsOpen,\n    initialFocusRef,\n    finalFocusRef,\n    avoidKeyboard,\n    closeOnOverlayClick = false,\n    isKeyboardDismissable = true,\n    overlayVisible = true,\n    backdropVisible = true,\n    animationPreset,\n    ...rest\n  }: IAlertDialogProps,\n  ref: any\n) => {\n  const bottomInset = useKeyboardBottomInset();\n  const {\n    contentSize,\n    _backdrop,\n    _backdropFade,\n    _fade,\n    _slide,\n    ...restThemeProps\n  } = usePropsResolution('AlertDialog', rest);\n\n  const [visible, setVisible] = useControllableState({\n    value: isOpen,\n    defaultValue: defaultIsOpen,\n    onChange: (val) => {\n      if (!val) onClose && onClose();\n    },\n  });\n\n  const handleClose = () => setVisible(false);\n\n  const child = (\n    <Box\n      bottom={avoidKeyboard ? bottomInset + 'px' : undefined}\n      {...restThemeProps}\n      ref={ref}\n    >\n      {children}\n    </Box>\n  );\n\n  //TODO: refactor for responsive prop\n  if (useHasResponsiveProps(rest)) {\n    return null;\n  }\n  return (\n    <Overlay\n      isOpen={visible}\n      onRequestClose={handleClose}\n      isKeyboardDismissable={isKeyboardDismissable}\n      useRNModalOnAndroid\n      unmountOnExit\n    >\n      <AlertDialogContext.Provider\n        value={{\n          handleClose,\n          contentSize,\n          initialFocusRef,\n          finalFocusRef,\n        }}\n      >\n        <Fade in={visible} style={StyleSheet.absoluteFill} {..._backdropFade}>\n          {overlayVisible && backdropVisible && (\n            <Backdrop\n              onPress={() => {\n                closeOnOverlayClick && handleClose();\n              }}\n              {..._backdrop}\n            />\n          )}\n        </Fade>\n        {animationPreset === 'slide' ? (\n          <Slide in={visible} {..._slide}>\n            <FocusScope\n              contain={visible}\n              autoFocus={visible && !initialFocusRef}\n              restoreFocus={visible && !finalFocusRef}\n            >\n              {child}\n            </FocusScope>\n          </Slide>\n        ) : (\n          <Fade in={visible} style={StyleSheet.absoluteFill} {..._fade}>\n            <FocusScope\n              contain={visible}\n              autoFocus={visible && !initialFocusRef}\n              restoreFocus={visible && !finalFocusRef}\n            >\n              {child}\n            </FocusScope>\n          </Fade>\n        )}\n      </AlertDialogContext.Provider>\n    </Overlay>\n  );\n};\n\nexport default memo(forwardRef(AlertDialog));\n"]}