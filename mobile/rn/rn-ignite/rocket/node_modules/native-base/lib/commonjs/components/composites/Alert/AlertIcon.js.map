{"version":3,"sources":["AlertIcon.tsx"],"names":["AlertIcon","children","props","ref","newProps","status","_icon","React","useContext","AlertContext","getIcon"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AAOA;;AACA;;AACA;;AACA;;;;;;;;AAEA,MAAMA,SAAS,GAAG,CAAC;AAAEC,EAAAA,QAAF;AAAY,KAAGC;AAAf,CAAD,EAA0CC,GAA1C,KAAwD;AACxE,MAAIC,QAAQ,GAAG,uCAAmB,WAAnB,EAAgCF,KAAhC,CAAf;AACAE,EAAAA,QAAQ,GAAG,0BAAcA,QAAd,CAAX;;AACA,QAAM;AAAEC,IAAAA,MAAF;AAAUC,IAAAA;AAAV,MAAmCC,eAAMC,UAAN,CAAiBC,qBAAjB,CAAzC;;AACA,QAAMC,OAAO,GAAG,MAAM;AACpB,YAAQL,MAAR;AACE,WAAK,OAAL;AACE,4BAAO,6BAAC,qBAAD,eAAoBC,KAApB,EAA+BF,QAA/B;AAAyC,UAAA,GAAG,EAAED;AAA9C,WAAP;;AACF,WAAK,SAAL;AACE,4BAAO,6BAAC,kBAAD,eAAiBG,KAAjB,EAA4BF,QAA5B;AAAsC,UAAA,GAAG,EAAED;AAA3C,WAAP;;AACF,WAAK,SAAL;AACE,4BAAO,6BAAC,sBAAD,eAAqBG,KAArB,EAAgCF,QAAhC;AAA0C,UAAA,GAAG,EAAED;AAA/C,WAAP;;AACF;AACE,4BAAO,6BAAC,eAAD,eAAcG,KAAd,EAAyBF,QAAzB;AAAmC,UAAA,GAAG,EAAED;AAAxC,WAAP;AARJ;AAUD,GAXD,CAJwE,CAgBxE;;;AACA,MAAI,kDAAsBD,KAAtB,CAAJ,EAAkC;AAChC,WAAO,IAAP;AACD;;AACD,sBAAO,6BAAC,eAAD,QAAMD,QAAQ,IAAIS,OAAO,EAAzB,CAAP;AACD,CArBD;;4BAsBe,+BAAK,uBAAWV,SAAX,CAAL,C","sourcesContent":["import React, { memo, forwardRef } from 'react';\nimport { Box } from '../../primitives';\nimport {\n  WarningIcon,\n  WarningTwoIcon,\n  InfoIcon,\n  CheckCircleIcon,\n} from '../../primitives/Icon/Icons';\nimport type { IAlertContext, IAlertIconProps } from './types';\nimport { usePropsResolution } from '../../../hooks/useThemeProps';\nimport { AlertContext } from './Context';\nimport { omitUndefined } from '../../../theme/tools/utils';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\n\nconst AlertIcon = ({ children, ...props }: IAlertIconProps, ref?: any) => {\n  let newProps = usePropsResolution('AlertIcon', props);\n  newProps = omitUndefined(newProps);\n  const { status, _icon }: IAlertContext = React.useContext(AlertContext);\n  const getIcon = () => {\n    switch (status) {\n      case 'error':\n        return <WarningTwoIcon {..._icon} {...newProps} ref={ref} />;\n      case 'warning':\n        return <WarningIcon {..._icon} {...newProps} ref={ref} />;\n      case 'success':\n        return <CheckCircleIcon {..._icon} {...newProps} ref={ref} />;\n      default:\n        return <InfoIcon {..._icon} {...newProps} ref={ref} />;\n    }\n  };\n  //TODO: refactor for responsive prop\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n  return <Box>{children || getIcon()}</Box>;\n};\nexport default memo(forwardRef(AlertIcon));\n"]}