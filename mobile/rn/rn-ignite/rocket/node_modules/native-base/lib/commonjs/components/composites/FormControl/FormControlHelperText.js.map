{"version":3,"sources":["FormControlHelperText.tsx"],"names":["FormControlHelperText","props","ref","formControlContext","combinedProps","resolvedProps","isDisabled","isReadOnly","isInvalid","React","useEffect","setHasHelpText","feedbackId"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AACA;;AAEA;;AACA;;;;;;;;;;AAEA,MAAMA,qBAAqB,GAAG,CAC5BC,KAD4B,EAE5BC,GAF4B,KAGzB;AACH,QAAMC,kBAAkB,GAAG,4CAA3B;AACA,QAAMC,aAAa,GAAG,mCAAuBD,kBAAvB,EAA2CF,KAA3C,CAAtB;AACA,QAAMI,aAAa,GAAG,uCACpB,uBADoB,EAEpBD,aAFoB,EAGpB;AACEE,IAAAA,UAAU,EAAEF,aAAa,CAACE,UAD5B;AAEEC,IAAAA,UAAU,EAAEH,aAAa,CAACG,UAF5B;AAGEC,IAAAA,SAAS,EAAEJ,aAAa,CAACI,SAH3B,CAIE;;AAJF,GAHoB,CAAtB;;AAWAC,iBAAMC,SAAN,CAAgB,MAAM;AACpBL,IAAAA,aAAa,SAAb,IAAAA,aAAa,WAAb,YAAAA,aAAa,CAAEM,cAAf,CAA8B,IAA9B;AACA,WAAO,MAAM;AACXN,MAAAA,aAAa,SAAb,IAAAA,aAAa,WAAb,YAAAA,aAAa,CAAEM,cAAf,CAA8B,KAA9B;AACD,KAFD;AAGD,GALD,EAdG,CAoBH;;;AACA,MAAI,kDAAsBV,KAAtB,CAAJ,EAAkC;AAChC,WAAO,IAAP;AACD;;AAED,sBACE,6BAAC,YAAD,eAASI,aAAT;AAAwB,IAAA,QAAQ,EAAEA,aAAF,aAAEA,aAAF,uBAAEA,aAAa,CAAEO,UAAjD;AAA6D,IAAA,GAAG,EAAEV;AAAlE,KADF;AAGD,CA/BD;;4BAiCe,+BAAK,uBAAWF,qBAAX,CAAL,C","sourcesContent":["import React, { memo, forwardRef } from 'react';\nimport Box from '../../primitives/Box';\nimport { usePropsResolution } from '../../../hooks/useThemeProps';\nimport { useFormControlContext } from './useFormControl';\nimport type { IFormControlHelperTextProps } from './types';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\nimport { combineContextAndProps } from '../../../utils';\n\nconst FormControlHelperText = (\n  props: IFormControlHelperTextProps,\n  ref: any\n) => {\n  const formControlContext = useFormControlContext();\n  const combinedProps = combineContextAndProps(formControlContext, props);\n  const resolvedProps = usePropsResolution(\n    'FormControlHelperText',\n    combinedProps,\n    {\n      isDisabled: combinedProps.isDisabled,\n      isReadOnly: combinedProps.isReadOnly,\n      isInvalid: combinedProps.isInvalid,\n      // isRequired: combinedProps.isRequired,\n    }\n  );\n\n  React.useEffect(() => {\n    resolvedProps?.setHasHelpText(true);\n    return () => {\n      resolvedProps?.setHasHelpText(false);\n    };\n  });\n  //TODO: refactor for responsive prop\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n\n  return (\n    <Box {...resolvedProps} nativeID={resolvedProps?.feedbackId} ref={ref} />\n  );\n};\n\nexport default memo(forwardRef(FormControlHelperText));\n"]}