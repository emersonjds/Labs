{"version":3,"sources":["Stagger.tsx"],"names":["defaultStaggerConfig","offset","reverse","Stagger","children","restProps","React","Children","map","child","index","clonedAnimationConfig","animate","exit","transition","delay","stagger","count","key"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AAEA;;;;;;AA+BA,MAAMA,oBAAoC,GAAG;AAAEC,EAAAA,MAAM,EAAE,CAAV;AAAaC,EAAAA,OAAO,EAAE;AAAtB,CAA7C;;AAEA,MAAMC,OAAO,GAAG,CAAC;AAAEC,EAAAA,QAAF;AAAY,KAAGC;AAAf,CAAD,KAA+C;AAC7D;AACA,MAAI,kDAAsBA,SAAtB,CAAJ,EAAsC;AACpC,WAAO,IAAP;AACD;;AACD,SAAOC,eAAMC,QAAN,CAAeC,GAAf,CAAmBJ,QAAnB,EAA6B,CAACK,KAAD,EAAQC,KAAR,KAAkB;AACpD,UAAMC,qBAAqB,GAAG,qBAAUN,SAAV,CAA9B;AACA,UAAM;AAAEO,MAAAA,OAAF;AAAWC,MAAAA;AAAX,QAAoBF,qBAA1B;;AAEA,QAAIC,OAAJ,EAAa;AAAA;;AACX,UAAI,CAACA,OAAO,CAACE,UAAb,EAAyB;AACvBF,QAAAA,OAAO,CAACE,UAAR,GAAqB,EAArB;AACD;;AACDF,MAAAA,OAAO,CAACE,UAAR,CAAmBC,KAAnB,4BAA2BH,OAAO,CAACE,UAAR,CAAmBC,KAA9C,yEAAuD,CAAvD;AACA,YAAMC,OAAO,4BAAGJ,OAAO,CAACE,UAAR,CAAmBE,OAAtB,yEAAiChB,oBAA9C;AACA,YAAMC,MAAM,GAAGe,OAAO,CAACd,OAAR,GACX,CAACI,eAAMC,QAAN,CAAeU,KAAf,CAAqBb,QAArB,IAAiC,CAAjC,GAAqCM,KAAtC,IAA+CM,OAAO,CAACf,MAD5C,GAEXS,KAAK,GAAGM,OAAO,CAACf,MAFpB;AAGAW,MAAAA,OAAO,CAACE,UAAR,CAAmBC,KAAnB,GAA2BH,OAAO,CAACE,UAAR,CAAmBC,KAAnB,GAA2Bd,MAAtD;AACD;;AAED,QAAIY,IAAJ,EAAU;AAAA;;AACR,UAAI,CAACA,IAAI,CAACC,UAAV,EAAsB;AACpBD,QAAAA,IAAI,CAACC,UAAL,GAAkB,EAAlB;AACD;;AACDD,MAAAA,IAAI,CAACC,UAAL,CAAgBC,KAAhB,4BAAwBF,IAAI,CAACC,UAAL,CAAgBC,KAAxC,yEAAiD,CAAjD;AACA,YAAMC,OAAO,4BAAGH,IAAI,CAACC,UAAL,CAAgBE,OAAnB,yEAA8BhB,oBAA3C;AACA,YAAMC,MAAM,GAAGe,OAAO,CAACd,OAAR,GACX,CAACI,eAAMC,QAAN,CAAeU,KAAf,CAAqBb,QAArB,IAAiC,CAAjC,GAAqCM,KAAtC,IAA+CM,OAAO,CAACf,MAD5C,GAEXS,KAAK,GAAGM,OAAO,CAACf,MAFpB;AAGAY,MAAAA,IAAI,CAACC,UAAL,CAAgBC,KAAhB,GAAwBF,IAAI,CAACC,UAAL,CAAgBC,KAAhB,GAAwBd,MAAhD;AACD;;AAED,wBACE,6BAAC,2BAAD;AAAoB,MAAA,GAAG,EAAEQ,KAAK,CAACS;AAA/B,OAAwCP,qBAAxC,GACGF,KADH,CADF;AAKD,GAjCM,CAAP;AAkCD,CAvCD;;eAyCeN,O","sourcesContent":["import cloneDeep from 'lodash.clonedeep';\nimport React from 'react';\nimport PresenceTransition from './PresenceTransition';\nimport type { ISupportedTransitions, ITransitionConfig } from './types';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\n\ninterface IStaggerConfig {\n  offset: number;\n  reverse?: boolean;\n}\n\nexport interface IStaggerStyleProps extends ISupportedTransitions {\n  transition?: ITransitionConfig & { stagger?: IStaggerConfig };\n}\n\ninterface IStaggerProps {\n  children: any;\n  /**\n   * Initial styles before the transition starts\n   */\n  initial?: ISupportedTransitions;\n  /**\n   * The styles to which each child should animate to while entering.\n   */\n  animate?: IStaggerStyleProps;\n  /**\n   * The styles to which each child should animate to while exiting.\n   */\n  exit?: IStaggerStyleProps;\n  /**\n   * Determines whether to start the animation\n   */\n  visible?: boolean;\n}\n\nconst defaultStaggerConfig: IStaggerConfig = { offset: 0, reverse: false };\n\nconst Stagger = ({ children, ...restProps }: IStaggerProps) => {\n  //TODO: refactor for responsive prop\n  if (useHasResponsiveProps(restProps)) {\n    return null;\n  }\n  return React.Children.map(children, (child, index) => {\n    const clonedAnimationConfig = cloneDeep(restProps);\n    const { animate, exit } = clonedAnimationConfig;\n\n    if (animate) {\n      if (!animate.transition) {\n        animate.transition = {};\n      }\n      animate.transition.delay = animate.transition.delay ?? 0;\n      const stagger = animate.transition.stagger ?? defaultStaggerConfig;\n      const offset = stagger.reverse\n        ? (React.Children.count(children) - 1 - index) * stagger.offset\n        : index * stagger.offset;\n      animate.transition.delay = animate.transition.delay + offset;\n    }\n\n    if (exit) {\n      if (!exit.transition) {\n        exit.transition = {};\n      }\n      exit.transition.delay = exit.transition.delay ?? 0;\n      const stagger = exit.transition.stagger ?? defaultStaggerConfig;\n      const offset = stagger.reverse\n        ? (React.Children.count(children) - 1 - index) * stagger.offset\n        : index * stagger.offset;\n      exit.transition.delay = exit.transition.delay + offset;\n    }\n\n    return (\n      <PresenceTransition key={child.key} {...clonedAnimationConfig}>\n        {child}\n      </PresenceTransition>\n    );\n  });\n};\n\nexport default Stagger;\n"]}