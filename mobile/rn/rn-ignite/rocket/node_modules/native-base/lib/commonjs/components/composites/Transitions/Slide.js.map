{"version":3,"sources":["Slide.tsx"],"names":["holderStyle","top","right","left","bottom","Slide","children","props","ref","in","visible","placement","overlay","duration","_overlay","resolvedProps","containerOpacity","setContainerOpacity","React","useState","size","setSize","provideSize","layoutSize","width","height","transition","animationStyle","initial","translateY","animate","exit","translateX","slideComponent","position","e","nativeEvent","layout"],"mappings":"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","sourcesContent":["import React, { forwardRef, memo } from 'react';\nimport Box from '../../primitives/Box';\nimport type { ISlideProps } from './types';\nimport PresenceTransition from './PresenceTransition';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\nimport { Overlay } from '../../primitives/Overlay';\nimport { usePropsResolution } from '../../../hooks/';\n\nconst holderStyle: any = {\n  top: {\n    top: 0,\n    right: 0,\n    left: 0,\n  },\n  right: {\n    right: 0,\n    top: 0,\n    bottom: 0,\n  },\n  bottom: {\n    bottom: 0,\n    right: 0,\n    left: 0,\n  },\n  left: {\n    left: 0,\n    bottom: 0,\n    top: 0,\n  },\n};\n\nexport const Slide = memo(\n  forwardRef(({ children, ...props }: ISlideProps, ref: any) => {\n    const {\n      in: visible,\n      placement,\n      overlay,\n      duration,\n      _overlay,\n      ...resolvedProps\n    } = usePropsResolution('Slide', props);\n    const [containerOpacity, setContainerOpacity] = React.useState(0);\n    const [size, setSize] = React.useState(0);\n    const provideSize = (layoutSize: any) => {\n      if (placement === 'right' || placement === 'left')\n        setSize(layoutSize.width);\n      else setSize(layoutSize.height);\n      setContainerOpacity(1);\n    };\n\n    const transition = { duration };\n\n    const animationStyle: any = {\n      top: {\n        initial: {\n          translateY: -size,\n        },\n        animate: {\n          translateY: 0,\n          transition,\n        },\n      },\n      bottom: {\n        initial: {\n          translateY: size,\n        },\n        animate: {\n          translateY: 0,\n          transition,\n        },\n        exit: {\n          translateY: size,\n          transition,\n        },\n      },\n      left: {\n        initial: {\n          translateX: -size,\n        },\n        animate: {\n          translateX: 0,\n          transition,\n        },\n      },\n      right: {\n        initial: {\n          translateX: size,\n        },\n        animate: {\n          translateX: 0,\n          transition,\n        },\n      },\n    };\n\n    //TODO: refactor for responsive prop\n    if (useHasResponsiveProps(props)) {\n      return null;\n    }\n\n    const slideComponent = (\n      <PresenceTransition\n        visible={visible}\n        {...animationStyle[placement]}\n        style={[\n          { position: 'absolute' },\n          holderStyle[placement],\n          { height: '100%' },\n        ]}\n      >\n        <Box\n          {...resolvedProps}\n          opacity={containerOpacity}\n          ref={ref}\n          onLayout={(e) => provideSize(e.nativeEvent.layout)}\n        >\n          {children}\n        </Box>\n      </PresenceTransition>\n    );\n\n    if (overlay) {\n      return (\n        <>\n          <Overlay {..._overlay}>{slideComponent}</Overlay>\n        </>\n      );\n    } else {\n      return slideComponent;\n    }\n  })\n);\n\nexport default Slide;\n"]}