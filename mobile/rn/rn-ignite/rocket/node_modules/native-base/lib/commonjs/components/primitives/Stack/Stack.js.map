{"version":3,"sources":["Stack.tsx"],"names":["Stack","space","props","ref","dir","direction","children","reversed","divider","size","resolvedProps","isDisabled","isHovered","isFocused","isInvalid","isReadOnly","resolveResponsively","responsiveQueryContext","React","useContext","ResponsiveQueryContext","disableCSSMediaQueries","undefined"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AAEA;;;;;;;;;;AAgDA,MAAMA,KAAK,GAAG,CAAC;AAAEC,EAAAA,KAAF;AAAS,KAAGC;AAAZ,CAAD,EAAmCC,GAAnC,KAAiD;AAC7D,QAAMC,GAAG,GAAGF,KAAK,CAACG,SAAlB;AACA,QAAM;AACJC,IAAAA,QADI;AAEJD,IAAAA,SAFI;AAGJE,IAAAA,QAHI;AAIJC,IAAAA,OAJI;AAKJC,IAAAA,IALI;AAMJ,OAAGC;AANC,MAOG,uCACP,OADO,EAEP,EAAE,GAAGR,KAAL;AAAYO,IAAAA,IAAI,EAAER;AAAlB,GAFO,EAGP;AACEU,IAAAA,UAAU,EAAET,KAAK,CAACS,UADpB;AAEEC,IAAAA,SAAS,EAAEV,KAAK,CAACU,SAFnB;AAGEC,IAAAA,SAAS,EAAEX,KAAK,CAACW,SAHnB;AAIEC,IAAAA,SAAS,EAAEZ,KAAK,CAACY,SAJnB;AAKEC,IAAAA,UAAU,EAAEb,KAAK,CAACa;AALpB,GAHO,EAUP;AAAEC,IAAAA,mBAAmB,EAAE,CAAC,OAAD,EAAU,WAAV;AAAvB,GAVO,CAPT;;AAoBA,QAAMC,sBAAsB,GAAGC,eAAMC,UAAN,CAAiBC,+CAAjB,CAA/B;;AACA,QAAMC,sBAAsB,GAAGJ,sBAAsB,CAACI,sBAAtD,CAvB6D,CAyB7D;;AACA,MAAI,kDAAsBnB,KAAtB,CAAJ,EAAkC;AAChC,WAAO,IAAP;AACD;;AAED,sBACE,6BAAC,YAAD;AACE,IAAA,aAAa,EAAEE;AADjB,KAEMM,aAFN;AAGE,IAAA,GAAG,EAAEP,GAHP,CAIE;AAJF;AAKE,IAAA,GAAG,EAAEkB,sBAAsB,GAAGC,SAAH,GAAeb;AAL5C,MAOG,8BACCH,QADD,EAECG,IAFD,EAGCJ,SAAS,KAAK,KAAd,GAAsB,GAAtB,GAA4B,GAH7B,EAICE,QAAQ,GAAG,SAAH,GAAe,QAJxB,EAKCC,OALD,CAPH,CADF;AAiBD,CA/CD;;4BAiDe,+BAAK,uBAAWR,KAAX,CAAL,C","sourcesContent":["import React, { memo, forwardRef } from 'react';\nimport { default as Box, InterfaceBoxProps } from '../Box';\nimport { getSpacedChildren } from '../../../utils';\nimport { usePropsResolution } from '../../../hooks/useThemeProps';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\nimport type { CustomProps, ResponsiveValue, SpaceType } from '../../types';\nimport { ResponsiveQueryContext } from '../../../utils/useResponsiveQuery/ResponsiveQueryProvider';\n\nexport interface InterfaceStackProps extends InterfaceBoxProps<IStackProps> {\n  /**\n   * The divider element to use between elements.\n   */\n  divider?: JSX.Element;\n  /**\n   * The space between each stack item. Accepts Responsive values\n   */\n  space?: ResponsiveValue<\n    'gutter' | '2xs' | 'xs' | 'sm' | 'md' | 'lg' | 'xl' | '2xl' | SpaceType\n  >;\n  /**\n   * Determines whether to reverse the direction of Stack Items.\n   */\n  reversed?: boolean;\n  /**\n   * The direction of the Stack Items.\n   * @default column\n   */\n  direction?: ResponsiveValue<\n    'column' | 'row' | 'column-reverse' | 'row-reverse'\n  >;\n  /**\n   * If true, the Stack will be in hovered state.\n   */\n  isHovered?: boolean;\n  /**\n   * If true, the Stack will be focused.\n   */\n  isFocused?: boolean;\n  /**\n   * If true, the Stack will be disabled.\n   */\n  isDisabled?: boolean;\n  /**\n   * If true, the Stack will be invalid.\n   */\n  isInvalid?: boolean;\n  /**\n   * If true, prevents the value of the children from being edited. Used with FormControls.\n   */\n  isReadOnly?: boolean;\n}\n\nexport type IStackProps = InterfaceStackProps & CustomProps<'Stack'>;\n\nconst Stack = ({ space, ...props }: IStackProps, ref?: any) => {\n  const dir = props.direction;\n  const {\n    children,\n    direction,\n    reversed,\n    divider,\n    size,\n    ...resolvedProps\n  }: any = usePropsResolution(\n    'Stack',\n    { ...props, size: space },\n    {\n      isDisabled: props.isDisabled,\n      isHovered: props.isHovered,\n      isFocused: props.isFocused,\n      isInvalid: props.isInvalid,\n      isReadOnly: props.isReadOnly,\n    },\n    { resolveResponsively: ['space', 'direction'] }\n  );\n\n  const responsiveQueryContext = React.useContext(ResponsiveQueryContext);\n  const disableCSSMediaQueries = responsiveQueryContext.disableCSSMediaQueries;\n\n  //TODO: refactor for responsive prop\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n\n  return (\n    <Box\n      flexDirection={dir}\n      {...resolvedProps}\n      ref={ref}\n      // @ts-ignore\n      gap={disableCSSMediaQueries ? undefined : size}\n    >\n      {getSpacedChildren(\n        children,\n        size,\n        direction === 'row' ? 'X' : 'Y',\n        reversed ? 'reverse' : 'normal',\n        divider\n      )}\n    </Box>\n  );\n};\n\nexport default memo(forwardRef(Stack));\n"]}