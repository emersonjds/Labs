{"version":3,"sources":["AccordionItem.tsx"],"names":["AccordionItem","children","index","pIndex","isDisabled","props","ref","cIndex","changeHandler","React","useContext","AccordionContext","newProps","isOpen","includes","onClose","cb","onOpen","childSetter","isExpanded","memo","forwardRef"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AAEA;;AACA;;;;;;AAEA,MAAMA,aAAa,GAAG,CACpB;AAAEC,EAAAA,QAAF;AAAYC,EAAAA,KAAK,EAAEC,MAAM,GAAG,CAA5B;AAA+BC,EAAAA,UAA/B;AAA2C,KAAGC;AAA9C,CADoB,EAEpBC,GAFoB,KAGjB;AACH,QAAM;AACJJ,IAAAA,KAAK,EAAEK,MADH;AAEJC,IAAAA;AAFI,MAGsBC,eAAMC,UAAN,CAAiBC,yBAAjB,CAH5B;;AAIA,QAAM,EAAE,GAAGC;AAAL,MAAkB,0BAAc,eAAd,EAA+BP,KAA/B,CAAxB;AAEA,QAAMQ,MAAM,GAAGN,MAAH,aAAGA,MAAH,uBAAGA,MAAM,CAAEO,QAAR,CAAiBX,MAAjB,CAAf;;AACA,QAAMY,OAAO,GAAIC,EAAD,IAAqB;AACnCR,IAAAA,aAAa,IAAIA,aAAa,CAAC,KAAD,EAAQL,MAAR,CAA9B;AACAa,IAAAA,EAAE,IAAIA,EAAE,EAAR;AACD,GAHD;;AAIA,QAAMC,MAAM,GAAID,EAAD,IAAqB;AAClCR,IAAAA,aAAa,IAAIA,aAAa,CAAC,IAAD,EAAOL,MAAP,CAA9B;AACAa,IAAAA,EAAE,IAAIA,EAAE,EAAR;AACD,GAHD;;AAIA,QAAME,WAAW,GAAG,MAAM;AACxB,QAAI,OAAOjB,QAAP,KAAoB,UAAxB,EACE,OAAOA,QAAQ,CAAC;AAAEkB,MAAAA,UAAU,EAAEN,MAAd;AAAsBT,MAAAA;AAAtB,KAAD,CAAf;AACF,WAAOH,QAAP;AACD,GAJD,CAhBG,CAqBH;;;AACA,MAAI,kDAAsBI,KAAtB,CAAJ,EAAkC;AAChC,WAAO,IAAP;AACD;;AACD,sBACE,6BAAC,6BAAD,CAAsB,QAAtB;AACE,IAAA,KAAK,EAAE;AACLH,MAAAA,KAAK,EAAEC,MADF;AAELU,MAAAA,MAFK;AAGLT,MAAAA,UAHK;AAILW,MAAAA,OAJK;AAKLE,MAAAA;AALK;AADT,kBASE,6BAAC,YAAD,eAASL,QAAT;AAAmB,IAAA,GAAG,EAAEN;AAAxB,MACGY,WAAW,EADd,CATF,CADF;AAeD,CA3CD;;4BA6CeT,eAAMW,IAAN,eAAWX,eAAMY,UAAN,CAAiBrB,aAAjB,CAAX,C","sourcesContent":["import React from 'react';\nimport Box from '../../primitives/Box';\nimport { AccordionContext, AccordionItemContext } from './Context';\nimport type { IAccordionItemProps, IAccordionContextProps } from './types';\nimport { useThemeProps } from '../../../hooks';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\n\nconst AccordionItem = (\n  { children, index: pIndex = 0, isDisabled, ...props }: IAccordionItemProps,\n  ref?: any\n) => {\n  const {\n    index: cIndex,\n    changeHandler,\n  }: IAccordionContextProps = React.useContext(AccordionContext);\n  const { ...newProps } = useThemeProps('AccordionItem', props);\n\n  const isOpen = cIndex?.includes(pIndex);\n  const onClose = (cb?: () => void) => {\n    changeHandler && changeHandler(false, pIndex);\n    cb && cb();\n  };\n  const onOpen = (cb?: () => void) => {\n    changeHandler && changeHandler(true, pIndex);\n    cb && cb();\n  };\n  const childSetter = () => {\n    if (typeof children === 'function')\n      return children({ isExpanded: isOpen, isDisabled });\n    return children;\n  };\n  //TODO: refactor for responsive prop\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n  return (\n    <AccordionItemContext.Provider\n      value={{\n        index: pIndex,\n        isOpen,\n        isDisabled,\n        onClose,\n        onOpen,\n      }}\n    >\n      <Box {...newProps} ref={ref}>\n        {childSetter()}\n      </Box>\n    </AccordionItemContext.Provider>\n  );\n};\n\nexport default React.memo(React.forwardRef(AccordionItem));\n"]}