{"version":3,"sources":["alert.ts"],"names":["getBg","props","theme","colorScheme","status","variant","lightBg","darkBg","variantSubtle","bg","_icon","color","variantOutline","borderWidth","borderColor","variantOutlineLight","variantSolid","variantLeftAccent","borderLeftColor","variantTopAccent","borderTopColor","variants","Alert","baseStyle","alignItems","justifyContent","p","space","borderRadius","defaultProps","AlertIcon","size"],"mappings":"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","sourcesContent":["import { mode, getColor, getColorScheme, transparentize } from '../tools';\n\nfunction getBg(props: Record<string, any>) {\n  let { theme, colorScheme, status, variant } = props;\n\n  colorScheme = getColorScheme(\n    props,\n    colorScheme !== 'primary' ? colorScheme : status\n  );\n  const lightBg =\n    variant === 'solid'\n      ? getColor(theme, `${colorScheme}.600`, colorScheme)\n      : getColor(theme, `${colorScheme}.100`, colorScheme);\n\n  const darkBg =\n    variant === 'solid'\n      ? getColor(theme, `${colorScheme}.700`, colorScheme)\n      : getColor(theme, `${colorScheme}.200`, colorScheme);\n  return mode(lightBg, darkBg)(props);\n}\n\nconst variantSubtle = (props: Record<string, any>) => {\n  let { colorScheme, status } = props;\n  colorScheme = getColorScheme(\n    props,\n    colorScheme !== 'primary' ? colorScheme : status\n  );\n  return {\n    bg: getBg(props),\n    _icon: { color: mode(`${colorScheme}.600`, `${colorScheme}.700`)(props) },\n  };\n};\n\nconst variantOutline = (props: Record<string, any>) => {\n  let { colorScheme, status } = props;\n  colorScheme = getColorScheme(\n    props,\n    colorScheme !== 'primary' ? colorScheme : status\n  );\n  return {\n    borderWidth: 1,\n    borderColor: mode(`${colorScheme}.600`, `${colorScheme}.700`)(props),\n    _icon: { color: mode(`${colorScheme}.600`, `${colorScheme}.700`)(props) },\n  };\n};\nconst variantOutlineLight = (props: Record<string, any>) => {\n  let { colorScheme, status, theme } = props;\n  colorScheme = getColorScheme(\n    props,\n    colorScheme !== 'primary' ? colorScheme : status\n  );\n  return {\n    borderWidth: 1,\n    borderColor: transparentize(\n      mode(`${colorScheme}.600`, `${colorScheme}.500`)(props),\n      0.2\n    )(theme),\n    _icon: { color: mode(`${colorScheme}.600`, `${colorScheme}.200`)(props) },\n  };\n};\n\nconst variantSolid = (props: Record<string, any>) => {\n  return {\n    borderWidth: 6,\n    borderColor: 'transparent',\n    bg: getBg(props),\n    _icon: { color: mode(`coolGray.50`, `warmGray.50`)(props) },\n  };\n};\nconst variantLeftAccent = (props: Record<string, any>) => {\n  let { colorScheme, status } = props;\n  colorScheme = getColorScheme(\n    props,\n    colorScheme !== 'primary' ? colorScheme : status\n  );\n  return {\n    borderWidth: 4,\n    bg: getBg(props),\n    _icon: { color: mode(`${colorScheme}.600`, `${colorScheme}.700`)(props) },\n    borderColor: 'transparent',\n    borderLeftColor: mode(`${colorScheme}.600`, `${colorScheme}.700`)(props),\n  };\n};\nconst variantTopAccent = (props: Record<string, any>) => {\n  let { colorScheme, status } = props;\n  colorScheme = getColorScheme(\n    props,\n    colorScheme !== 'primary' ? colorScheme : status\n  );\n  return {\n    borderWidth: 4,\n    borderColor: 'transparent',\n    borderTopColor: mode(`${colorScheme}.600`, `${colorScheme}.700`)(props),\n    bg: getBg(props),\n    _icon: { color: mode(`${colorScheme}.600`, `${colorScheme}.700`)(props) },\n  };\n};\n\nconst variants = {\n  'subtle': variantSubtle,\n  'solid': variantSolid,\n  'left-accent': variantLeftAccent,\n  'top-accent': variantTopAccent,\n  'outline': variantOutline,\n  'outline-light': variantOutlineLight,\n};\n\nexport const Alert = {\n  baseStyle: {\n    alignItems: 'center',\n    justifyContent: 'flex-start',\n    p: 3,\n    space: 3,\n    borderRadius: 'sm',\n  },\n  variants,\n  defaultProps: {\n    colorScheme: 'primary',\n    variant: 'subtle',\n  },\n};\n\n// AlertIcon\n\nexport const AlertIcon = {\n  baseStyle: {\n    size: 4,\n  },\n};\n"]}