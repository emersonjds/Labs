{"version":3,"sources":["index.ts"],"names":["useSafeArea","props","insets","sizes","safeAreaProps","paddingProps","sansPaddingProps","Object","keys","length","calcualtedPaddingProps"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AAEO,SAASA,WAAT,CAAqBC,KAArB,EAAiC;AACtC,QAAMC,MAAM,GAAG,oDAAf;AACA,QAAMC,KAAK,GAAG,0BAAWA,KAAzB;AACA,QAAM;AAAEC,IAAAA,aAAF;AAAiBC,IAAAA,YAAjB;AAA+BC,IAAAA;AAA/B,MAAoD,2BACxDL,KADwD,CAA1D;;AAGA,MAAI,CAACM,MAAM,CAACC,IAAP,CAAYJ,aAAZ,EAA2BK,MAAhC,EAAwC;AACtC,WAAOR,KAAP;AACD;;AACD,MAAIS,sBAAsB,GAAG,kCAC3BN,aAD2B,EAE3BC,YAF2B,EAG3BH,MAH2B,EAI3BC,KAJ2B,CAA7B;AAMA,SAAO,EAAE,GAAGG,gBAAL;AAAuB,OAAGD,YAA1B;AAAwC,OAAGK;AAA3C,GAAP;AACD","sourcesContent":["import { useSafeAreaInsets } from 'react-native-safe-area-context';\nimport { getSortedProps, calculatePaddingProps } from './utils';\nimport { useTheme } from './../useTheme';\n\nexport function useSafeArea(props: any) {\n  const insets = useSafeAreaInsets();\n  const sizes = useTheme().sizes;\n  const { safeAreaProps, paddingProps, sansPaddingProps } = getSortedProps(\n    props\n  );\n  if (!Object.keys(safeAreaProps).length) {\n    return props;\n  }\n  let calcualtedPaddingProps = calculatePaddingProps(\n    safeAreaProps,\n    paddingProps,\n    insets,\n    sizes\n  );\n  return { ...sansPaddingProps, ...paddingProps, ...calcualtedPaddingProps };\n}\n"]}