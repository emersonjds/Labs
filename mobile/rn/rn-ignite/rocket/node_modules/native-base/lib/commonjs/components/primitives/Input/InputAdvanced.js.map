{"version":3,"sources":["InputAdvanced.tsx"],"names":["InputAdvance","InputLeftElement","InputRightElement","leftElement","rightElement","onFocus","onBlur","inputProps","wrapperRef","props","ref","inputThemeProps","isDisabled","disabled","isInvalid","accessibilityInvalid","isReadOnly","accessibilityReadOnly","isRequired","required","isFocused","setIsFocused","React","useState","handleFocus","focusState","callback","_ref","useRef","isHovered","resolvedProps","layoutProps","nonLayoutProps","stylingProps","margin","border","layout","flexbox","position","background","baseInputProps","e"],"mappings":"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","sourcesContent":["import React, { memo, forwardRef } from 'react';\nimport InputBase from './InputBase';\nimport Box from '../Box';\nimport type { IInputProps } from './types';\nimport { usePropsResolution } from '../../../hooks/useThemeProps';\nimport { extractInObject, stylingProps } from '../../../theme/tools/utils';\nimport { useHover } from '@react-native-aria/interactions';\nimport { mergeRefs } from '../../../utils';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\n\nconst InputAdvance = (\n  {\n    InputLeftElement,\n    InputRightElement,\n    leftElement,\n    rightElement,\n    onFocus,\n    onBlur,\n    inputProps,\n    wrapperRef,\n    ...props\n  }: IInputProps & {\n    inputProps: any;\n  },\n  ref: any\n) => {\n  const inputThemeProps = {\n    isDisabled: inputProps.disabled,\n    isInvalid: inputProps.accessibilityInvalid,\n    isReadOnly: inputProps.accessibilityReadOnly,\n    isRequired: inputProps.required,\n  };\n\n  if (InputLeftElement) {\n    leftElement = InputLeftElement;\n  }\n  if (InputRightElement) {\n    rightElement = InputRightElement;\n  }\n\n  const [isFocused, setIsFocused] = React.useState(false);\n  const handleFocus = (focusState: boolean, callback: any) => {\n    setIsFocused(focusState);\n    callback();\n  };\n\n  const _ref = React.useRef(null);\n  const { isHovered } = useHover({}, _ref);\n\n  const resolvedProps = usePropsResolution(\n    'Input',\n    {\n      ...inputThemeProps,\n      ...props,\n    },\n    {\n      isDisabled: inputThemeProps.isDisabled,\n      isHovered,\n      isFocused,\n      isInvalid: inputThemeProps.isInvalid,\n      isReadOnly: inputThemeProps.isReadOnly,\n    }\n  );\n\n  const [layoutProps, nonLayoutProps] = extractInObject(resolvedProps, [\n    ...stylingProps.margin,\n    ...stylingProps.border,\n    ...stylingProps.layout,\n    ...stylingProps.flexbox,\n    ...stylingProps.position,\n    ...stylingProps.background,\n    'shadow',\n    'opacity',\n  ]);\n\n  // Extracting baseInputProps from remaining props\n  const [, baseInputProps] = extractInObject(nonLayoutProps, ['variant']);\n\n  //TODO: refactor for responsive prop\n  if (\n    useHasResponsiveProps({\n      ...props,\n      InputLeftElement,\n      InputRightElement,\n      onFocus,\n      onBlur,\n      inputProps,\n      wrapperRef,\n    })\n  ) {\n    return null;\n  }\n\n  return (\n    <Box\n      display=\"flex\"\n      flexDirection=\"row\"\n      alignItems=\"center\"\n      justifyContent=\"space-between\"\n      {...layoutProps}\n      ref={mergeRefs([_ref, wrapperRef])}\n    >\n      {InputLeftElement || leftElement ? InputLeftElement || leftElement : null}\n      <InputBase\n        inputProps={inputProps}\n        bg=\"transparent\"\n        {...baseInputProps}\n        flex={1}\n        disableFocusHandling\n        ref={ref}\n        variant=\"unstyled\"\n        onFocus={(e: any) => {\n          handleFocus(true, onFocus ? () => onFocus(e) : () => {});\n        }}\n        onBlur={(e: any) => {\n          handleFocus(false, onBlur ? () => onBlur(e) : () => {});\n        }}\n        shadow=\"none\"\n      />\n      {InputRightElement || rightElement\n        ? InputRightElement || rightElement\n        : null}\n    </Box>\n  );\n};\n\nexport default memo(forwardRef(InputAdvance));\n"]}