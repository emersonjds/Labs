{"version":3,"sources":["Breadcrumb.tsx"],"names":["Breadcrumb","style","children","separator","_text","maxItems","_button","isCollapsed","onCollapseChange","props","ref","textProps","collapsed","setCollapsed","value","defaultValue","onChange","spacing","newProps","separatorProps","accessibilityRole","Platform","OS","undefined","separatorElement","React","cloneElement","mx","length","getBreadcrumbSeparator","Array","isArray","result","buttonAdded","i","push","map","child","index","key","CollapseButton","remainingProps"],"mappings":"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","sourcesContent":["import React, { memo, forwardRef } from 'react';\nimport { AccessibilityRole, Platform } from 'react-native';\nimport { HStack } from '../../primitives/Stack';\nimport { useControllableState } from '../../../hooks';\nimport { Pressable } from '../../primitives/Pressable';\nimport type { IBreadcrumbProps } from './types';\nimport { usePropsResolution } from '../../../hooks/useThemeProps/usePropsResolution';\nimport Text from '../../primitives/Text';\nimport type { IFlexProps } from '../../primitives';\nimport { ThreeDotsIcon } from '../../primitives/Icon/Icons';\n\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\nconst Breadcrumb = (\n  {\n    style,\n    children,\n    separator,\n    _text,\n    maxItems,\n    _button,\n    isCollapsed,\n    onCollapseChange,\n    ...props\n  }: IBreadcrumbProps & IFlexProps,\n  ref: any\n) => {\n  const textProps = { ..._text };\n\n  // Maintaining state to show all children on press of collapse button\n  const [collapsed, setCollapsed] = useControllableState({\n    value: isCollapsed,\n    defaultValue: false,\n    onChange: (value) => {\n      onCollapseChange && onCollapseChange(value);\n    },\n  });\n  const { spacing, ...newProps } = usePropsResolution('Breadcrumb', props);\n\n  const separatorProps = {\n    accessibilityRole: (Platform.OS === 'web'\n      ? 'presentation'\n      : undefined) as AccessibilityRole,\n  };\n  const separatorElement = separator ? (\n    typeof separator === 'string' ? (\n      <Text {...separatorProps} mx={spacing}>\n        {separator}\n      </Text>\n    ) : (\n      React.cloneElement(separator, {\n        mx: spacing,\n        ...separatorProps,\n      })\n    )\n  ) : (\n    <Text mx={spacing} {...separatorProps}>\n      {'/'}\n    </Text>\n  );\n\n  //TODO: refactor for responsive prop\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n  return (\n    <HStack\n      display=\"flex\"\n      flexWrap=\"wrap\"\n      {...newProps}\n      ref={ref}\n      style={style}\n      // Custom Separator\n      divider={separatorElement}\n      space={spacing}\n      // @ts-ignore - Web only prop\n      accessibilityRole={Platform.OS === 'web' ? 'navigation' : undefined}\n      accessibilityLabel=\"Breadcrumb\"\n    >\n      {children && !children.length\n        ? children\n        : getBreadcrumbSeparator(\n            children,\n            textProps,\n            maxItems,\n            _button,\n            collapsed,\n            setCollapsed\n          )}\n    </HStack>\n  );\n};\n\n// Returns children to be rendered\nconst getBreadcrumbSeparator = (\n  children: JSX.Element[] | JSX.Element | any,\n  props: any,\n  maxItems: number | number[] | undefined,\n  _button: any,\n  collapsed: boolean | undefined,\n  setCollapsed: any\n) => {\n  if (Array.isArray(children)) {\n    if (children.length === 1) {\n      return children;\n    }\n    let result: any = [];\n    if (maxItems) {\n      let buttonAdded = false;\n      if (typeof maxItems == 'number') {\n        // When MaxItems is a number\n        if (children.length > 2 * maxItems) {\n          for (let i = 0; i < children.length; i++) {\n            if (i < maxItems || i >= children.length - maxItems) {\n              result.push(children[i]);\n            } else {\n              if (!buttonAdded) {\n                result.push(\n                  <CollapseButton {..._button} setCollapsed={setCollapsed} />\n                );\n                buttonAdded = true;\n              }\n            }\n          }\n          buttonAdded = false;\n        }\n      }\n      // Whem maxItems is an array\n      else if (typeof maxItems == 'object') {\n        if (children.length > maxItems[0] + maxItems[1])\n          for (let i = 0; i < children.length; i++) {\n            if (i < maxItems[0] || i >= children.length - maxItems[1]) {\n              result.push(children[i]);\n            } else {\n              if (!buttonAdded) {\n                // pushing Collapsible button as a child\n                result.push(\n                  <CollapseButton {..._button} setCollapsed={setCollapsed} />\n                );\n                buttonAdded = true;\n              }\n            }\n          }\n        buttonAdded = false;\n      }\n    } else {\n      result = children;\n    }\n    if (!collapsed) {\n      result = children;\n    }\n    return result.map((child: any, index: number) => {\n      return React.cloneElement(child, {\n        _text: { ...props },\n        ...props,\n        key: `breadcrumb-separator-${index}`,\n      });\n    });\n  } else {\n    return children;\n  }\n};\n\n// Collapse button\nconst CollapseButton = (props: any) => {\n  const { ...remainingProps } = props;\n\n  return (\n    <Pressable\n      {...remainingProps}\n      onPress={() => {\n        props.setCollapsed(false);\n      }}\n    >\n      <ThreeDotsIcon size={4} />\n    </Pressable>\n  );\n};\n\nexport default memo(forwardRef(Breadcrumb));\nexport type { IBreadcrumbProps };\n"]}