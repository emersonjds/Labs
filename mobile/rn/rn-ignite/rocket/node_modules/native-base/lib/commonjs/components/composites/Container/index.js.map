{"version":3,"sources":["index.tsx"],"names":["Container","children","props","ref","resolvedProps","React","memo","forwardRef"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AAEA;;;;;;AAEA,MAAMA,SAAS,GAAG,CAAC;AAAEC,EAAAA,QAAF;AAAY,KAAGC;AAAf,CAAD,EAA0CC,GAA1C,KAAwD;AACxE,QAAMC,aAAa,GAAG,+BAAmB,WAAnB,EAAgCF,KAAhC,CAAtB,CADwE,CAGxE;;AACA,MAAI,kDAAsBA,KAAtB,CAAJ,EAAkC;AAChC,WAAO,IAAP;AACD;;AACD,sBACE,6BAAC,YAAD;AAAK,IAAA,GAAG,EAAEC;AAAV,KAAmBC,aAAnB,GACGH,QADH,CADF;AAKD,CAZD;;4BAceI,eAAMC,IAAN,eAAWD,eAAME,UAAN,CAAiBP,SAAjB,CAAX,C","sourcesContent":["import React from 'react';\nimport { usePropsResolution } from '../../../hooks';\nimport Box from '../../primitives/Box';\nimport type { IContainerProps } from './types';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\n\nconst Container = ({ children, ...props }: IContainerProps, ref?: any) => {\n  const resolvedProps = usePropsResolution('Container', props);\n\n  //TODO: refactor for responsive prop\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n  return (\n    <Box ref={ref} {...resolvedProps}>\n      {children}\n    </Box>\n  );\n};\n\nexport default React.memo(React.forwardRef(Container));\nexport type { IContainerProps };\n"]}