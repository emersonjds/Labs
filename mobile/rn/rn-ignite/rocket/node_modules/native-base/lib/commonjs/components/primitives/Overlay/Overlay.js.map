{"version":3,"sources":["Overlay.tsx"],"names":["Overlay","children","isOpen","useRNModalOnAndroid","isKeyboardDismissable","animationPreset","onRequestClose","style","unmountOnExit","exited","setExited","React","useState","enabled","callback","styleObj","overflow","display","Platform","OS"],"mappings":";;;;;;;AACA;;AACA;;AACA;;AAEA;;AACA;;;;AANA;AAoBO,SAASA,OAAT,CAAiB;AACtBC,EAAAA,QADsB;AAEtBC,EAAAA,MAFsB;AAGtBC,EAAAA,mBAAmB,GAAG,KAHA;AAItBC,EAAAA,qBAAqB,GAAG,IAJF;AAKtB;AACAC,EAAAA,eAAe,GAAG,MANI;AAOtBC,EAAAA,cAPsB;AAQtBC,EAAAA,KARsB;AAStBC,EAAAA;AATsB,CAAjB,EAUW;AAChB,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBC,eAAMC,QAAN,CAAe,CAACV,MAAhB,CAA5B;;AAEA,qCAAuB;AACrBW,IAAAA,OAAO,EAAEX,MAAM,IAAIE,qBADE;AAErBU,IAAAA,QAAQ,EAAER,cAAc,GAAGA,cAAH,GAAoB,MAAM,CAAE;AAF/B,GAAvB;AAIA,QAAMS,QAAQ,GAAG,EAAE,GAAGR;AAAL,GAAjB;;AACA,MAAIF,eAAe,KAAK,OAAxB,EAAiC;AAC/BU,IAAAA,QAAQ,CAACC,QAAT,GAAoB,QAApB;AACAD,IAAAA,QAAQ,CAACE,OAAT,GAAmB,MAAnB;AACD,GAHD,MAGO;AACLF,IAAAA,QAAQ,CAACE,OAAT,GAAmBR,MAAM,IAAI,CAACP,MAAX,GAAoB,MAApB,GAA6B,MAAhD;AACD;;AAED,MAAIM,aAAa,IAAI,CAACN,MAAlB,IAA4BO,MAAhC,EAAwC;AACtC,WAAO,IAAP;AACD;;AAED,MAAIS,sBAASC,EAAT,KAAgB,SAAhB,IAA6BhB,mBAAjC,EAAsD;AACpD,wBACE,6BAAC,0CAAD,CAAsB,QAAtB;AAA+B,MAAA,KAAK,EAAE;AAAEM,QAAAA,MAAF;AAAUC,QAAAA;AAAV;AAAtC,oBACE,6BAAC,kBAAD;AACE,MAAA,WAAW,MADb;AAEE,MAAA,OAAO,EAAER,MAFX;AAGE,MAAA,cAAc,EAAEI,cAHlB;AAIE,MAAA,aAAa,EAAED;AAJjB,OAMGJ,QANH,CADF,CADF;AAYD;;AAED,MAAIO,aAAa,IAAI,CAACN,MAAlB,IAA4BO,MAAhC,EAAwC;AACtC,WAAO,IAAP;AACD;;AAED;AAAA;AACE;AACA,iCAAC,0BAAD;AAAkB,MAAA,KAAK,EAAE,EAAE,GAAGM;AAAL;AAAzB,oBACE,6BAAC,0CAAD,CAAsB,QAAtB;AAA+B,MAAA,KAAK,EAAE;AAAEN,QAAAA,MAAF;AAAUC,QAAAA;AAAV;AAAtC,OACGT,QADH,CADF;AAFF;AAQD","sourcesContent":["/* eslint-disable @typescript-eslint/no-unused-vars */\nimport { OverlayContainer } from '@react-native-aria/overlays';\nimport React from 'react';\nimport { Platform, ViewStyle } from 'react-native';\nimport { Modal } from 'react-native';\nimport { useKeyboardDismissable } from '../../../hooks';\nimport { ExitAnimationContext } from './ExitAnimationContext';\n\nexport interface IOverlayProps {\n  isOpen?: boolean;\n  children?: any;\n  // We use RN modal on android if needed as it supports shifting accessiblity focus to the opened view. IOS automatically shifts focus if an absolutely placed view appears in front.\n  useRNModalOnAndroid?: boolean;\n  onRequestClose?: (() => any) | undefined;\n  isKeyboardDismissable?: boolean;\n  animationPreset?: 'fade' | 'slide' | 'none';\n  style?: ViewStyle;\n  unmountOnExit?: boolean;\n}\n\nexport function Overlay({\n  children,\n  isOpen,\n  useRNModalOnAndroid = false,\n  isKeyboardDismissable = true,\n  //@ts-ignore\n  animationPreset = 'fade',\n  onRequestClose,\n  style,\n  unmountOnExit,\n}: IOverlayProps) {\n  const [exited, setExited] = React.useState(!isOpen);\n\n  useKeyboardDismissable({\n    enabled: isOpen && isKeyboardDismissable,\n    callback: onRequestClose ? onRequestClose : () => {},\n  });\n  const styleObj = { ...style };\n  if (animationPreset === 'slide') {\n    styleObj.overflow = 'hidden';\n    styleObj.display = 'flex';\n  } else {\n    styleObj.display = exited && !isOpen ? 'none' : 'flex';\n  }\n\n  if (unmountOnExit && !isOpen && exited) {\n    return null;\n  }\n\n  if (Platform.OS === 'android' && useRNModalOnAndroid) {\n    return (\n      <ExitAnimationContext.Provider value={{ exited, setExited }}>\n        <Modal\n          transparent\n          visible={isOpen}\n          onRequestClose={onRequestClose}\n          animationType={animationPreset}\n        >\n          {children}\n        </Modal>\n      </ExitAnimationContext.Provider>\n    );\n  }\n\n  if (unmountOnExit && !isOpen && exited) {\n    return null;\n  }\n\n  return (\n    //@ts-ignore\n    <OverlayContainer style={{ ...styleObj }}>\n      <ExitAnimationContext.Provider value={{ exited, setExited }}>\n        {children}\n      </ExitAnimationContext.Provider>\n    </OverlayContainer>\n  );\n}\n"]}